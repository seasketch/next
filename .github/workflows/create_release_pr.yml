name: Release PR Manager
on: push
jobs:
  create_or_update_pr:
    runs-on: ubuntu-latest
    name: Create or update release pull-request
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-lerna-version-node-modules
        with:
          path: |
            node_modules
            */*/node_modules
            ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install lerna
        run: |
          npm install -g lerna
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: run lerna version
        run: |
          git config --global user.email "releases@seasketch.org"
          git config --global user.name "Release Manager"
          lerna version --conventional-commits --no-push --yes
          cat ./packages/api/CHANGELOG.md

  # versions:
  #   runs-on: ubuntu-latest
  #   name: Get deployed software versions
  #   outputs:
  #     server_sha: ${{ steps.server.outputs.server_sha }}
  #     server_version: ${{ steps.server.outputs.server_version }}
  #   steps:
  #     - name: Get graphql server version
  #       id: server
  #       run: |
  #         export DATA=`curl -X "POST" "https://api.seasket.ch/graphql" \
  #         -H 'Content-Type: application/json; charset=utf-8' \
  #         -d $'{
  #           "query": "query{version sha}",
  #           "variables": {}
  #         }'`
  #         echo "::set-output name=server_version::`echo $DATA | jq -r '.data.version'`"
  #         echo "::set-output name=server_sha::`echo $DATA | jq -r '.data.sha'`"
  #         echo `echo $DATA | jq -r '.data.version'`
  #         echo `echo $DATA | jq -r '.data.sha'`
  # changes:
  #   name: Detect changes since last release
  #   runs-on: ubuntu-latest
  #   # Set job outputs to values from filter step
  #   outputs:
  #     api: ${{ steps.filter.outputs.api }}
  #     client: ${{ steps.filter.outputs.client }}
  #     migrations: ${{ steps.filter.outputs.migrations }}
  #   needs:
  #     - versions
  #   steps:
  #     - uses: actions/checkout@v2
  #     # For pull requests it's not necessary to checkout the code
  #     - uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         base: ${{ needs.versions.outputs.server_sha }}
  #         filters: |
  #           api:
  #             - 'packages/api/**'
  #           client:
  #             - 'packages/client/**'
  #           migrations:
  #             - 'packages/api/migrations/**'
  # test-server:
  #   name: Test GraphQL API Server
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   services:
  #     postgres:
  #       image: underbluewaters/seasketch_db_base
  #       ports:
  #         - "5432:5432"
  #       env:
  #         POSTGRES_PASSWORD: password
  #     redis:
  #       image: "redis:alpine"
  #       ports:
  #         - "6379:6379"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-server-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: |
  #           node_modules
  #           */*/node_modules
  #           ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - name: Install lerna
  #       run: |
  #         npm install
  #     - name: Install dependencies
  #       run: |
  #         lerna bootstrap --scope=@seasketch/api
  #     - name: Init docker db
  #       working-directory: ./packages/api
  #       env:
  #         TEST_DB: postgres://postgres:password@localhost:5432/
  #       run: |
  #         node tests/init_dockerdb.js
  #     - name: Run Tests
  #       working-directory: ./packages/api
  #       run: |
  #         npx jest --ci --reporters=default --reporters=jest-junit
  #       env:
  #         TEST_DB: postgres://postgres:password@localhost:5432/
  #         SES_EMAIL_SOURCE: do-not-reply@seasketch.org
  #     - uses: IgnusG/jest-report-action@v2.3.1
  #       if: always()
  #       with:
  #         access-token: ${{ secrets.GITHUB_TOKEN }}
  #         working-directory: ./packages/api
  #         check-name: API Test Output
  #         run-name: api
  # test-client:
  #   name: Test React Client
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-client-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: |
  #           node_modules
  #           */*/node_modules
  #           ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - name: Install lerna
  #       run: |
  #         npm install
  #     - name: Install dependencies
  #       run: |
  #         lerna bootstrap --scope=client --scope=mapbox-gl-esri-feature-layers
  #     - name: Test client
  #       working-directory: ./packages/client
  #       env:
  #         SKIP_PREFLIGHT_CHECK: true
  #       run: |
  #         npm run test
  # build-client:
  #   name: Build React Client
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-client-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: |
  #           node_modules
  #           */*/node_modules
  #           ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - name: Install lerna
  #       run: |
  #         npm install
  #     - name: Install dependencies
  #       run: |
  #         lerna bootstrap --scope=client --scope=mapbox-gl-esri-feature-layers
  #     - name: Build client
  #       working-directory: ./packages/client
  #       env:
  #         SKIP_PREFLIGHT_CHECK: true
  #         REACT_APP_AUTH0_CLIENT_ID: ${{ secrets.REACT_APP_AUTH0_CLIENT_ID }}
  #         REACT_APP_AUTH0_DOMAIN: ${{ secrets.REACT_APP_AUTH0_DOMAIN }}
  #         REACT_APP_MAPBOX_ACCESS_TOKEN: ${{ secrets.REACT_APP_MAPBOX_ACCESS_TOKEN }}
  #         REACT_APP_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_GRAPHQL_ENDPOINT }}
  #         REACT_APP_PUBLIC_URL: ${{ secrets.REACT_APP_PUBLIC_URL }}
  #         REACT_APP_GIT_SHA: ${{ github.sha }}
  #       run: |
  #         npm run build
  #     - name: Store build artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: client-build
  #         path: ./packages/client/build
  # run-migrations:
  #   name: Run Database Migrations
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test-server
  #     - changes
  #     # - build-server-container
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-west-2
  #     - name: Install unbuffer command
  #       run: |
  #         sudo apt-get install expect
  #     # This remote command must succeed with the message "database migrations complete"
  #     - name: Run migrations using ecs exec
  #       run: |
  #         unbuffer aws ecs execute-command --cluster ${{secrets.MAINTENANCE_STACK}} --task ${{secrets.MAINTENANCE_TASK}} --container Default --command "/bin/sh -l /home/migrate.sh" --interactive | tee /dev/stderr | grep "database migrations complete"
  # deploy-server:
  #   name: Deploy GraphQL Server
  #   runs-on: ubuntu-latest
  #   if: false
  #   needs:
  #     - test-server
  #     - changes
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-west-2
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-server-deploy-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: |
  #           node_modules
  #           */*/node_modules
  #           ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - name: Install lerna
  #       run: |
  #         npm install
  #     - name: Install CDK
  #       run: |
  #         npm install -g aws-cdk typescript
  #     - name: Install dependencies
  #       run: |
  #         lerna bootstrap --scope=infra
  #     - name: Deploy server
  #       working-directory: ./packages/infra
  #       env:
  #         AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  #         AUTH0_CLIENT_ID: ${{ secrets.REACT_APP_AUTH0_CLIENT_ID }}
  #         COMMIT: ${{ github.sha }}
  #       run: |
  #         cdk deploy -e SeaSketchGraphQLServer
  # deploy-client:
  #   name: Deploy React Client
  #   runs-on: ubuntu-latest
  #   if: false
  #   needs:
  #     - test-server
  #     - run-migrations
  #     - test-client
  #     - build-client
  #     - deploy-server
  #     - changes
  #   steps:
  #     - name: Download client build artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: client-build
  #         path: ./build
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-west-2
  #     - name: Update deployment
  #       env:
  #         S3_BUCKET: ${{ secrets.S3_CLIENT_BUCKET}}
  #       run: |
  #         ls -l
  #         if [[ -z "$S3_BUCKET" ]]; then
  #           echo "S3_BUCKET could not be found" 1>&2
  #           exit 1
  #         fi

  #         echo "Uploading files to $S3_BUCKET..."
  #         aws s3 sync build $S3_BUCKET \
  #           --acl public-read \
  #           --cache-control max-age=31536000 \
  #           --exclude service-worker.js \
  #           --exclude manifest.json \
  #           --exclude index.html \
  #           --delete

  #         echo "Uploading manifest.json"
  #         aws s3 cp build/manifest.json $S3_BUCKET/manifest.json \
  #           --metadata-directive REPLACE \
  #           --cache-control max-age=0,no-cache,no-store,must-revalidate \
  #           --content-type application/json \
  #           --acl public-read

  #         echo "Uploading index.html"
  #         aws s3 cp build/index.html $S3_BUCKET/index.html \
  #           --metadata-directive REPLACE \
  #           --cache-control max-age=0,no-cache,no-store,must-revalidate \
  #           --content-type text/html \
  #           --acl public-read
