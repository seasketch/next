name: Deploy to Production
on:
  pull_request:
    branches: [staging]
    types: [closed]
    tags: "**"
jobs:
  tag_release:
    runs-on: ubuntu-latest
    if: contains( github.event.pull_request.labels.*.name, 'release') && github.event.pull_request.merged == true
    name: Create a release tag
    steps:
      - name: Get tag name
        id: get_tag
        run: |
          echo ${{ github.event.pull_request.title }} | grep -Eo '[[:digit:]]+.[[:digit:]]+.[[:digit:]]$'
          echo "::set-output name=tag::`echo ${{ github.event.pull_request.title }} | grep -Eo '[[:digit:]]+.[[:digit:]]+.[[:digit:]]$'`"
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{steps.get_tag.outputs.tag}}
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-lerna-version-node-modules
        with:
          path: |
            node_modules
            */*/node_modules
            ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install lerna
        run: |
          npm install
      - name: get lerna versions
        run: |
          npx lerna list -a --json > list.json
      - uses: actions/github-script@v4
        name: tag lerna versions
        with:
          script: |
            const packages = require("./list.json");
            for (const package of packages) {
              const { name, version } = package;
              const newTag = `${name}@${version}`;
              const res = await github.git.createRef({
                owner: "seasketch",
                repo: "next",
                ref: `refs/tags/${newTag}`,
                sha: "${{github.sha}}"
              });
              console.log('res', res);
            }
  versions:
    runs-on: ubuntu-latest
    name: Get deployed software versions
    needs:
      - tag_release
    outputs:
      server_sha: ${{ steps.server.outputs.server_sha }}
      server_version: ${{ steps.server.outputs.server_version }}
    steps:
      - name: Get graphql server version
        id: server
        run: |
          export DATA=`curl -X "POST" "https://api.seasket.ch/graphql" \
          -H 'Content-Type: application/json; charset=utf-8' \
          -d $'{
            "query": "query{version sha}",
            "variables": {}
          }'`
          echo "::set-output name=server_version::`echo $DATA | jq -r '.data.version'`"
          echo "::set-output name=server_sha::`echo $DATA | jq -r '.data.sha'`"
          echo `echo $DATA | jq -r '.data.version'`
          echo `echo $DATA | jq -r '.data.sha'`
  changes:
    name: Detect changes since last release
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      api: ${{ steps.filter.outputs.api }}
      client: ${{ steps.filter.outputs.client }}
      migrations: ${{ steps.filter.outputs.migrations }}
    needs:
      - tag_release
      - versions
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ needs.versions.outputs.server_sha }}
          filters: |
            api:
              - 'packages/api/**'
            client:
              - 'packages/client/**'
            migrations:
              - 'packages/api/migrations/**'
  run_migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs:
      - changes
    if: ${{ needs.changes.outputs.migrations }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Install unbuffer command
        run: |
          sudo apt-get install expect
      # This remote command must succeed with the message "database migrations complete"
      - name: Run migrations using ecs exec
        run: |
          unbuffer aws ecs execute-command --cluster ${{secrets.MAINTENANCE_STACK}} --task ${{secrets.MAINTENANCE_TASK}} --container Default --command "/bin/sh -l /home/migrate.sh" --interactive | tee /dev/stderr | grep "database migrations complete"
  deploy_server:
    name: Deploy GraphQL Server
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.api }}
    needs:
      - changes
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-server-deploy-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            node_modules
            */*/node_modules
            ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install lerna
        run: |
          npm install
      - name: Install CDK
        run: |
          npm install -g aws-cdk typescript
      - name: Install dependencies
        run: |
          lerna bootstrap --scope=infra
      - name: Deploy server
        working-directory: ./packages/infra
        env:
          AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
          AUTH0_CLIENT_ID: ${{ secrets.REACT_APP_AUTH0_CLIENT_ID }}
          COMMIT: ${{ github.sha }}
        run: |
          cdk deploy -e SeaSketchGraphQLServer
  build-client:
    name: Build React Client
    runs-on: ubuntu-latest
    needs:
      - changes
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-client-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            node_modules
            */*/node_modules
            ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install lerna
        run: |
          npm install
      - name: Install dependencies
        run: |
          lerna bootstrap --scope=client --scope=mapbox-gl-esri-feature-layers
      - name: Build client
        working-directory: ./packages/client
        env:
          SKIP_PREFLIGHT_CHECK: true
          REACT_APP_AUTH0_CLIENT_ID: ${{ secrets.REACT_APP_AUTH0_CLIENT_ID }}
          REACT_APP_AUTH0_DOMAIN: ${{ secrets.REACT_APP_AUTH0_DOMAIN }}
          REACT_APP_MAPBOX_ACCESS_TOKEN: ${{ secrets.REACT_APP_MAPBOX_ACCESS_TOKEN }}
          REACT_APP_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_GRAPHQL_ENDPOINT }}
          REACT_APP_PUBLIC_URL: ${{ secrets.REACT_APP_PUBLIC_URL }}
          REACT_APP_GIT_SHA: ${{ github.sha }}
        run: |
          npm run build
      - name: Store build artifact
        uses: actions/upload-artifact@v2
        with:
          name: client-build
          path: ./packages/client/build
  deploy_client:
    name: Deploy React Client
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.client && (needs.run_migrations != 'failure' && needs.deploy_server != 'failure') }}
    needs:
      - run_migrations
      - deploy_server
      - changes
    steps:
      - name: Download client build artifact
        uses: actions/download-artifact@v2
        with:
          name: client-build
          path: ./build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Update deployment
        env:
          S3_BUCKET: ${{ secrets.S3_CLIENT_BUCKET}}
        run: |
          ls -l
          if [[ -z "$S3_BUCKET" ]]; then
            echo "S3_BUCKET could not be found" 1>&2
            exit 1
          fi

          echo "Uploading files to $S3_BUCKET..."
          aws s3 sync build $S3_BUCKET \
            --acl public-read \
            --cache-control max-age=31536000 \
            --exclude service-worker.js \
            --exclude manifest.json \
            --exclude index.html \
            --delete

          echo "Uploading manifest.json"
          aws s3 cp build/manifest.json $S3_BUCKET/manifest.json \
            --metadata-directive REPLACE \
            --cache-control max-age=0,no-cache,no-store,must-revalidate \
            --content-type application/json \
            --acl public-read

          echo "Uploading index.html"
          aws s3 cp build/index.html $S3_BUCKET/index.html \
            --metadata-directive REPLACE \
            --cache-control max-age=0,no-cache,no-store,must-revalidate \
            --content-type text/html \
            --acl public-read
  update_pr:
    name: Update PR w/comment
    needs:
      - deploy_client
      - deploy_server
      - run_migrations
    if: ${{ always() }}
    steps:
      - uses: actions/github-script@v4
        name: create comment
        with:
          script: |
            const jobs = ['deploy_server', 'deploy_client', 'run_migrations'];
            const success = jobs.map((id) => needs[id].result != 'failure' && needs[id].result != 'cancelled');
            const cancelled = jobs.find((id) => needs[id].result == 'cancelled');
            let title = "Deployment Success";
            if (!success) {
              if (cancelled) {
                title = "Deployment Cancelled";
              } else {
                title = "Deployment Failed";
              }
            }
            const body = `
            ### ${title}

            ${ jobs.map((id) => `  - [${needs[id].result != 'failure' && needs[id].result != 'cancelled' ? "x" : ""}] ${id}${needs[id].result == 'cancelled'} ? " (cancelled)" : ""`).join("\n")}
            `;
            console.log(body);
            github.issues.createComment({
              owner: "seasketch",
              repo: "next",
              issue_number: github.event.pull_request.number,
              body: body
            });
