name: Create Staging Deployment (Client-only)
on: workflow_dispatch
jobs:
  deploy_client:
    name: Deploy Staging Client
    runs-on: ubuntu-latest
    timeout-minutes: 8
    concurrency: staging_client
    environment:
      name: staging_client
      url: https://staging.seasket.ch/
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-client-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            node_modules
            */*/node_modules
            ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install lerna
        run: |
          npm install
      - name: Install dependencies
        run: |
          lerna bootstrap --scope=client --scope=mapbox-gl-esri-feature-layers
      - name: Build client
        working-directory: ./packages/client
        env:
          SKIP_PREFLIGHT_CHECK: true
          REACT_APP_AUTH0_CLIENT_ID: ${{ secrets.REACT_APP_AUTH0_CLIENT_ID }}
          REACT_APP_AUTH0_DOMAIN: ${{ secrets.REACT_APP_AUTH0_DOMAIN }}
          REACT_APP_AUTH0_SCOPE: "openid profile email permissions"
          REACT_APP_AUTH0_AUDIENCE: https://api.seasketch.org
          REACT_APP_MAPBOX_ACCESS_TOKEN: ${{ secrets.REACT_APP_MAPBOX_ACCESS_TOKEN }}
          REACT_APP_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_GRAPHQL_ENDPOINT }}
          REACT_APP_PUBLIC_URL: ${{ secrets.REACT_APP_PUBLIC_URL }}
          REACT_APP_BUILD: ${{ needs.detect_changes.outputs.build_label }}
          REACT_APP_SENTRY_DSN: ${{ secrets.REACT_APP_SENTRY_DSN }}
          REACT_APP_SENTRY_ENV: ${{ secrets.REACT_APP_SENTRY_ENV }}
          REACT_APP_CLOUDFRONT_DOCS_DISTRO: ${{ secrets.REACT_APP_CLOUDFRONT_DOCS_DISTRO }}
          REACT_APP_ENABLE_GRAPHQL_QUERY_CACHE_BY_DEFAULT: ${{ secrets.REACT_APP_ENABLE_GRAPHQL_QUERY_CACHE_BY_DEFAULT }}
        run: |
          CI=false npm run build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Update deployment
        working-directory: ./packages/client
        env:
          S3_BUCKET: ${{ secrets.S3_CLIENT_BUCKET}}
        run: |
          ls -l
          if [[ -z "$S3_BUCKET" ]]; then
            echo "S3_BUCKET could not be found" 1>&2
            exit 1
          fi

          echo "Uploading files to $S3_BUCKET..."
          aws s3 sync build $S3_BUCKET \
            --acl public-read \
            --cache-control max-age=31536000 \
            --exclude service-worker.js \
            --exclude manifest.json \
            --exclude index.html \
            --delete

          echo "Uploading manifest.json"
          aws s3 cp build/manifest.json $S3_BUCKET/manifest.json \
            --metadata-directive REPLACE \
            --cache-control max-age=0,no-cache,no-store,must-revalidate \
            --content-type application/json \
            --acl public-read

          echo "Uploading index.html"
          aws s3 cp build/index.html $S3_BUCKET/index.html \
            --metadata-directive REPLACE \
            --cache-control max-age=0,no-cache,no-store,must-revalidate \
            --content-type text/html \
            --acl public-read

          echo "Uploading service-worker.js"
            aws s3 cp build/service-worker.js $S3_BUCKET/service-worker.js \
              --metadata-directive REPLACE \
              --cache-control max-age=300 \
              --content-type text/javascript \
              --acl public-read
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: staging
          version: ${{ needs.detect_changes.outputs.build_label }}
          sourcemaps: packages/client/build/static/js/
