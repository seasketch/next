name: Check for deployment messages
on:
  issue_comment:
    types: [created]
jobs:
  create_deployment:
    name: Create Deployment
    runs-on: ubuntu-latest
    outputs:
      force: ${{ steps.flags.outputs.force }}
      migrations: ${{ steps.changed_paths.outputs.migrations }}
      # TODO: shorten and make sure accurate
      build_label: ${{ github.sha }}
    steps:
      - uses: khan/pull-request-comment-trigger@master
        id: check
        with:
          trigger: "/deploy"
          reaction: rocket
          prefix_only: true
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/github-script@v4
        if: steps.check.outputs.triggered == 'true'
        id: flags
        with:
          script: |
            const comment = context.payload.comment.body;
            const flags = (comment.match(/(--[-\w]+)/g) || []).map((f) => f.replace("--", ""));
            console.log(flags);
            const outputs = [
              // run all deployments regardless of code changes (migrations, client, api)
              "force", 
              // skip unit tests and other required checks
              "skip-checks",
              // skip auto-merging pull request upon successful deployment
              "skip-merge"
            ];
            for (const flag of outputs) {
              if (flags.indexOf(flag) !== -1) {
                core.setOutput(flag, "true");
              } else {
                core.setOutput(flag, "false");
              }
            }
            if (flags.indexOf("skip-checks") !== -1) {
              core.setOutput("required_contexts", "");
            } else {
              core.setOutput("required_contexts", "Test GraphQL API Server,Test React Client");
            }
      - uses: actions/github-script@v4
        if: steps.check.outputs.triggered == 'true'
        id: get_pr_status
        with:
          script: |
            const query = `query ($owner: String!, $repo: String!, $pull_number: Int!) {
              repository(owner: $owner, name: $repo) {
                pullRequest(number: $pull_number) {
                  headRefOid
                }
              }
            }`;

            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{  github.event.issue.number }}
            }
            const data = await github.graphql(query, variables);
            console.log(data);
            core.setOutput("head_ref", data.repository.pullRequest.headRefOid);
      # TODO: be sure user is allowed to deploy (best handled by environments?)
      # TODO: don't proceed unless contains ref of latest deployment
      - uses: actions/checkout@v2
        if: steps.check.outputs.triggered == 'true'
        with:
          ref: ${{steps.get_pr_status.outputs.head_ref}}
          fetch-depth: 0
      - uses: actions/github-script@v4
        if: steps.check.outputs.triggered == 'true'
        id: deployments
        with:
          script: |
            const query = `query($owner: String!, $repo: String!, $env: [String!]) { 
              repository(owner: $owner, name: $repo) {
                deployments(environments: $env, last: 100) {
                  nodes {
                    id
                    createdAt
                    state
                    commitOid
                    commit {
                      oid
                      associatedPullRequests(first: 2) {
                        nodes {
                          id
                          title
                          number
                        }
                      }
                    }
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              env: ['production_client', 'production_server', 'production_db_migrations', 'production']
            }
            const data = await github.graphql(query, variables)
            const lockedStates = ['PENDING', 'QUEUED', 'IN_PROGRESS', 'WAITING'];
            const activeDeployment = data.repository.deployments.nodes.find(({state}) => state == 'ACTIVE');
            const lockingDeployments = data.repository.deployments.nodes.filter(({state}) => lockedStates.indexOf(state) != -1);
            if (activeDeployment) {
              core.setOutput('active_ref', activeDeployment.commitOid);
              core.setOutput('has_active_ref', 'true');
            } else {
              core.setOutput('has_active_ref', 'false');
            }
            if (lockingDeployments.length) {
              core.setOutput('locked', 'true');
              core.setOutput('locked_ref', lockingDeployments[0].commitOid);
            } else {
              core.setOutput('locked', 'false');
            }
            if (lockingDeployments.length) {
              core.setFailed(`Deployments already in progress`);
            }
            console.log('base - activeDeployment commit oid', activeDeployment.commitOid);
            console.log('ref - pr head ref', '${{steps.get_pr_status.outputs.head_ref}}');
            console.log('git sha... ${{github.sha}}');
      - uses: dorny/paths-filter@v2
        if: steps.check.outputs.triggered == 'true'
        name: get changed packages
        id: changed_paths
        with:
          # base: ${{ steps.deployments.outputs.active_ref }}
          # ref: ${{steps.get_pr_status.outputs.head_ref}}
          list-files: "escape"
          filters: |
            api:
              - 'packages/api/**'
            client:
              - 'packages/client/**'
            migrations:
              - 'packages/api/migrations/committed/**'
            infra:
              - 'packages/infra/**'
            unmanaged_packages:
              - 'packages/!(api|client|infra)/**'
  run_migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    environment: production_db_migrations
    needs:
      - create_deployment
    if: ${{ needs.create_deployment.outputs.migrations || needs.create_deployment.outputs.force }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Install unbuffer command
        run: |
          sudo apt-get install expect
      # This remote command must succeed with the message "database migrations complete"
      - name: Run migrations using ecs exec
        run: |
          unbuffer aws ecs execute-command --cluster ${{secrets.MAINTENANCE_STACK}} --task ${{secrets.MAINTENANCE_TASK}} --container Default --command "/bin/sh -l /home/migrate.sh ${{github.sha}}" --interactive | tee /dev/stderr | grep "database migrations complete"
  deploy_server:
    name: Deploy GraphQL Server
    runs-on: ubuntu-latest
    environment: production_server
    if: ${{ needs.run_migrations.result != 'failure' && (needs.create_deployment.outputs.api || needs.create_deployment.outputs.force) }}
    needs:
      - create_deployment
      - run_migrations
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-server-deploy-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            node_modules
            */*/node_modules
            ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install lerna
        run: |
          npm install
      - name: Install CDK
        run: |
          npm install -g aws-cdk typescript
      - name: Install dependencies
        run: |
          lerna bootstrap --scope=infra
      - name: Deploy server
        working-directory: ./packages/infra
        env:
          AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
          AUTH0_CLIENT_ID: ${{ secrets.REACT_APP_AUTH0_CLIENT_ID }}
          COMMIT: ${{ github.sha }}
          BUILD: ${{ needs.create_deployment.outputs.build_label }}
        run: |
          cdk deploy -e SeaSketchGraphQLServer
  deploy_client:
    name: Deploy React Client
    runs-on: ubuntu-latest
    environment: production_client
    if: ${{ (needs.create_deployment.outputs.client || needs.create_deployment.outputs.force) && (needs.run_migrations.result != 'failure') }}
    needs:
      - run_migrations
      - create_deployment
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-client-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            node_modules
            */*/node_modules
            ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install lerna
        run: |
          npm install
      - name: Install dependencies
        run: |
          lerna bootstrap --scope=client --scope=mapbox-gl-esri-feature-layers
      - name: Build client
        working-directory: ./packages/client
        env:
          SKIP_PREFLIGHT_CHECK: true
          REACT_APP_AUTH0_CLIENT_ID: ${{ secrets.REACT_APP_AUTH0_CLIENT_ID }}
          REACT_APP_AUTH0_DOMAIN: ${{ secrets.REACT_APP_AUTH0_DOMAIN }}
          REACT_APP_MAPBOX_ACCESS_TOKEN: ${{ secrets.REACT_APP_MAPBOX_ACCESS_TOKEN }}
          REACT_APP_GRAPHQL_ENDPOINT: ${{ secrets.REACT_APP_GRAPHQL_ENDPOINT }}
          REACT_APP_PUBLIC_URL: ${{ secrets.REACT_APP_PUBLIC_URL }}
          REACT_APP_BUILD: ${{ needs.new_deployment.outputs.build_label }}
        run: |
          npm run build
      - name: Store build artifact
        uses: actions/upload-artifact@v2
        with:
          name: client-build
          path: ./packages/client/build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Update deployment
        env:
          S3_BUCKET: ${{ secrets.S3_CLIENT_BUCKET}}
        run: |
          ls -l
          if [[ -z "$S3_BUCKET" ]]; then
            echo "S3_BUCKET could not be found" 1>&2
            exit 1
          fi

          echo "Uploading files to $S3_BUCKET..."
          aws s3 sync build $S3_BUCKET \
            --acl public-read \
            --cache-control max-age=31536000 \
            --exclude service-worker.js \
            --exclude manifest.json \
            --exclude index.html \
            --delete

          echo "Uploading manifest.json"
          aws s3 cp build/manifest.json $S3_BUCKET/manifest.json \
            --metadata-directive REPLACE \
            --cache-control max-age=0,no-cache,no-store,must-revalidate \
            --content-type application/json \
            --acl public-read

          echo "Uploading index.html"
          aws s3 cp build/index.html $S3_BUCKET/index.html \
            --metadata-directive REPLACE \
            --cache-control max-age=0,no-cache,no-store,must-revalidate \
            --content-type text/html \
            --acl public-read
