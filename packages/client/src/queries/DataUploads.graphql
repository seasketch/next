fragment DataUploadDetails on DataUploadTask {
  id
  filename
  tableOfContentsItemStableIds
  projectBackgroundJobId
}

fragment DataUploadExtendedDetails on DataUploadTask {
  ...DataUploadDetails
  job {
    ...JobDetails
  }
}

mutation createDataUpload(
  $projectId: Int!
  $filename: String!
  $contentType: String!
) {
  createDataUpload(
    input: {
      filename: $filename
      projectId: $projectId
      contentType: $contentType
    }
  ) {
    dataUploadTask {
      ...DataUploadExtendedDetails
      presignedUploadUrl
    }
  }
}

fragment JobDetails on ProjectBackgroundJob {
  id
  state
  progress
  progressMessage
  errorMessage
  createdAt
  startedAt
  title
  type
  dataUploadTask {
    ...DataUploadDetails
  }
}

mutation submitDataUpload($jobId: UUID!) {
  submitDataUpload(input: { id: $jobId }) {
    projectBackgroundJob {
      id
      state
      dataUploadTask {
        ...DataUploadExtendedDetails
      }
    }
  }
}

query DataUploadTasks($slug: String!) {
  projectBySlug(slug: $slug) {
    id
    activeDataUploads {
      ...DataUploadExtendedDetails
    }
  }
}

query ProjectBackgroundJobs($slug: String!) {
  projectBySlug(slug: $slug) {
    id
    projectBackgroundJobs {
      ...JobDetails
    }
  }
}

mutation DismissFailedJob($id: UUID!) {
  dismissFailedJob(input: { id: $id }) {
    projectBackgroundJob {
      ...JobDetails
    }
  }
}

mutation FailUpload($id: UUID!, $message: String!) {
  failDataUpload(input: { id: $id, msg: $message }) {
    dataUploadTask {
      id
      projectBackgroundJobId
    }
  }
}

query ProjectDataQuotaRemaining($slug: String!) {
  projectBySlug(slug: $slug) {
    id
    dataHostingQuota
    dataHostingQuotaUsed
  }
}

mutation CancelUpload($projectId: Int!, $jobId: UUID!) {
  cancelBackgroundJob(input: { projectId: $projectId, jobId: $jobId }) {
    clientMutationId
  }
}

mutation UpdateDataHostingQuota($projectId: Int!, $quota: BigInt!) {
  updateDataHostingQuota(input: { projectId: $projectId, quota: $quota }) {
    project {
      id
      dataHostingQuota
      dataHostingQuotaUsed
    }
  }
}

fragment BackgroundJobSubscriptionEvent on ProjectBackgroundJobSubscriptionPayload {
  id
  previousState
  job {
    ...JobDetails
  }
}

subscription ProjectBackgroundJob($slug: String!) {
  backgroundJobs(slug: $slug) {
    ...BackgroundJobSubscriptionEvent
  }
}
