query DraftTableOfContents($slug: String!) {
  projectBySlug(slug: $slug) {
    id
    draftTableOfContentsHasChanges
    tableOfContentsLastPublished
    region {
      geojson
    }
    draftTableOfContentsItems {
      ...Overlay
    }
    importedArcgisServices
    downloadableLayersCount
    eligableDownloadableLayersCount
  }
}

query layersAndSourcesForItems(
  $slug: String!
  $tableOfContentsItemIds: [Int]!
) {
  projectBySlug(slug: $slug) {
    id
    dataSourcesForItems(tableOfContentsItemIds: $tableOfContentsItemIds) {
      attribution
      bounds
      buffer
      byteLength
      cluster
      clusterMaxZoom
      clusterProperties
      clusterRadius
      coordinates
      createdAt
      encoding
      enhancedSecurity
      id
      importType
      lineMetrics
      maxzoom
      minzoom
      originalSourceUrl
      queryParameters
      scheme
      tiles
      tileSize
      tolerance
      type
      url
      urls
      useDevicePixelRatio
      supportsDynamicLayers
      uploadedSourceFilename
      translatedProps
      arcgisFetchStrategy
    }
    dataLayersForItems(tableOfContentsItemIds: $tableOfContentsItemIds) {
      interactivitySettings {
        id
        cursor
        longTemplate
        shortTemplate
        type
        title
      }
      staticId
      sprites {
        id
        spriteImages {
          pixelRatio
          height
          width
          url
          spriteId
        }
        type
      }
      zIndex
      dataSourceId
      id
      mapboxGlStyles
      renderUnder
      sourceLayer
      sublayer
    }
  }
}

mutation CreateFolder(
  $title: String!
  $stableId: String!
  $projectId: Int!
  $parentStableId: String
  $isClickOffOnly: Boolean
  $showRadioChildren: Boolean
  $hideChildren: Boolean
) {
  createTableOfContentsItem(
    input: {
      tableOfContentsItem: {
        title: $title
        stableId: $stableId
        projectId: $projectId
        parentStableId: $parentStableId
        isFolder: true
        isClickOffOnly: $isClickOffOnly
        showRadioChildren: $showRadioChildren
        hideChildren: $hideChildren
      }
    }
  ) {
    tableOfContentsItem {
      id
      title
      stableId
      projectId
      parentStableId
      isClickOffOnly
      isDraft
      isFolder
      showRadioChildren
      isClickOffOnly
      sortIndex
      hideChildren
      enableDownload
    }
  }
}

mutation DeleteBranch($id: Int!) {
  deleteTableOfContentsBranch(input: { tableOfContentsItemId: $id }) {
    clientMutationId
  }
}

mutation UpdateTableOfContentsItemChildren($id: Int, $childIds: [Int]!) {
  updateTableOfContentsItemChildren(
    input: { parentId: $id, childIds: $childIds }
  ) {
    tableOfContentsItems {
      id
      sortIndex
      parentStableId
    }
  }
}

query GetFolder($id: Int!) {
  tableOfContentsItem(id: $id) {
    id
    bounds
    isClickOffOnly
    showRadioChildren
    title
    hideChildren
    acl {
      nodeId
      id
    }
  }
}

mutation UpdateFolder(
  $id: Int!
  $bounds: [BigFloat]
  $isClickOffOnly: Boolean
  $showRadioChildren: Boolean
  $title: String
  $hideChildren: Boolean
) {
  updateTableOfContentsItem(
    input: {
      id: $id
      patch: {
        bounds: $bounds
        isClickOffOnly: $isClickOffOnly
        showRadioChildren: $showRadioChildren
        title: $title
        hideChildren: $hideChildren
      }
    }
  ) {
    tableOfContentsItem {
      id
      bounds
      isClickOffOnly
      showRadioChildren
      hideChildren
      title
    }
  }
}

query GetLayerItem($id: Int!) {
  tableOfContentsItem(id: $id) {
    id
    acl {
      nodeId
      id
      type
      groups {
        id
        name
      }
    }
    bounds
    dataLayerId
    metadata
    parentStableId
    projectId
    stableId
    title
    enableDownload
    geoprocessingReferenceId
    primaryDownloadUrl
    hasOriginalSourceUpload
    dataLayer {
      id
      zIndex
      mapboxGlStyles
      interactivitySettingsId
      renderUnder
      sourceLayer
      sublayer
      staticId
      sprites {
        id
        spriteImages {
          pixelRatio
          height
          width
          url
        }
        type
      }
      dataSourceId
      dataSource {
        id
        attribution
        bounds
        buffer
        byteLength
        cluster
        clusterMaxZoom
        clusterProperties
        clusterRadius
        coordinates
        createdAt
        encoding
        enhancedSecurity
        generateId
        importType
        lineMetrics
        maxzoom
        minzoom
        originalSourceUrl
        promoteId
        queryParameters
        scheme
        tiles
        tileSize
        tolerance
        type
        url
        urls
        useDevicePixelRatio
        supportsDynamicLayers
        uploadedSourceFilename
        uploadedBy
        geostats
        translatedProps
        arcgisFetchStrategy
      }
    }
  }
}

mutation UpdateTableOfContentsItem(
  $id: Int!
  $title: String
  $bounds: [BigFloat]
  $metadata: JSON
  $geoprocessingReferenceId: String
) {
  updateTableOfContentsItem(
    input: {
      id: $id
      patch: {
        title: $title
        bounds: $bounds
        metadata: $metadata
        geoprocessingReferenceId: $geoprocessingReferenceId
      }
    }
  ) {
    tableOfContentsItem {
      id
      bounds
      metadata
      title
      geoprocessingReferenceId
      stableId
    }
  }
}

mutation UpdateEnableDownload($id: Int!, $enableDownload: Boolean) {
  updateTableOfContentsItem(
    input: { id: $id, patch: { enableDownload: $enableDownload } }
  ) {
    tableOfContentsItem {
      id
      enableDownload
      project {
        id
        downloadableLayersCount
        eligableDownloadableLayersCount
      }
      primaryDownloadUrl
    }
  }
}

mutation UpdateLayer(
  $id: Int!
  $renderUnder: RenderUnderType
  $mapboxGlStyles: JSON
  $sublayer: String
  $staticId: String
) {
  updateDataLayer(
    input: {
      id: $id
      patch: {
        renderUnder: $renderUnder
        mapboxGlStyles: $mapboxGlStyles
        sublayer: $sublayer
        staticId: $staticId
      }
    }
  ) {
    dataLayer {
      id
      zIndex
      renderUnder
      mapboxGlStyles
      sublayer
      staticId
      sprites {
        id
        spriteImages {
          pixelRatio
          height
          width
          url
        }
        type
      }
    }
  }
}

mutation UpdateDataSource($id: Int!, $attribution: String) {
  updateDataSource(input: { id: $id, patch: { attribution: $attribution } }) {
    dataSource {
      id
      attribution
      bounds
      buffer
      byteLength
      cluster
      clusterMaxZoom
      clusterProperties
      clusterRadius
      coordinates
      createdAt
      encoding
      enhancedSecurity
      generateId
      importType
      lineMetrics
      maxzoom
      minzoom
      originalSourceUrl
      promoteId
      queryParameters
      scheme
      tiles
      tileSize
      tolerance
      type
      url
      urls
      useDevicePixelRatio
      supportsDynamicLayers
      translatedProps
    }
  }
}

query InteractivitySettingsForLayer($layerId: Int!) {
  dataLayer(id: $layerId) {
    id
    sourceLayer
    interactivitySettings {
      cursor
      id
      longTemplate
      shortTemplate
      type
      title
    }
  }
}

mutation UpdateInteractivitySettings(
  $id: Int!
  $type: InteractivityType
  $cursor: CursorType
  $longTemplate: String
  $shortTemplate: String
  $title: String
) {
  updateInteractivitySetting(
    input: {
      id: $id
      patch: {
        type: $type
        cursor: $cursor
        longTemplate: $longTemplate
        shortTemplate: $shortTemplate
        title: $title
      }
    }
  ) {
    interactivitySetting {
      id
      type
      cursor
      longTemplate
      shortTemplate
      title
    }
  }
}

query DataSourceUrlProperties($id: Int!) {
  dataSource(id: $id) {
    id
    type
    url
    originalSourceUrl
    queryParameters
  }
}

mutation UpdateZIndexes($dataLayerIds: [Int]!) {
  updateZIndexes(input: { dataLayerIds: $dataLayerIds }) {
    dataLayers {
      id
      zIndex
    }
  }
}

mutation UpdateRenderUnderType($layerId: Int!, $renderUnder: RenderUnderType) {
  updateDataLayer(
    input: { id: $layerId, patch: { renderUnder: $renderUnder } }
  ) {
    dataLayer {
      id
      renderUnder
    }
  }
}

mutation UpdateQueryParameters($sourceId: Int!, $queryParameters: JSON!) {
  updateDataSource(
    input: { id: $sourceId, patch: { queryParameters: $queryParameters } }
  ) {
    dataSource {
      id
      queryParameters
    }
  }
}

mutation UpdateFetchStrategy(
  $sourceId: Int!
  $fetchStrategy: ArcgisFeatureLayerFetchStrategy!
) {
  updateDataSource(
    input: { id: $sourceId, patch: { arcgisFetchStrategy: $fetchStrategy } }
  ) {
    dataSource {
      id
      arcgisFetchStrategy
    }
  }
}

mutation UpdateEnableHighDPIRequests(
  $sourceId: Int!
  $useDevicePixelRatio: Boolean!
) {
  updateDataSource(
    input: {
      id: $sourceId
      patch: { useDevicePixelRatio: $useDevicePixelRatio }
    }
  ) {
    dataSource {
      id
      useDevicePixelRatio
    }
  }
}

query GetMetadata($itemId: Int!) {
  tableOfContentsItem(id: $itemId) {
    id
    computedMetadata
    usesDynamicMetadata
    isCustomGlSource
  }
}

mutation UpdateMetadata($itemId: Int!, $metadata: JSON) {
  updateTableOfContentsItem(
    input: { id: $itemId, patch: { metadata: $metadata } }
  ) {
    tableOfContentsItem {
      id
      metadata
      usesDynamicMetadata
      computedMetadata
    }
  }
}

query ProjectHostingQuota($slug: String!) {
  projectBySlug(slug: $slug) {
    id
    dataHostingQuota
    dataHostingQuotaUsed
  }
}

query InteractivitySettingsById($id: Int!) {
  interactivitySetting(id: $id) {
    cursor
    id
    layers
    longTemplate
    shortTemplate
    type
    title
  }
}

mutation PublishTableOfContents($projectId: Int!) {
  publishTableOfContents(input: { projectId: $projectId }) {
    tableOfContentsItems {
      id
    }
  }
}

subscription DraftStatus($slug: String!) {
  updatedDraftTableOfContentsStatus(slug: $slug) {
    hasChanges
    projectId
    project {
      id
      draftTableOfContentsHasChanges
      tableOfContentsLastPublished
    }
  }
}

mutation ImportArcGISService(
  $items: [ArcgisImportItemInput!]!
  $sources: [ArcgisImportSourceInput!]!
  $projectId: Int!
) {
  importArcgisServices(
    input: { items: $items, sources: $sources, projectId: $projectId }
  ) {
    tableOfContentsItems {
      id
      title
    }
  }
}

mutation SetMaxZoom($sourceId: Int!, $maxzoom: Int) {
  updateDataSource(input: { id: $sourceId, patch: { maxzoom: $maxzoom } }) {
    dataSource {
      id
      maxzoom
    }
  }
}

query ProjectDownloadSetting($slug: String!) {
  projectBySlug(slug: $slug) {
    id
    enableDownloadByDefault
    downloadableLayersCount
  }
}

mutation UpdateEnableDownloadByDefault(
  $projectId: Int!
  $enableDownload: Boolean
) {
  updateProject(
    input: {
      id: $projectId
      patch: { enableDownloadByDefault: $enableDownload }
    }
  ) {
    project {
      id
      enableDownloadByDefault
      downloadableLayersCount
    }
  }
}

mutation EnableDownloadForEligibleLayers($slug: String!) {
  enableDownloadForEligibleLayers(input: { slug: $slug }) {
    project {
      id
      downloadableLayersCount
      eligableDownloadableLayersCount
      draftTableOfContentsItems {
        id
        enableDownload
        primaryDownloadUrl
      }
    }
  }
}

mutation DisableDownloadForSharedLayers($slug: String!) {
  disableDownloadForSharedLayers(input: { slug: $slug }) {
    project {
      id
      downloadableLayersCount
      eligableDownloadableLayersCount
      draftTableOfContentsItems {
        id
        enableDownload
        primaryDownloadUrl
      }
    }
  }
}
