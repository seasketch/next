fragment SketchFormElement on FormElement {
  id
  componentSettings
  alternateLanguageSettings
  body
  isRequired
  isInput
  position
  typeId
  exportId
  generatedExportId
  generatedLabel
  type {
    componentName
    isInput
    isSingleUseOnly
    isSurveysOnly
    label
    isHidden
    geostatsType
    geostatsArrayOf
  }
}

fragment SketchingDetails on SketchClass {
  id
  name
  isArchived
  isTemplate
  mapboxGlStyle
  projectId
  sketchCount
  validChildren {
    id
    name
  }
  allowMulti
  form {
    id
    formElements {
      ...SketchFormElement
    }
    logicRules {
      ...LogicRuleDetails
    }
  }
  geometryType
  filterApiVersion
  filterApiServerLocation
  geoprocessingClientName
  geoprocessingClientUrl
  geoprocessingProjectUrl
  formElementId
  preprocessingEndpoint
  preprocessingProjectUrl
  canDigitize
  translatedProps
  isGeographyClippingEnabled
  clippingGeographies {
    ...GeographyDetails
  }
}

fragment SketchingGeographyDetails on SketchClass {
  clippingGeographies {
    ...GeographyDetails
  }
}

mutation UpdateSketchClassGeographies($id: Int!, $geographyIds: [Int!]!) {
  updateSketchClassGeographies(
    input: { sketchClassId: $id, geographyIds: $geographyIds }
  ) {
    sketchClass {
      id
      ...SketchingGeographyDetails
    }
  }
}

fragment AdminSketchingDetails on SketchClass {
  ...SketchingDetails
  acl {
    nodeId
    type
    id
    sketchClassId
    groups {
      id
      name
    }
  }
}

query SketchClassForm($id: Int!) {
  form(id: $id) {
    id
    formElements {
      ...SketchFormElement
    }
    sketchClassId
    logicRules {
      ...LogicRuleDetails
    }
  }
}

mutation CreateSketchClass($projectId: Int!, $templateId: Int!) {
  createSketchClassFromTemplate(
    input: { projectId: $projectId, templateSketchClassId: $templateId }
  ) {
    sketchClass {
      ...AdminSketchingDetails
    }
  }
}

fragment TemplateSketchClass on SketchClass {
  id
  name
  geometryType
  templateDescription
}

query TemplateSketchClasses {
  templateSketchClasses {
    ...TemplateSketchClass
  }
}

query SketchClasses($slug: String!) {
  projectBySlug(slug: $slug) {
    id
    sketchClasses {
      ...AdminSketchingDetails
    }
  }
}

mutation UpdateSketchClass(
  $id: Int!
  $name: String
  $isArchived: Boolean
  $filterApiServerLocation: String
) {
  updateSketchClass(
    input: {
      id: $id
      patch: {
        name: $name
        isArchived: $isArchived
        filterApiServerLocation: $filterApiServerLocation
      }
    }
  ) {
    sketchClass {
      ...AdminSketchingDetails
    }
  }
}

mutation DeleteSketchClass($id: Int!) {
  deleteSketchClass(input: { id: $id }) {
    sketchClass {
      ...AdminSketchingDetails
    }
  }
}

mutation UpdateGeoprocessingServices(
  $id: Int!
  $preprocessingEndpoint: String
  $preprocessingProjectUrl: String
  $geoprocessingClientName: String
  $geoprocessingClientUrl: String
  $geoprocessingProjectUrl: String
) {
  updateSketchClass(
    input: {
      id: $id
      patch: {
        preprocessingEndpoint: $preprocessingEndpoint
        preprocessingProjectUrl: $preprocessingProjectUrl
        geoprocessingClientName: $geoprocessingClientName
        geoprocessingClientUrl: $geoprocessingClientUrl
        geoprocessingProjectUrl: $geoprocessingProjectUrl
      }
    }
  ) {
    sketchClass {
      id
      preprocessingEndpoint
      preprocessingProjectUrl
      geoprocessingClientName
      geoprocessingClientUrl
      geoprocessingProjectUrl
    }
  }
}

mutation UpdateSketchFormElement(
  $id: Int!
  $isRequired: Boolean
  $exportId: String
) {
  updateFormElement(
    input: { id: $id, patch: { isRequired: $isRequired, exportId: $exportId } }
  ) {
    formElement {
      id
      isRequired
      exportId
    }
  }
}

fragment LogicRuleEditorFormElementDetails on FormElement {
  ...SketchFormElement
  generatedLabel
  componentSettings
  type {
    componentName
    isInput
    isHidden
    supportedOperators
  }
}

fragment LogicRuleEditorFormDetails on Form {
  id
  formElements {
    ...LogicRuleEditorFormElementDetails
  }
  logicRules {
    ...LogicRuleDetails
  }
}

query SketchClassLogicRuleDetails($sketchClassId: Int!) {
  sketchClass(id: $sketchClassId) {
    form {
      ...LogicRuleEditorFormDetails
    }
  }
}

mutation createVisibilityRule($formElementId: Int!) {
  createVisibilityLogicRule(input: { formElementId: $formElementId }) {
    formLogicRule {
      id
      ...LogicRuleDetails
    }
  }
}

mutation UpdateVisibilityRule(
  $id: Int!
  $command: FormLogicCommand
  $booleanOperator: FormLogicOperator
) {
  updateFormLogicRule(
    input: {
      id: $id
      patch: { command: $command, booleanOperator: $booleanOperator }
    }
  ) {
    formLogicRule {
      id
      command
      booleanOperator
    }
  }
}

mutation UpdateVisibilityCondition(
  $id: Int!
  $operator: FieldRuleOperator
  $subjectId: Int
  $value: JSON
) {
  updateFormLogicCondition(
    input: {
      id: $id
      patch: { operator: $operator, subjectId: $subjectId, value: $value }
    }
  ) {
    formLogicCondition {
      id
      operator
      subjectId
      value
    }
  }
}

mutation DeleteVisibilityRule($id: Int!) {
  deleteFormLogicRule(input: { id: $id }) {
    formLogicRule {
      id
    }
  }
}

mutation AddVisibilityCondition(
  $ruleId: Int!
  $subjectId: Int!
  $operator: FieldRuleOperator!
  $value: JSON!
) {
  createFormLogicCondition(
    input: {
      formLogicCondition: {
        ruleId: $ruleId
        subjectId: $subjectId
        operator: $operator
        value: $value
      }
    }
  ) {
    formLogicCondition {
      id
      operator
      subjectId
      value
      ruleId
    }
  }
}

mutation DeleteVisibilityRuleCondition($id: Int!) {
  deleteFormLogicCondition(input: { id: $id }) {
    formLogicCondition {
      id
    }
  }
}

mutation UpdateSketchClassStyle($id: Int!, $style: JSON) {
  updateSketchClassMapboxGLStyle(sketchClassId: $id, style: $style) {
    id
    mapboxGlStyle
  }
}

mutation ToggleSketchClassGeographyClipping(
  $id: Int!
  $isGeographyClippingEnabled: Boolean!
) {
  updateSketchClass(
    input: {
      id: $id
      patch: { isGeographyClippingEnabled: $isGeographyClippingEnabled }
    }
  ) {
    sketchClass {
      id
      isGeographyClippingEnabled
    }
  }
}

query SketchClassGeographyEditorDetails($slug: String!) {
  projectBySlug(slug: $slug) {
    id
    enableReportBuilder
    sketchClasses {
      ...SketchingDetails
      clippingGeographies {
        ...GeographyDetails
      }
    }
    geographies {
      ...GeographyDetails
    }
  }
}

fragment ReportCardDetails on ReportCard {
  id
  title
  position
  type
  componentSettings
  alternateLanguageSettings
  tint
  icon
  body
}

fragment ReportTabDetails on ReportTab {
  id
  title
  position
  cards {
    ...ReportCardDetails
  }
}

fragment DraftReportDetails on Report {
  id
  createdAt
  tabs {
    ...ReportTabDetails
  }
}

query DraftReport($sketchClassId: Int!) {
  sketchClass(id: $sketchClassId) {
    draftReport {
      ...DraftReportDetails
    }
  }
}

mutation CreateDraftReport($sketchClassId: Int!) {
  createDraftReport(input: { sketchClassId: $sketchClassId }) {
    report {
      ...DraftReportDetails
    }
  }
}

mutation AddReportTab($reportId: Int!, $title: String!, $position: Int!) {
  addReportTab(
    input: { reportId: $reportId, title: $title, tabPosition: $position }
  ) {
    reportTab {
      ...ReportTabDetails
    }
  }
}

mutation DeleteReportTab($tabId: Int!, $moveCardsToTabId: Int) {
  deleteReportTab(
    input: { tabId: $tabId, moveCardsToTabId: $moveCardsToTabId }
  ) {
    boolean
  }
}

mutation RenameReportTab($tabId: Int!, $title: String!) {
  renameReportTab(input: { tabId: $tabId, title: $title }) {
    reportTab {
      ...ReportTabDetails
    }
  }
}

mutation ReorderReportTabs($reportId: Int!, $tabIds: [Int!]!) {
  reorderReportTabs(input: { reportId: $reportId, tabIds: $tabIds }) {
    reportTabs {
      ...ReportTabDetails
    }
  }
}

mutation AddReportCard(
  $reportTabId: Int!
  $title: String!
  $componentSettings: JSON!
  $cardType: String!
  $body: JSON!
) {
  addReportCard(
    input: {
      reportTabId: $reportTabId
      title: $title
      componentSettings: $componentSettings
      cardType: $cardType
      body: $body
    }
  ) {
    reportCard {
      id
    }
  }
}

mutation ReorderReportTabCards($reportTabId: Int!, $cardIds: [Int!]!) {
  reorderReportTabCards(
    input: { reportTabId: $reportTabId, cardIds: $cardIds }
  ) {
    reportCards {
      id
      position
    }
  }
}

mutation UpdateReportCard(
  $id: Int!
  $title: String!
  $componentSettings: JSON
  $alternateLanguageSettings: JSON
  $body: JSON
  $tint: String
  $icon: String
  $cardType: String
) {
  updateReportCard(
    input: {
      cardId: $id
      title: $title
      componentSettings: $componentSettings
      alternateLanguageSettings: $alternateLanguageSettings
      body: $body
      tint: $tint
      icon: $icon
      cardType: $cardType
    }
  ) {
    reportCard {
      ...ReportCardDetails
    }
  }
}

mutation DeleteReportCard($id: Int!) {
  deleteReportCard(input: { cardId: $id }) {
    boolean
  }
}

mutation MoveCardToTab($cardId: Int!, $tabId: Int!) {
  moveCardToTab(input: { cardId: $cardId, tabId: $tabId }) {
    reportCard {
      id
      position
    }
  }
}
