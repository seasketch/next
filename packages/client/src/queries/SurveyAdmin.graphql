fragment SurveyListDetails on Survey {
  id
  accessType
  showProgress
  invitedGroups {
    id
    name
  }
  isDisabled
  limitToSingleResponse
  name
  submittedResponseCount
  practiceResponseCount
  projectId
  isTemplate
  showFacilitationOption
  supportedLanguages
}

query Surveys($projectId: Int!) {
  project(id: $projectId) {
    id
    surveys {
      ...SurveyListDetails
    }
  }
}

mutation CreateSurvey($name: String!, $projectId: Int!, $templateId: Int) {
  makeSurvey(
    input: { projectId: $projectId, name: $name, templateId: $templateId }
  ) {
    survey {
      ...SurveyListDetails
    }
  }
}

query SurveyById($id: Int!) {
  survey(id: $id) {
    ...SurveyListDetails
    isSpatial
  }
}

fragment AddFormElementTypeDetails on FormElementType {
  componentName
  isHidden
  isInput
  isSingleUseOnly
  isSurveysOnly
  label
  supportedOperators
  isSpatial
  allowedLayouts
}

fragment FormElementDetails on FormElement {
  body
  componentSettings
  alternateLanguageSettings
  exportId
  formId
  id
  isRequired
  position
  jumpToId
  type {
    ...AddFormElementTypeDetails
  }
  isInput
  typeId
  backgroundColor
  secondaryColor
  backgroundImage
  layout
  backgroundPalette
  textVariant
  unsplashAuthorUrl
  unsplashAuthorName
  backgroundWidth
  backgroundHeight
  subordinateTo
  mapBasemaps
  mapCameraOptions
}

fragment SketchClassDetails on SketchClass {
  id
  mapboxGlStyle
  formElementId
  geometryType
  geoprocessingClientName
  geoprocessingClientUrl
  geoprocessingProjectUrl
  allowMulti
  form {
    formElements {
      ...FormElementDetails
    }
    id
    logicRules {
      ...LogicRuleDetails
    }
  }
}

fragment FormElementFullDetails on FormElement {
  ...FormElementDetails
  sketchClass {
    ...SketchClassDetails
  }
}

fragment LogicRuleDetails on FormLogicRule {
  booleanOperator
  command
  id
  jumpToId
  position
  formElementId
  conditions {
    id
    operator
    value
    subjectId
    ruleId
  }
}

query SurveyFormEditorDetails($id: Int!, $slug: String!) {
  formElementTypes {
    ...AddFormElementTypeDetails
  }
  survey(id: $id) {
    ...SurveyListDetails
    form {
      id
      isTemplate
      surveyId
      templateName
      templateType
      formElements {
        ...FormElementFullDetails
      }
      logicRules {
        ...LogicRuleDetails
      }
    }
  }
  projectBySlug(slug: $slug) {
    id
    name
    url
    region {
      geojson
    }
  }
}

query FormElementTypes {
  formElementTypes {
    ...AddFormElementTypeDetails
  }
}

mutation UpdateSurveyBaseSettings(
  $id: Int!
  $showProgress: Boolean
  $showFacilitationOption: Boolean
  $supportedLanguages: [String]
) {
  updateSurvey(
    input: {
      id: $id
      patch: {
        showProgress: $showProgress
        showFacilitationOption: $showFacilitationOption
        supportedLanguages: $supportedLanguages
      }
    }
  ) {
    survey {
      id
      showProgress
      showFacilitationOption
      supportedLanguages
    }
  }
}

mutation UpdateFormElementSketchClass(
  $id: Int!
  $geometryType: SketchGeometryType
  $allowMulti: Boolean
  $mapboxGlStyle: JSON
  $geoprocessingClientName: String
  $geoprocessingClientUrl: String
  $geoprocessingProjectUrl: String
) {
  updateSketchClass(
    input: {
      id: $id
      patch: {
        geometryType: $geometryType
        allowMulti: $allowMulti
        mapboxGlStyle: $mapboxGlStyle
        geoprocessingClientName: $geoprocessingClientName
        geoprocessingClientUrl: $geoprocessingClientUrl
        geoprocessingProjectUrl: $geoprocessingProjectUrl
      }
    }
  ) {
    sketchClass {
      id
      geometryType
      allowMulti
      mapboxGlStyle
      geoprocessingClientName
      geoprocessingClientUrl
      geoprocessingProjectUrl
    }
  }
}

mutation UpdateFormElement(
  $id: Int!
  $isRequired: Boolean
  $body: JSON
  $exportId: String
  $componentSettings: JSON
  $alternateLanguageSettings: JSON
  $jumpToId: Int
  $typeId: String
) {
  updateFormElement(
    input: {
      id: $id
      patch: {
        isRequired: $isRequired
        body: $body
        exportId: $exportId
        componentSettings: $componentSettings
        jumpToId: $jumpToId
        typeId: $typeId
        alternateLanguageSettings: $alternateLanguageSettings
      }
    }
  ) {
    formElement {
      id
      isRequired
      body
      exportId
      componentSettings
      alternateLanguageSettings
      jumpToId
      typeId
    }
  }
}

mutation UpdateComponentSettings($id: Int!, $componentSettings: JSON) {
  updateFormElement(
    input: { id: $id, patch: { componentSettings: $componentSettings } }
  ) {
    formElement {
      id
      componentSettings
    }
  }
}

mutation UpdateAlternateLanguageSettings(
  $id: Int!
  $alternateLanguageSettings: JSON
) {
  updateFormElement(
    input: {
      id: $id
      patch: { alternateLanguageSettings: $alternateLanguageSettings }
    }
  ) {
    formElement {
      id
      alternateLanguageSettings
    }
  }
}

mutation UpdateFormElementBody($id: Int!, $body: JSON!) {
  updateFormElement(input: { id: $id, patch: { body: $body } }) {
    formElement {
      id
      body
    }
  }
}

mutation UpdateFormElementOrder($elementIds: [Int]) {
  setFormElementOrder(input: { elementIds: $elementIds }) {
    formElements {
      id
      position
    }
  }
}

mutation AddFormElement(
  $body: JSON!
  $componentSettings: JSON!
  $formId: Int!
  $componentType: String!
  $position: Int
  $exportId: String
  $subordinateTo: Int
  $isRequired: Boolean!
) {
  createFormElement(
    input: {
      formElement: {
        body: $body
        componentSettings: $componentSettings
        formId: $formId
        isRequired: $isRequired
        typeId: $componentType
        position: $position
        exportId: $exportId
        subordinateTo: $subordinateTo
      }
    }
  ) {
    formElement {
      ...FormElementFullDetails
    }
  }
}

mutation DeleteFormElement($id: Int!) {
  deleteFormElement(input: { id: $id }) {
    formElement {
      id
    }
  }
}

mutation UpdateForm($id: Int!, $isTemplate: Boolean, $templateName: String) {
  updateForm(
    input: {
      id: $id
      patch: { isTemplate: $isTemplate, templateName: $templateName }
    }
  ) {
    form {
      id
      isTemplate
      templateName
    }
  }
}

query GetPhotos($query: String!) {
  getUnsplashPhotos(query: $query) {
    results {
      blur_hash
      color
      description
      height
      width
      id
      links {
        download_location
      }
      urls {
        full
        raw
        regular
        small
        thumb
      }
      user {
        id
        name
        username
        links {
          html
        }
      }
    }
  }
}

mutation UpdateFormElementBackground(
  $id: Int!
  $backgroundColor: String
  $secondaryColor: String
  $backgroundPalette: [String]
  $textVariant: FormElementTextVariant
  $layout: FormElementLayout
) {
  updateFormElement(
    input: {
      id: $id
      patch: {
        backgroundColor: $backgroundColor
        secondaryColor: $secondaryColor
        backgroundPalette: $backgroundPalette
        textVariant: $textVariant
        layout: $layout
      }
    }
  ) {
    formElement {
      id
      backgroundColor
      secondaryColor
      backgroundImage
      layout
      backgroundPalette
      textVariant
      unsplashAuthorName
      unsplashAuthorUrl
    }
  }
}

mutation SetFormElementBackground(
  $id: Int!
  $backgroundColor: String!
  $secondaryColor: String!
  $backgroundUrl: String!
  $downloadUrl: String!
  $backgroundPalette: [String]!
  $unsplashAuthorUrl: String!
  $unsplashAuthorName: String!
  $backgroundWidth: Int!
  $backgroundHeight: Int!
) {
  setFormElementBackground(
    backgroundColor: $backgroundColor
    secondaryColor: $secondaryColor
    backgroundPalette: $backgroundPalette
    backgroundUrl: $backgroundUrl
    downloadUrl: $downloadUrl
    id: $id
    unsplashAuthorName: $unsplashAuthorName
    unsplashAuthorUrl: $unsplashAuthorUrl
    backgroundHeight: $backgroundHeight
    backgroundWidth: $backgroundWidth
  ) {
    id
    backgroundColor
    secondaryColor
    backgroundImage
    backgroundPalette
    unsplashAuthorName
    unsplashAuthorUrl
    backgroundWidth
    backgroundHeight
  }
}

mutation clearFormElementStyle($id: Int!) {
  clearFormElementStyle(input: { formElementId: $id }) {
    formElement {
      id
      backgroundColor
      backgroundImage
      backgroundPalette
      unsplashAuthorName
      unsplashAuthorUrl
      textVariant
      secondaryColor
      layout
    }
  }
}

mutation createLogicRuleForSurvey(
  $formElementId: Int!
  $operator: FieldRuleOperator!
  $jumpToId: Int!
) {
  createSurveyJumpRule(
    input: {
      formElementId: $formElementId
      booleanOperator: OR
      jumpToId: $jumpToId
      operator: $operator
    }
  ) {
    formLogicRule {
      id
      position
      booleanOperator
      command
      formElementId
      jumpToId
      conditions {
        id
        operator
        ruleId
        subjectId
        value
      }
    }
  }
}

mutation UpdateFormLogicRule(
  $id: Int!
  $jumpToId: Int
  $booleanOperator: FormLogicOperator
  $formElementId: Int
) {
  updateFormLogicRule(
    input: {
      id: $id
      patch: {
        jumpToId: $jumpToId
        booleanOperator: $booleanOperator
        formElementId: $formElementId
      }
    }
  ) {
    formLogicRule {
      id
      booleanOperator
      command
      jumpToId
      position
      formElementId
    }
  }
}

mutation UpdateLogicCondition(
  $id: Int!
  $operator: FieldRuleOperator
  $value: JSON
  $subjectId: Int
) {
  updateFormLogicCondition(
    input: {
      id: $id
      patch: { operator: $operator, value: $value, subjectId: $subjectId }
    }
  ) {
    formLogicCondition {
      id
      ruleId
      operator
      subjectId
      value
    }
  }
}

mutation DeleteLogicCondition($id: Int!) {
  deleteFormLogicCondition(input: { id: $id }) {
    formLogicCondition {
      id
      ruleId
    }
  }
}

mutation DeleteLogicRule($id: Int!) {
  deleteFormLogicRule(input: { id: $id }) {
    formLogicRule {
      id
      formElementId
    }
  }
}

mutation AddCondition(
  $operator: FieldRuleOperator!
  $ruleId: Int!
  $subjectId: Int!
  $value: JSON
) {
  createFormLogicCondition(
    input: {
      formLogicCondition: {
        operator: $operator
        ruleId: $ruleId
        subjectId: $subjectId
        value: $value
      }
    }
  ) {
    formLogicCondition {
      id
      operator
      ruleId
      subjectId
      value
    }
  }
}

mutation UpdateSurveyDraftStatus($id: Int!, $isDisabled: Boolean!) {
  updateSurvey(input: { id: $id, patch: { isDisabled: $isDisabled } }) {
    survey {
      id
      isDisabled
    }
  }
}

mutation UploadConsentDoc(
  $document: Upload!
  $formElementId: Int!
  $version: Int!
) {
  uploadConsentDocument(
    document: $document
    formElementId: $formElementId
    version: $version
  ) {
    id
    componentSettings
  }
}

fragment SurveyResponse on SurveyResponse {
  id
  surveyId
  bypassedDuplicateSubmissionControl
  updatedAt
  accountEmail
  userId
  createdAt
  data
  isDuplicateEntry
  isDuplicateIp
  isPractice
  isUnrecognizedUserAgent
  archived
  lastUpdatedByEmail
}

fragment FormElementExtendedDetails on FormElement {
  ...FormElementDetails
  surveyConsentDocumentsConnection {
    nodes {
      url
      version
    }
  }
}

query SurveyResponses($surveyId: Int!) {
  survey(id: $surveyId) {
    form {
      formElements {
        ...FormElementExtendedDetails
      }
      logicRules {
        ...SurveyAppRule
      }
    }
    id
    practiceResponseCount
    archivedResponseCount
    submittedResponseCount
    surveyResponsesConnection {
      nodes {
        ...SurveyResponse
      }
    }
  }
}

query SurveyMapDetails($surveyId: Int!) {
  survey(id: $surveyId) {
    form {
      formElements {
        ...FormElementDetails
      }
      id
    }
  }
}

mutation toggleResponsesPractice($ids: [Int], $isPractice: Boolean) {
  toggleResponsesPractice(input: { ids: $ids, isPractice: $isPractice }) {
    surveyResponses {
      id
      isPractice
      archived
      lastUpdatedByEmail
      survey {
        id
        practiceResponseCount
        archivedResponseCount
        submittedResponseCount
      }
    }
  }
}

mutation archiveResponses($ids: [Int], $makeArchived: Boolean) {
  archiveResponses(input: { ids: $ids, makeArchived: $makeArchived }) {
    surveyResponses {
      id
      isPractice
      archived
      lastUpdatedByEmail
      survey {
        id
        practiceResponseCount
        archivedResponseCount
        submittedResponseCount
      }
    }
  }
}

mutation modifyAnswers($responseIds: [Int]!, $answers: JSON) {
  modifySurveyAnswers(input: { responseIds: $responseIds, answers: $answers }) {
    surveyResponses {
      id
      data
      updatedAt
      lastUpdatedByEmail
    }
  }
}

mutation copyAppearance($id: Int!, $copyFrom: Int!) {
  copyAppearance(input: { formElementId: $id, copyFromId: $copyFrom }) {
    formElement {
      id
      backgroundImage
      backgroundColor
      secondaryColor
      backgroundPalette
      unsplashAuthorName
      unsplashAuthorUrl
      backgroundHeight
      backgroundWidth
      layout
      textVariant
    }
  }
}

mutation updateFormElementBasemaps($id: Int!, $mapBasemaps: [Int]) {
  updateFormElement(input: { id: $id, patch: { mapBasemaps: $mapBasemaps } }) {
    formElement {
      id
      mapBasemaps
    }
  }
}

mutation updateFormElementMapCamera($id: Int!, $mapCameraOptions: JSON) {
  updateFormElement(
    input: { id: $id, patch: { mapCameraOptions: $mapCameraOptions } }
  ) {
    formElement {
      id
      mapCameraOptions
    }
  }
}

query AllBasemaps($slug: String!) {
  projectBySlug(slug: $slug) {
    id
    basemaps {
      ...BasemapDetails
    }
    surveyBasemaps {
      ...BasemapDetails
      relatedFormElements {
        id
      }
    }
  }
}

query GetFormElement($id: Int!) {
  formElement(id: $id) {
    ...FormElementDetails
  }
}
