{"version":3,"sources":["../src/rtree.ts","../node_modules/flatbuffers/mjs/constants.js","../node_modules/flatbuffers/mjs/utils.js","../node_modules/flatbuffers/mjs/encoding.js","../node_modules/flatbuffers/mjs/byte-buffer.js","../src/ts/flat-geobuf/column-type.ts","../src/ts/flat-geobuf/column.ts","../src/ts/flat-geobuf/crs.ts","../src/ts/flat-geobuf/geometry-type.ts","../src/ts/flat-geobuf/header.ts","../src/ts/flat-geobuf/geometry.ts","../src/ts/flat-geobuf/feature.ts","../src/ts/header-meta.ts","../node_modules/@repeaterjs/repeater/repeater.js","../src/ts/config.ts","../src/ts/generic/geometry.ts","../src/ts/generic/feature.ts","../src/constants.ts","../src/fetch-manager.ts","../src/query-plan.ts","../src/ts/geojson/geometry.ts","../src/ts/geojson/feature.ts","../src/feature-parser.ts","../src/source.ts","../src/sourceCache.ts"],"names":["n","Encoding","o","ColumnType","Column","bb","bb_pos","__init","i","getRootAsColumn","obj","readInt32","position","getSizePrefixedRootAsColumn","setPosition","SIZE_PREFIX_LENGTH","name","optionalEncoding","offset","__offset","__string","type","readUint8","Byte","title","description","width","precision","scale","nullable","readInt8","unique","primaryKey","metadata","startColumn","builder","startObject","addName","nameOffset","addFieldOffset","addType","addFieldInt8","addTitle","titleOffset","addDescription","descriptionOffset","addWidth","addFieldInt32","addPrecision","addScale","addNullable","addUnique","addPrimaryKey","addMetadata","metadataOffset","endColumn","endObject","requiredField","createColumn","Crs","getRootAsCrs","getSizePrefixedRootAsCrs","org","code","wkt","codeString","startCrs","addOrg","orgOffset","addCode","addWkt","wktOffset","addCodeString","codeStringOffset","endCrs","createCrs","GeometryType","Header","getRootAsHeader","getSizePrefixedRootAsHeader","envelope","index","readFloat64","__vector","envelopeLength","__vector_len","envelopeArray","Float64Array","bytes","buffer","byteOffset","geometryType","Unknown","hasZ","hasM","hasT","hasTm","columns","__indirect","columnsLength","featuresCount","readUint64","BigInt","indexNodeSize","readUint16","crs","startHeader","addEnvelope","envelopeOffset","createEnvelopeVector","data","startVector","length","addFloat64","endVector","startEnvelopeVector","numElems","addGeometryType","addHasZ","addHasM","addHasT","addHasTm","addColumns","columnsOffset","createColumnsVector","addOffset","startColumnsVector","addFeaturesCount","addFieldInt64","addIndexNodeSize","addFieldInt16","addCrs","crsOffset","endHeader","finishHeaderBuffer","finish","finishSizePrefixedHeaderBuffer","undefined","Geometry","getRootAsGeometry","getSizePrefixedRootAsGeometry","ends","readUint32","endsLength","endsArray","Uint32Array","xy","xyLength","xyArray","z","zLength","zArray","m","mLength","mArray","t","tLength","tArray","tm","tmLength","parts","partsLength","startGeometry","addEnds","endsOffset","createEndsVector","addInt32","startEndsVector","addXy","xyOffset","createXyVector","startXyVector","addZ","zOffset","createZVector","startZVector","addM","mOffset","createMVector","startMVector","addT","tOffset","createTVector","startTVector","addTm","tmOffset","createTmVector","addInt64","startTmVector","addParts","partsOffset","createPartsVector","startPartsVector","endGeometry","createGeometry","Feature","getRootAsFeature","getSizePrefixedRootAsFeature","geometry","properties","propertiesLength","propertiesArray","Uint8Array","startFeature","addGeometry","geometryOffset","addProperties","propertiesOffset","createPropertiesVector","addInt8","startPropertiesVector","endFeature","finishFeatureBuffer","finishSizePrefixedFeatureBuffer","createFeature","fromByteBuffer","header","j","column","Error","push","primary_key","crsMeta","code_string","Number","d","b","reject","e","s","r","RepeaterOverflowError","FixedBuffer","SlidingBuffer","DroppingBuffer","value","Repeater","_a","stop","iteration","_this","iterations","Config","global","_extraRequestThreshold","extraRequestThreshold","setExtraRequestThreshold","pairFlatCoordinates","newArray","a","TextEncoder","textDecoder","TextDecoder","parseProperties","feature","array","view","DataView","getUint16","Bool","getUint8","getInt8","UByte","Short","getInt16","UShort","Int","getInt32","UInt","getUint32","Long","getBigInt64","ULong","getBigUint64","Float","getFloat32","Double","getFloat64","DateTime","String","decode","subarray","Json","str","JSON","parse","Binary","SIZE_PREFIX_LEN","LRUCache","start","fromGeometry","headerType","GeometryCollection","geometries","part","partType","MultiPolygon","Polygon","coordinates","map","g","Point","Array","from","MultiPoint","LineString","MultiLineString","zSlices","xySlices","slice","fromFeature","id","size"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Byte offsets to fetch feature data from the fgb file, as [offset, length].\n * The length is null if the feature is the last in the file.\n */\nexport type OffsetAndLength = [number, number | null];\n\n/**\n * Size of each node item in the R-tree index in bytes.\n * Consists of 4 float64 values (maxX, maxY, minX, minY) and 1 uint64 value (offset).\n */\nexport const NODE_ITEM_BYTE_LENGTH = 8 * 4 + 8;\n\n/**\n * RTreeIndex provides spatial indexing for FlatGeobuf files.\n *\n * This implementation is inspired by flatbush but differs in that it does not\n * stream results. Instead, it fetches and reads the entire index at once. This approach\n * is simpler to implement and should have better performance for moderate\n * index sizes, but may need to be revised for very large indexes.\n *\n * The index is stored in a packed format, with each node containing:\n * - maxX, maxY, minX, minY (float64)\n * - offset (uint64)\n *\n * @example\n * ```typescript\n * const index = new RTreeIndex(data, details);\n * const results = await index.search(-180, -90, 180, 90);\n * ```\n */\nexport default class RTreeIndex {\n  /** Minimum X coordinate of the entire index */\n  minX: number;\n  /** Minimum Y coordinate of the entire index */\n  minY: number;\n  /** Maximum X coordinate of the entire index */\n  maxX: number;\n  /** Maximum Y coordinate of the entire index */\n  maxY: number;\n  /** Total size of the index in bytes */\n  byteLength: number;\n\n  private view: DataView;\n  private details: PackedRTreeDetails;\n\n  /**\n   * Creates a new RTreeIndex instance.\n   *\n   * @param data - The packed R-tree index data\n   * @param details - Details about the R-tree structure. Generated by\n   *   `calculatePackedRTreeDetails`.\n   * @throws Error if data is empty or details are invalid\n   */\n  constructor(data: ArrayBuffer, details: PackedRTreeDetails) {\n    this.details = details;\n\n    if (!data.byteLength) {\n      throw new Error(\"data is empty\");\n    }\n    this.view = new DataView(data);\n    this.byteLength = data.byteLength;\n    if (details.featureCount === undefined) {\n      throw new Error(\"numItems is undefined\");\n    } else if (isNaN(details.featureCount) || details.featureCount < 0) {\n      throw new Error(\"numItems is invalid\");\n    }\n    // Expose the bounds of the index so it can be used as a more accurate\n    // envelope for this source\n    const rootBounds = this.getNodeData(0);\n    this.minX = rootBounds.minX;\n    this.minY = rootBounds.minY;\n    this.maxX = rootBounds.maxX;\n    this.maxY = rootBounds.maxY;\n  }\n\n  /**\n   * Search for features within a bounding box.\n   *\n   * The search is performed using a top-down traversal of the R-tree.\n   * Results are returned as an array of [offset, length] tuples, where\n   * length is null for the last feature in the file.\n   *\n   * @param minX - Minimum X coordinate of the search box\n   * @param minY - Minimum Y coordinate of the search box\n   * @param maxX - Maximum X coordinate of the search box\n   * @param maxY - Maximum Y coordinate of the search box\n   * @returns Promise resolving to array of [offset, length] tuples\n   */\n  async search(minX: number, minY: number, maxX: number, maxY: number) {\n    // Search starts at the root node, position 0. The search is a top-down\n    let nodeIndex: number | undefined = 0;\n    // The queue is used to store the node offsets that need to be searched\n    const queue: number[] = [];\n    const results: OffsetAndLength[] = [];\n\n    while (nodeIndex !== undefined) {\n      // Each node contains nodeSize children (by default 16). Here we calculate\n      // the end position to stop at. This could simply be after processing\n      // nodeSize nodes, but one node at each level could be only partially\n      // filled, so we consult the levels array to check the end position.\n      const end = Math.min(\n        nodeIndex + this.details.nodeSize,\n        // upperBound calculates the last position of the current level\n        upperBound(nodeIndex, this.details.levels)\n      );\n\n      // Iterate over each child node. If it's a parent node match, add it to\n      // the queue. If it's a leaf, add it to the results.\n      for (let pos = nodeIndex; pos < end; pos++) {\n        // Get the bounds and offset of the current node.\n        const node = this.getNodeData(pos);\n\n        // Test whether the current node is outside the search bounds. If so,\n        // skip over it and continue processing the queue.\n        if (\n          maxX < node.minX ||\n          maxY < node.minY ||\n          minX > node.maxX ||\n          minY > node.maxY\n        ) {\n          continue;\n        }\n\n        if (node.isLeaf) {\n          // Need to get the end of the next leaf node, in addition to the\n          // offset (starting position) so that range-requests can be made.\n          // Since features are tightly packed, we just need the offset of the\n          // next leaf. The end could be null (end of the file) if this is the\n          // last leaf.\n          const nextLeafPosition = pos + 1;\n          let length: number | null = null;\n          if (nextLeafPosition < this.details.numNodes) {\n            const nextLeaf = this.getNodeData(nextLeafPosition);\n            length = nextLeaf.offset - node.offset;\n          }\n          results.push([node.offset, length]);\n        } else {\n          queue.push(Number(node.offset));\n        }\n      }\n      // Get the next node to process from the queue\n      nodeIndex = queue.pop();\n    }\n    return results;\n  }\n\n  /**\n   * Get the data for a node at the specified index.\n   *\n   * @param index - Index of the node\n   * @returns Object containing node bounds, offset, and whether it's a leaf node\n   * @private\n   */\n  private getNodeData(index: number) {\n    const byteIndex = index * NODE_ITEM_BYTE_LENGTH;\n    return {\n      minX: this.view.getFloat64(byteIndex, true),\n      minY: this.view.getFloat64(byteIndex + 8, true),\n      maxX: this.view.getFloat64(byteIndex + 16, true),\n      maxY: this.view.getFloat64(byteIndex + 24, true),\n      // The offset is a uint64, so we need to use getBigUint64. Theres no\n      // sense in supporting files up to 9k terabytes, so we can safely use\n      // Number() for ergonomics.\n      offset: Number(this.view.getBigUint64(byteIndex + 32, true)),\n      isLeaf: index >= this.details.levels[this.details.levels.length - 2],\n    };\n  }\n}\n\n/**\n * Calculate the details of a packed R-tree index.\n *\n * Using the feature count and indexNodeSize, this function calculates:\n * - Number of nodes\n * - Number of bytes required to store the index\n * - Tree height\n * - Node offsets for each level in the index\n *\n * @param featureCount - The number of features in the index\n * @param indexNodeSize - The number of children per node\n * @returns PackedRTreeDetails object containing index structure information\n */\nexport function calculatePackedRTreeDetails(\n  featureCount: number,\n  indexNodeSize: number\n): PackedRTreeDetails {\n  const nodeSize = Math.min(Math.max(+indexNodeSize, 2), 65535);\n  const numItems = featureCount;\n\n  // Calculate number of nodes and tree height\n  let n = numItems;\n  let numNodes = 0;\n  let treeHeight = 0;\n  const nodesPerLevel = [n];\n  do {\n    treeHeight++;\n    numNodes += n;\n    n = Math.ceil(n / nodeSize);\n    nodesPerLevel.push(n);\n  } while (n > 1);\n\n  // It appears I need to increment once more to account for the root node\n  numNodes++;\n\n  // find the index offsets for each level in top-down order\n  const levels: number[] = [];\n  let position = 0;\n  while (nodesPerLevel.length) {\n    n = nodesPerLevel.pop()!;\n    position += n;\n    levels.push(position);\n  }\n\n  return {\n    nodeSize,\n    numNodes,\n    nodesByteSize: numNodes * NODE_ITEM_BYTE_LENGTH,\n    treeHeight,\n    levels,\n    featureCount,\n  };\n}\n\n/**\n * Binary search for the first value in the array bigger than the given value.\n * Borrowed from flatbush.\n *\n * @param value - The value to search for\n * @param arr - The sorted array to search in\n * @returns Index of the first value bigger than the given value\n * @private\n */\nfunction upperBound(value: number, arr: number[]) {\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    const m = (i + j) >> 1;\n    if (arr[m] > value) {\n      j = m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return arr[i];\n}\n\n/**\n * Details about the structure of a packed R-tree index.\n */\nexport interface PackedRTreeDetails {\n  /** Number of features in the index */\n  featureCount: number;\n  /** Number of children per node */\n  nodeSize: number;\n  /** Total number of nodes in the tree */\n  numNodes: number;\n  /** Total size of the index in bytes */\n  nodesByteSize: number;\n  /** Height of the tree */\n  treeHeight: number;\n  /**\n   * Array of level bounds in the index.\n   *\n   * The first element is the byte offset of the last node in the root level,\n   * the last element is the byte offset of the last level before the leaves.\n   *\n   * Example:\n   * ```\n   * [ 40, 160, 1960, 30320, 484000 ]\n   * ```\n   *\n   * In this example:\n   * - Root level starts at 0\n   * - First level starts at 40\n   * - Leaf nodes start at 484000\n   *\n   * Unlike flatbush, the root node is included first, followed by subsequent\n   * levels in the index, and finally the leaf nodes.\n   */\n  levels: number[];\n}\n","export const SIZEOF_SHORT = 2;\nexport const SIZEOF_INT = 4;\nexport const FILE_IDENTIFIER_LENGTH = 4;\nexport const SIZE_PREFIX_LENGTH = 4;\n","export const int32 = new Int32Array(2);\nexport const float32 = new Float32Array(int32.buffer);\nexport const float64 = new Float64Array(int32.buffer);\nexport const isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n","export var Encoding;\n(function (Encoding) {\n    Encoding[Encoding[\"UTF8_BYTES\"] = 1] = \"UTF8_BYTES\";\n    Encoding[Encoding[\"UTF16_STRING\"] = 2] = \"UTF16_STRING\";\n})(Encoding || (Encoding = {}));\n","import { FILE_IDENTIFIER_LENGTH, SIZEOF_INT } from \"./constants.js\";\nimport { int32, isLittleEndian, float32, float64 } from \"./utils.js\";\nimport { Encoding } from \"./encoding.js\";\nexport class ByteBuffer {\n    /**\n     * Create a new ByteBuffer with a given array of bytes (`Uint8Array`)\n     */\n    constructor(bytes_) {\n        this.bytes_ = bytes_;\n        this.position_ = 0;\n        this.text_decoder_ = new TextDecoder();\n    }\n    /**\n     * Create and allocate a new ByteBuffer with a given size.\n     */\n    static allocate(byte_size) {\n        return new ByteBuffer(new Uint8Array(byte_size));\n    }\n    clear() {\n        this.position_ = 0;\n    }\n    /**\n     * Get the underlying `Uint8Array`.\n     */\n    bytes() {\n        return this.bytes_;\n    }\n    /**\n     * Get the buffer's position.\n     */\n    position() {\n        return this.position_;\n    }\n    /**\n     * Set the buffer's position.\n     */\n    setPosition(position) {\n        this.position_ = position;\n    }\n    /**\n     * Get the buffer's capacity.\n     */\n    capacity() {\n        return this.bytes_.length;\n    }\n    readInt8(offset) {\n        return this.readUint8(offset) << 24 >> 24;\n    }\n    readUint8(offset) {\n        return this.bytes_[offset];\n    }\n    readInt16(offset) {\n        return this.readUint16(offset) << 16 >> 16;\n    }\n    readUint16(offset) {\n        return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n    }\n    readInt32(offset) {\n        return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n    }\n    readUint32(offset) {\n        return this.readInt32(offset) >>> 0;\n    }\n    readInt64(offset) {\n        return BigInt.asIntN(64, BigInt(this.readUint32(offset)) + (BigInt(this.readUint32(offset + 4)) << BigInt(32)));\n    }\n    readUint64(offset) {\n        return BigInt.asUintN(64, BigInt(this.readUint32(offset)) + (BigInt(this.readUint32(offset + 4)) << BigInt(32)));\n    }\n    readFloat32(offset) {\n        int32[0] = this.readInt32(offset);\n        return float32[0];\n    }\n    readFloat64(offset) {\n        int32[isLittleEndian ? 0 : 1] = this.readInt32(offset);\n        int32[isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n        return float64[0];\n    }\n    writeInt8(offset, value) {\n        this.bytes_[offset] = value;\n    }\n    writeUint8(offset, value) {\n        this.bytes_[offset] = value;\n    }\n    writeInt16(offset, value) {\n        this.bytes_[offset] = value;\n        this.bytes_[offset + 1] = value >> 8;\n    }\n    writeUint16(offset, value) {\n        this.bytes_[offset] = value;\n        this.bytes_[offset + 1] = value >> 8;\n    }\n    writeInt32(offset, value) {\n        this.bytes_[offset] = value;\n        this.bytes_[offset + 1] = value >> 8;\n        this.bytes_[offset + 2] = value >> 16;\n        this.bytes_[offset + 3] = value >> 24;\n    }\n    writeUint32(offset, value) {\n        this.bytes_[offset] = value;\n        this.bytes_[offset + 1] = value >> 8;\n        this.bytes_[offset + 2] = value >> 16;\n        this.bytes_[offset + 3] = value >> 24;\n    }\n    writeInt64(offset, value) {\n        this.writeInt32(offset, Number(BigInt.asIntN(32, value)));\n        this.writeInt32(offset + 4, Number(BigInt.asIntN(32, value >> BigInt(32))));\n    }\n    writeUint64(offset, value) {\n        this.writeUint32(offset, Number(BigInt.asUintN(32, value)));\n        this.writeUint32(offset + 4, Number(BigInt.asUintN(32, value >> BigInt(32))));\n    }\n    writeFloat32(offset, value) {\n        float32[0] = value;\n        this.writeInt32(offset, int32[0]);\n    }\n    writeFloat64(offset, value) {\n        float64[0] = value;\n        this.writeInt32(offset, int32[isLittleEndian ? 0 : 1]);\n        this.writeInt32(offset + 4, int32[isLittleEndian ? 1 : 0]);\n    }\n    /**\n     * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n     * schema does not include a file_identifier (likely points at padding or the\n     * start of a the root vtable).\n     */\n    getBufferIdentifier() {\n        if (this.bytes_.length < this.position_ + SIZEOF_INT +\n            FILE_IDENTIFIER_LENGTH) {\n            throw new Error('FlatBuffers: ByteBuffer is too short to contain an identifier.');\n        }\n        let result = \"\";\n        for (let i = 0; i < FILE_IDENTIFIER_LENGTH; i++) {\n            result += String.fromCharCode(this.readInt8(this.position_ + SIZEOF_INT + i));\n        }\n        return result;\n    }\n    /**\n     * Look up a field in the vtable, return an offset into the object, or 0 if the\n     * field is not present.\n     */\n    __offset(bb_pos, vtable_offset) {\n        const vtable = bb_pos - this.readInt32(bb_pos);\n        return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n    }\n    /**\n     * Initialize any Table-derived type to point to the union at the given offset.\n     */\n    __union(t, offset) {\n        t.bb_pos = offset + this.readInt32(offset);\n        t.bb = this;\n        return t;\n    }\n    /**\n     * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n     * This allocates a new string and converts to wide chars upon each access.\n     *\n     * To avoid the conversion to string, pass Encoding.UTF8_BYTES as the\n     * \"optionalEncoding\" argument. This is useful for avoiding conversion when\n     * the data will just be packaged back up in another FlatBuffer later on.\n     *\n     * @param offset\n     * @param opt_encoding Defaults to UTF16_STRING\n     */\n    __string(offset, opt_encoding) {\n        offset += this.readInt32(offset);\n        const length = this.readInt32(offset);\n        offset += SIZEOF_INT;\n        const utf8bytes = this.bytes_.subarray(offset, offset + length);\n        if (opt_encoding === Encoding.UTF8_BYTES)\n            return utf8bytes;\n        else\n            return this.text_decoder_.decode(utf8bytes);\n    }\n    /**\n     * Handle unions that can contain string as its member, if a Table-derived type then initialize it,\n     * if a string then return a new one\n     *\n     * WARNING: strings are immutable in JS so we can't change the string that the user gave us, this\n     * makes the behaviour of __union_with_string different compared to __union\n     */\n    __union_with_string(o, offset) {\n        if (typeof o === 'string') {\n            return this.__string(offset);\n        }\n        return this.__union(o, offset);\n    }\n    /**\n     * Retrieve the relative offset stored at \"offset\"\n     */\n    __indirect(offset) {\n        return offset + this.readInt32(offset);\n    }\n    /**\n     * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n     */\n    __vector(offset) {\n        return offset + this.readInt32(offset) + SIZEOF_INT; // data starts after the length\n    }\n    /**\n     * Get the length of a vector whose offset is stored at \"offset\" in this object.\n     */\n    __vector_len(offset) {\n        return this.readInt32(offset + this.readInt32(offset));\n    }\n    __has_identifier(ident) {\n        if (ident.length != FILE_IDENTIFIER_LENGTH) {\n            throw new Error('FlatBuffers: file identifier must be length ' +\n                FILE_IDENTIFIER_LENGTH);\n        }\n        for (let i = 0; i < FILE_IDENTIFIER_LENGTH; i++) {\n            if (ident.charCodeAt(i) != this.readInt8(this.position() + SIZEOF_INT + i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * A helper function for generating list for obj api\n     */\n    createScalarList(listAccessor, listLength) {\n        const ret = [];\n        for (let i = 0; i < listLength; ++i) {\n            const val = listAccessor(i);\n            if (val !== null) {\n                ret.push(val);\n            }\n        }\n        return ret;\n    }\n    /**\n     * A helper function for generating list for obj api\n     * @param listAccessor function that accepts an index and return data at that index\n     * @param listLength listLength\n     * @param res result list\n     */\n    createObjList(listAccessor, listLength) {\n        const ret = [];\n        for (let i = 0; i < listLength; ++i) {\n            const val = listAccessor(i);\n            if (val !== null) {\n                ret.push(val.unpack());\n            }\n        }\n        return ret;\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */\n\nexport enum ColumnType {\n  Byte = 0,\n  UByte = 1,\n  Bool = 2,\n  Short = 3,\n  UShort = 4,\n  Int = 5,\n  UInt = 6,\n  Long = 7,\n  ULong = 8,\n  Float = 9,\n  Double = 10,\n  String = 11,\n  Json = 12,\n  DateTime = 13,\n  Binary = 14\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { ColumnType } from '../flat-geobuf/column-type.js';\n\n\nexport class Column {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n  __init(i:number, bb:flatbuffers.ByteBuffer):Column {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsColumn(bb:flatbuffers.ByteBuffer, obj?:Column):Column {\n  return (obj || new Column()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsColumn(bb:flatbuffers.ByteBuffer, obj?:Column):Column {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Column()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nname():string|null\nname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nname(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\ntype():ColumnType {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ColumnType.Byte;\n}\n\ntitle():string|null\ntitle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\ntitle(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\ndescription():string|null\ndescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\ndescription(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nwidth():number {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : -1;\n}\n\nprecision():number {\n  const offset = this.bb!.__offset(this.bb_pos, 14);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : -1;\n}\n\nscale():number {\n  const offset = this.bb!.__offset(this.bb_pos, 16);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : -1;\n}\n\nnullable():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 18);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;\n}\n\nunique():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 20);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\nprimaryKey():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 22);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\nmetadata():string|null\nmetadata(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nmetadata(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 24);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nstatic startColumn(builder:flatbuffers.Builder) {\n  builder.startObject(11);\n}\n\nstatic addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(0, nameOffset, 0);\n}\n\nstatic addType(builder:flatbuffers.Builder, type:ColumnType) {\n  builder.addFieldInt8(1, type, ColumnType.Byte);\n}\n\nstatic addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, titleOffset, 0);\n}\n\nstatic addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, descriptionOffset, 0);\n}\n\nstatic addWidth(builder:flatbuffers.Builder, width:number) {\n  builder.addFieldInt32(4, width, -1);\n}\n\nstatic addPrecision(builder:flatbuffers.Builder, precision:number) {\n  builder.addFieldInt32(5, precision, -1);\n}\n\nstatic addScale(builder:flatbuffers.Builder, scale:number) {\n  builder.addFieldInt32(6, scale, -1);\n}\n\nstatic addNullable(builder:flatbuffers.Builder, nullable:boolean) {\n  builder.addFieldInt8(7, +nullable, +true);\n}\n\nstatic addUnique(builder:flatbuffers.Builder, unique:boolean) {\n  builder.addFieldInt8(8, +unique, +false);\n}\n\nstatic addPrimaryKey(builder:flatbuffers.Builder, primaryKey:boolean) {\n  builder.addFieldInt8(9, +primaryKey, +false);\n}\n\nstatic addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(10, metadataOffset, 0);\n}\n\nstatic endColumn(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  builder.requiredField(offset, 4) // name\n  return offset;\n}\n\nstatic createColumn(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, type:ColumnType, titleOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, width:number, precision:number, scale:number, nullable:boolean, unique:boolean, primaryKey:boolean, metadataOffset:flatbuffers.Offset):flatbuffers.Offset {\n  Column.startColumn(builder);\n  Column.addName(builder, nameOffset);\n  Column.addType(builder, type);\n  Column.addTitle(builder, titleOffset);\n  Column.addDescription(builder, descriptionOffset);\n  Column.addWidth(builder, width);\n  Column.addPrecision(builder, precision);\n  Column.addScale(builder, scale);\n  Column.addNullable(builder, nullable);\n  Column.addUnique(builder, unique);\n  Column.addPrimaryKey(builder, primaryKey);\n  Column.addMetadata(builder, metadataOffset);\n  return Column.endColumn(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */\n\nimport * as flatbuffers from 'flatbuffers';\n\nexport class Crs {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n  __init(i:number, bb:flatbuffers.ByteBuffer):Crs {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsCrs(bb:flatbuffers.ByteBuffer, obj?:Crs):Crs {\n  return (obj || new Crs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsCrs(bb:flatbuffers.ByteBuffer, obj?:Crs):Crs {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Crs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\norg():string|null\norg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\norg(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\ncode():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n}\n\nname():string|null\nname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nname(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\ndescription():string|null\ndescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\ndescription(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nwkt():string|null\nwkt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nwkt(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\ncodeString():string|null\ncodeString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\ncodeString(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 14);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nstatic startCrs(builder:flatbuffers.Builder) {\n  builder.startObject(6);\n}\n\nstatic addOrg(builder:flatbuffers.Builder, orgOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(0, orgOffset, 0);\n}\n\nstatic addCode(builder:flatbuffers.Builder, code:number) {\n  builder.addFieldInt32(1, code, 0);\n}\n\nstatic addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, nameOffset, 0);\n}\n\nstatic addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, descriptionOffset, 0);\n}\n\nstatic addWkt(builder:flatbuffers.Builder, wktOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(4, wktOffset, 0);\n}\n\nstatic addCodeString(builder:flatbuffers.Builder, codeStringOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(5, codeStringOffset, 0);\n}\n\nstatic endCrs(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createCrs(builder:flatbuffers.Builder, orgOffset:flatbuffers.Offset, code:number, nameOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, wktOffset:flatbuffers.Offset, codeStringOffset:flatbuffers.Offset):flatbuffers.Offset {\n  Crs.startCrs(builder);\n  Crs.addOrg(builder, orgOffset);\n  Crs.addCode(builder, code);\n  Crs.addName(builder, nameOffset);\n  Crs.addDescription(builder, descriptionOffset);\n  Crs.addWkt(builder, wktOffset);\n  Crs.addCodeString(builder, codeStringOffset);\n  return Crs.endCrs(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */\n\nexport enum GeometryType {\n  Unknown = 0,\n  Point = 1,\n  LineString = 2,\n  Polygon = 3,\n  MultiPoint = 4,\n  MultiLineString = 5,\n  MultiPolygon = 6,\n  GeometryCollection = 7,\n  CircularString = 8,\n  CompoundCurve = 9,\n  CurvePolygon = 10,\n  MultiCurve = 11,\n  MultiSurface = 12,\n  Curve = 13,\n  Surface = 14,\n  PolyhedralSurface = 15,\n  TIN = 16,\n  Triangle = 17\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Column } from '../flat-geobuf/column.js';\nimport { Crs } from '../flat-geobuf/crs.js';\nimport { GeometryType } from '../flat-geobuf/geometry-type.js';\n\n\nexport class Header {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n  __init(i:number, bb:flatbuffers.ByteBuffer):Header {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsHeader(bb:flatbuffers.ByteBuffer, obj?:Header):Header {\n  return (obj || new Header()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsHeader(bb:flatbuffers.ByteBuffer, obj?:Header):Header {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Header()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nname():string|null\nname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nname(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nenvelope(index: number):number|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;\n}\n\nenvelopeLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nenvelopeArray():Float64Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n}\n\ngeometryType():GeometryType {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.readUint8(this.bb_pos + offset) : GeometryType.Unknown;\n}\n\nhasZ():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\nhasM():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\nhasT():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 14);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\nhasTm():boolean {\n  const offset = this.bb!.__offset(this.bb_pos, 16);\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n}\n\ncolumns(index: number, obj?:Column):Column|null {\n  const offset = this.bb!.__offset(this.bb_pos, 18);\n  return offset ? (obj || new Column()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\ncolumnsLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 18);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nfeaturesCount():bigint {\n  const offset = this.bb!.__offset(this.bb_pos, 20);\n  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');\n}\n\nindexNodeSize():number {\n  const offset = this.bb!.__offset(this.bb_pos, 22);\n  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 16;\n}\n\ncrs(obj?:Crs):Crs|null {\n  const offset = this.bb!.__offset(this.bb_pos, 24);\n  return offset ? (obj || new Crs()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\ntitle():string|null\ntitle(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\ntitle(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 26);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\ndescription():string|null\ndescription(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\ndescription(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 28);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nmetadata():string|null\nmetadata(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\nmetadata(optionalEncoding?:any):string|Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 30);\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n}\n\nstatic startHeader(builder:flatbuffers.Builder) {\n  builder.startObject(14);\n}\n\nstatic addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(0, nameOffset, 0);\n}\n\nstatic addEnvelope(builder:flatbuffers.Builder, envelopeOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, envelopeOffset, 0);\n}\n\nstatic createEnvelopeVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;\n/**\n * @deprecated This Uint8Array overload will be removed in the future.\n */\nstatic createEnvelopeVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;\nstatic createEnvelopeVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {\n  builder.startVector(8, data.length, 8);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addFloat64(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startEnvelopeVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(8, numElems, 8);\n}\n\nstatic addGeometryType(builder:flatbuffers.Builder, geometryType:GeometryType) {\n  builder.addFieldInt8(2, geometryType, GeometryType.Unknown);\n}\n\nstatic addHasZ(builder:flatbuffers.Builder, hasZ:boolean) {\n  builder.addFieldInt8(3, +hasZ, +false);\n}\n\nstatic addHasM(builder:flatbuffers.Builder, hasM:boolean) {\n  builder.addFieldInt8(4, +hasM, +false);\n}\n\nstatic addHasT(builder:flatbuffers.Builder, hasT:boolean) {\n  builder.addFieldInt8(5, +hasT, +false);\n}\n\nstatic addHasTm(builder:flatbuffers.Builder, hasTm:boolean) {\n  builder.addFieldInt8(6, +hasTm, +false);\n}\n\nstatic addColumns(builder:flatbuffers.Builder, columnsOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(7, columnsOffset, 0);\n}\n\nstatic createColumnsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startColumnsVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic addFeaturesCount(builder:flatbuffers.Builder, featuresCount:bigint) {\n  builder.addFieldInt64(8, featuresCount, BigInt('0'));\n}\n\nstatic addIndexNodeSize(builder:flatbuffers.Builder, indexNodeSize:number) {\n  builder.addFieldInt16(9, indexNodeSize, 16);\n}\n\nstatic addCrs(builder:flatbuffers.Builder, crsOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(10, crsOffset, 0);\n}\n\nstatic addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(11, titleOffset, 0);\n}\n\nstatic addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(12, descriptionOffset, 0);\n}\n\nstatic addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(13, metadataOffset, 0);\n}\n\nstatic endHeader(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic finishHeaderBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset);\n}\n\nstatic finishSizePrefixedHeaderBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset, undefined, true);\n}\n\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { GeometryType } from '../flat-geobuf/geometry-type.js';\n\n\nexport class Geometry {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n  __init(i:number, bb:flatbuffers.ByteBuffer):Geometry {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsGeometry(bb:flatbuffers.ByteBuffer, obj?:Geometry):Geometry {\n  return (obj || new Geometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsGeometry(bb:flatbuffers.ByteBuffer, obj?:Geometry):Geometry {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Geometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nends(index: number):number|null {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n}\n\nendsLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nendsArray():Uint32Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n}\n\nxy(index: number):number|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;\n}\n\nxyLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nxyArray():Float64Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n}\n\nz(index: number):number|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;\n}\n\nzLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nzArray():Float64Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n}\n\nm(index: number):number|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;\n}\n\nmLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nmArray():Float64Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 10);\n  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n}\n\nt(index: number):number|null {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;\n}\n\ntLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\ntArray():Float64Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 12);\n  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n}\n\ntm(index: number):bigint|null {\n  const offset = this.bb!.__offset(this.bb_pos, 14);\n  return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);\n}\n\ntmLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 14);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\ntype():GeometryType {\n  const offset = this.bb!.__offset(this.bb_pos, 16);\n  return offset ? this.bb!.readUint8(this.bb_pos + offset) : GeometryType.Unknown;\n}\n\nparts(index: number, obj?:Geometry):Geometry|null {\n  const offset = this.bb!.__offset(this.bb_pos, 18);\n  return offset ? (obj || new Geometry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\npartsLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 18);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nstatic startGeometry(builder:flatbuffers.Builder) {\n  builder.startObject(8);\n}\n\nstatic addEnds(builder:flatbuffers.Builder, endsOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(0, endsOffset, 0);\n}\n\nstatic createEndsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;\n/**\n * @deprecated This Uint8Array overload will be removed in the future.\n */\nstatic createEndsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;\nstatic createEndsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addInt32(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startEndsVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic addXy(builder:flatbuffers.Builder, xyOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, xyOffset, 0);\n}\n\nstatic createXyVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;\n/**\n * @deprecated This Uint8Array overload will be removed in the future.\n */\nstatic createXyVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;\nstatic createXyVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {\n  builder.startVector(8, data.length, 8);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addFloat64(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startXyVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(8, numElems, 8);\n}\n\nstatic addZ(builder:flatbuffers.Builder, zOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, zOffset, 0);\n}\n\nstatic createZVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;\n/**\n * @deprecated This Uint8Array overload will be removed in the future.\n */\nstatic createZVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;\nstatic createZVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {\n  builder.startVector(8, data.length, 8);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addFloat64(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startZVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(8, numElems, 8);\n}\n\nstatic addM(builder:flatbuffers.Builder, mOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(3, mOffset, 0);\n}\n\nstatic createMVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;\n/**\n * @deprecated This Uint8Array overload will be removed in the future.\n */\nstatic createMVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;\nstatic createMVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {\n  builder.startVector(8, data.length, 8);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addFloat64(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startMVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(8, numElems, 8);\n}\n\nstatic addT(builder:flatbuffers.Builder, tOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(4, tOffset, 0);\n}\n\nstatic createTVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;\n/**\n * @deprecated This Uint8Array overload will be removed in the future.\n */\nstatic createTVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;\nstatic createTVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {\n  builder.startVector(8, data.length, 8);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addFloat64(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startTVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(8, numElems, 8);\n}\n\nstatic addTm(builder:flatbuffers.Builder, tmOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(5, tmOffset, 0);\n}\n\nstatic createTmVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {\n  builder.startVector(8, data.length, 8);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addInt64(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startTmVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(8, numElems, 8);\n}\n\nstatic addType(builder:flatbuffers.Builder, type:GeometryType) {\n  builder.addFieldInt8(6, type, GeometryType.Unknown);\n}\n\nstatic addParts(builder:flatbuffers.Builder, partsOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(7, partsOffset, 0);\n}\n\nstatic createPartsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startPartsVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic endGeometry(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createGeometry(builder:flatbuffers.Builder, endsOffset:flatbuffers.Offset, xyOffset:flatbuffers.Offset, zOffset:flatbuffers.Offset, mOffset:flatbuffers.Offset, tOffset:flatbuffers.Offset, tmOffset:flatbuffers.Offset, type:GeometryType, partsOffset:flatbuffers.Offset):flatbuffers.Offset {\n  Geometry.startGeometry(builder);\n  Geometry.addEnds(builder, endsOffset);\n  Geometry.addXy(builder, xyOffset);\n  Geometry.addZ(builder, zOffset);\n  Geometry.addM(builder, mOffset);\n  Geometry.addT(builder, tOffset);\n  Geometry.addTm(builder, tmOffset);\n  Geometry.addType(builder, type);\n  Geometry.addParts(builder, partsOffset);\n  return Geometry.endGeometry(builder);\n}\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\n/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Column } from '../flat-geobuf/column.js';\nimport { Geometry } from '../flat-geobuf/geometry.js';\n\n\nexport class Feature {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n  __init(i:number, bb:flatbuffers.ByteBuffer):Feature {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsFeature(bb:flatbuffers.ByteBuffer, obj?:Feature):Feature {\n  return (obj || new Feature()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsFeature(bb:flatbuffers.ByteBuffer, obj?:Feature):Feature {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new Feature()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\ngeometry(obj?:Geometry):Geometry|null {\n  const offset = this.bb!.__offset(this.bb_pos, 4);\n  return offset ? (obj || new Geometry()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n}\n\nproperties(index: number):number|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n}\n\npropertiesLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\npropertiesArray():Uint8Array|null {\n  const offset = this.bb!.__offset(this.bb_pos, 6);\n  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n}\n\ncolumns(index: number, obj?:Column):Column|null {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? (obj || new Column()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n}\n\ncolumnsLength():number {\n  const offset = this.bb!.__offset(this.bb_pos, 8);\n  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n}\n\nstatic startFeature(builder:flatbuffers.Builder) {\n  builder.startObject(3);\n}\n\nstatic addGeometry(builder:flatbuffers.Builder, geometryOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(0, geometryOffset, 0);\n}\n\nstatic addProperties(builder:flatbuffers.Builder, propertiesOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(1, propertiesOffset, 0);\n}\n\nstatic createPropertiesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {\n  builder.startVector(1, data.length, 1);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addInt8(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startPropertiesVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(1, numElems, 1);\n}\n\nstatic addColumns(builder:flatbuffers.Builder, columnsOffset:flatbuffers.Offset) {\n  builder.addFieldOffset(2, columnsOffset, 0);\n}\n\nstatic createColumnsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {\n  builder.startVector(4, data.length, 4);\n  for (let i = data.length - 1; i >= 0; i--) {\n    builder.addOffset(data[i]!);\n  }\n  return builder.endVector();\n}\n\nstatic startColumnsVector(builder:flatbuffers.Builder, numElems:number) {\n  builder.startVector(4, numElems, 4);\n}\n\nstatic endFeature(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic finishFeatureBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset);\n}\n\nstatic finishSizePrefixedFeatureBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {\n  builder.finish(offset, undefined, true);\n}\n\nstatic createFeature(builder:flatbuffers.Builder, geometryOffset:flatbuffers.Offset, propertiesOffset:flatbuffers.Offset, columnsOffset:flatbuffers.Offset):flatbuffers.Offset {\n  Feature.startFeature(builder);\n  Feature.addGeometry(builder, geometryOffset);\n  Feature.addProperties(builder, propertiesOffset);\n  Feature.addColumns(builder, columnsOffset);\n  return Feature.endFeature(builder);\n}\n}\n","import type * as flatbuffers from 'flatbuffers';\n\nimport type { ColumnMeta } from './column-meta.js';\nimport type { CrsMeta } from './crs-meta.js';\nimport type { GeometryType } from './flat-geobuf/geometry-type.js';\nimport { Header } from './flat-geobuf/header.js';\n\nexport interface HeaderMeta {\n    geometryType: GeometryType;\n    columns: ColumnMeta[] | null;\n    envelope: Float64Array | null;\n    featuresCount: number;\n    indexNodeSize: number;\n    crs: CrsMeta | null;\n    title: string | null;\n    description: string | null;\n    metadata: string | null;\n}\n\nexport function fromByteBuffer(bb: flatbuffers.ByteBuffer): HeaderMeta {\n    const header = Header.getRootAsHeader(bb);\n    const featuresCount = header.featuresCount();\n    const indexNodeSize = header.indexNodeSize();\n\n    const columns: ColumnMeta[] = [];\n    for (let j = 0; j < header.columnsLength(); j++) {\n        const column = header.columns(j);\n        if (!column) throw new Error('Column unexpectedly missing');\n        if (!column.name()) throw new Error('Column name unexpectedly missing');\n        columns.push({\n            name: column.name() as string,\n            type: column.type(),\n            title: column.title(),\n            description: column.description(),\n            width: column.width(),\n            precision: column.precision(),\n            scale: column.scale(),\n            nullable: column.nullable(),\n            unique: column.unique(),\n            primary_key: column.primaryKey(),\n        });\n    }\n    const crs = header.crs();\n    const crsMeta: CrsMeta | null = crs\n        ? {\n              org: crs.org(),\n              code: crs.code(),\n              name: crs.name(),\n              description: crs.description(),\n              wkt: crs.wkt(),\n              code_string: crs.codeString(),\n          }\n        : null;\n    const headerMeta: HeaderMeta = {\n        geometryType: header.geometryType(),\n        columns: columns,\n        envelope: null,\n        featuresCount: Number(featuresCount),\n        indexNodeSize: indexNodeSize,\n        crs: crsMeta,\n        title: header.title(),\n        description: header.description(),\n        metadata: header.metadata(),\n    };\n    return headerMeta;\n}\n","/// <reference types=\"./repeater.d.ts\" />\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\n\n/** An error subclass which is thrown when there are too many pending push or next operations on a single repeater. */\r\nvar RepeaterOverflowError = /** @class */ (function (_super) {\r\n    __extends(RepeaterOverflowError, _super);\r\n    function RepeaterOverflowError(message) {\r\n        var _this = _super.call(this, message) || this;\r\n        Object.defineProperty(_this, \"name\", {\r\n            value: \"RepeaterOverflowError\",\r\n            enumerable: false,\r\n        });\r\n        if (typeof Object.setPrototypeOf === \"function\") {\r\n            Object.setPrototypeOf(_this, _this.constructor.prototype);\r\n        }\r\n        else {\r\n            _this.__proto__ = _this.constructor.prototype;\r\n        }\r\n        if (typeof Error.captureStackTrace === \"function\") {\r\n            Error.captureStackTrace(_this, _this.constructor);\r\n        }\r\n        return _this;\r\n    }\r\n    return RepeaterOverflowError;\r\n}(Error));\r\n/** A buffer which allows you to push a set amount of values to the repeater without pushes waiting or throwing errors. */\r\nvar FixedBuffer = /** @class */ (function () {\r\n    function FixedBuffer(capacity) {\r\n        if (capacity < 0) {\r\n            throw new RangeError(\"Capacity may not be less than 0\");\r\n        }\r\n        this._c = capacity;\r\n        this._q = [];\r\n    }\r\n    Object.defineProperty(FixedBuffer.prototype, \"empty\", {\r\n        get: function () {\r\n            return this._q.length === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FixedBuffer.prototype, \"full\", {\r\n        get: function () {\r\n            return this._q.length >= this._c;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    FixedBuffer.prototype.add = function (value) {\r\n        if (this.full) {\r\n            throw new Error(\"Buffer full\");\r\n        }\r\n        else {\r\n            this._q.push(value);\r\n        }\r\n    };\r\n    FixedBuffer.prototype.remove = function () {\r\n        if (this.empty) {\r\n            throw new Error(\"Buffer empty\");\r\n        }\r\n        return this._q.shift();\r\n    };\r\n    return FixedBuffer;\r\n}());\r\n// TODO: Use a circular buffer here.\r\n/** Sliding buffers allow you to push a set amount of values to the repeater without pushes waiting or throwing errors. If the number of values exceeds the capacity set in the constructor, the buffer will discard the earliest values added. */\r\nvar SlidingBuffer = /** @class */ (function () {\r\n    function SlidingBuffer(capacity) {\r\n        if (capacity < 1) {\r\n            throw new RangeError(\"Capacity may not be less than 1\");\r\n        }\r\n        this._c = capacity;\r\n        this._q = [];\r\n    }\r\n    Object.defineProperty(SlidingBuffer.prototype, \"empty\", {\r\n        get: function () {\r\n            return this._q.length === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SlidingBuffer.prototype, \"full\", {\r\n        get: function () {\r\n            return false;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    SlidingBuffer.prototype.add = function (value) {\r\n        while (this._q.length >= this._c) {\r\n            this._q.shift();\r\n        }\r\n        this._q.push(value);\r\n    };\r\n    SlidingBuffer.prototype.remove = function () {\r\n        if (this.empty) {\r\n            throw new Error(\"Buffer empty\");\r\n        }\r\n        return this._q.shift();\r\n    };\r\n    return SlidingBuffer;\r\n}());\r\n/** Dropping buffers allow you to push a set amount of values to the repeater without the push function waiting or throwing errors. If the number of values exceeds the capacity set in the constructor, the buffer will discard the latest values added. */\r\nvar DroppingBuffer = /** @class */ (function () {\r\n    function DroppingBuffer(capacity) {\r\n        if (capacity < 1) {\r\n            throw new RangeError(\"Capacity may not be less than 1\");\r\n        }\r\n        this._c = capacity;\r\n        this._q = [];\r\n    }\r\n    Object.defineProperty(DroppingBuffer.prototype, \"empty\", {\r\n        get: function () {\r\n            return this._q.length === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DroppingBuffer.prototype, \"full\", {\r\n        get: function () {\r\n            return false;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DroppingBuffer.prototype.add = function (value) {\r\n        if (this._q.length < this._c) {\r\n            this._q.push(value);\r\n        }\r\n    };\r\n    DroppingBuffer.prototype.remove = function () {\r\n        if (this.empty) {\r\n            throw new Error(\"Buffer empty\");\r\n        }\r\n        return this._q.shift();\r\n    };\r\n    return DroppingBuffer;\r\n}());\r\n/** Makes sure promise-likes don’t cause unhandled rejections. */\r\nfunction swallow(value) {\r\n    if (value != null && typeof value.then === \"function\") {\r\n        value.then(NOOP, NOOP);\r\n    }\r\n}\r\n/*** REPEATER STATES ***/\r\n/** The following is an enumeration of all possible repeater states. These states are ordered, and a repeater may only advance to higher states. */\r\n/** The initial state of the repeater. */\r\nvar Initial = 0;\r\n/** Repeaters advance to this state the first time the next method is called on the repeater. */\r\nvar Started = 1;\r\n/** Repeaters advance to this state when the stop function is called. */\r\nvar Stopped = 2;\r\n/** Repeaters advance to this state when there are no values left to be pulled from the repeater. */\r\nvar Done = 3;\r\n/** Repeaters advance to this state if an error is thrown into the repeater. */\r\nvar Rejected = 4;\r\n/** The maximum number of push or next operations which may exist on a single repeater. */\r\nvar MAX_QUEUE_LENGTH = 1024;\r\nvar NOOP = function () { };\r\n/** A helper function used to mimic the behavior of async generators where the final iteration is consumed. */\r\nfunction consumeExecution(r) {\r\n    var err = r.err;\r\n    var execution = Promise.resolve(r.execution).then(function (value) {\r\n        if (err != null) {\r\n            throw err;\r\n        }\r\n        return value;\r\n    });\r\n    r.err = undefined;\r\n    r.execution = execution.then(function () { return undefined; }, function () { return undefined; });\r\n    return r.pending === undefined ? execution : r.pending.then(function () { return execution; });\r\n}\r\n/** A helper function for building iterations from values. Promises are unwrapped, so that iterations never have their value property set to a promise. */\r\nfunction createIteration(r, value) {\r\n    var done = r.state >= Done;\r\n    return Promise.resolve(value).then(function (value) {\r\n        if (!done && r.state >= Rejected) {\r\n            return consumeExecution(r).then(function (value) { return ({\r\n                value: value,\r\n                done: true,\r\n            }); });\r\n        }\r\n        return { value: value, done: done };\r\n    });\r\n}\r\n/**\r\n * This function is bound and passed to the executor as the stop argument.\r\n *\r\n * Advances state to Stopped.\r\n */\r\nfunction stop(r, err) {\r\n    var e_1, _a;\r\n    if (r.state >= Stopped) {\r\n        return;\r\n    }\r\n    r.state = Stopped;\r\n    r.onnext();\r\n    r.onstop();\r\n    if (r.err == null) {\r\n        r.err = err;\r\n    }\r\n    if (r.pushes.length === 0 &&\r\n        (typeof r.buffer === \"undefined\" || r.buffer.empty)) {\r\n        finish(r);\r\n    }\r\n    else {\r\n        try {\r\n            for (var _b = __values(r.pushes), _d = _b.next(); !_d.done; _d = _b.next()) {\r\n                var push_1 = _d.value;\r\n                push_1.resolve();\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    }\r\n}\r\n/**\r\n * The difference between stopping a repeater vs finishing a repeater is that stopping a repeater allows next to continue to drain values from the push queue and buffer, while finishing a repeater will clear all pending values and end iteration immediately. Once, a repeater is finished, all iterations will have the done property set to true.\r\n *\r\n * Advances state to Done.\r\n */\r\nfunction finish(r) {\r\n    var e_2, _a;\r\n    if (r.state >= Done) {\r\n        return;\r\n    }\r\n    if (r.state < Stopped) {\r\n        stop(r);\r\n    }\r\n    r.state = Done;\r\n    r.buffer = undefined;\r\n    try {\r\n        for (var _b = __values(r.nexts), _d = _b.next(); !_d.done; _d = _b.next()) {\r\n            var next = _d.value;\r\n            var execution = r.pending === undefined\r\n                ? consumeExecution(r)\r\n                : r.pending.then(function () { return consumeExecution(r); });\r\n            next.resolve(createIteration(r, execution));\r\n        }\r\n    }\r\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n    finally {\r\n        try {\r\n            if (_d && !_d.done && (_a = _b.return)) _a.call(_b);\r\n        }\r\n        finally { if (e_2) throw e_2.error; }\r\n    }\r\n    r.pushes = [];\r\n    r.nexts = [];\r\n}\r\n/**\r\n * Called when a promise passed to push rejects, or when a push call is unhandled.\r\n *\r\n * Advances state to Rejected.\r\n */\r\nfunction reject(r) {\r\n    if (r.state >= Rejected) {\r\n        return;\r\n    }\r\n    if (r.state < Done) {\r\n        finish(r);\r\n    }\r\n    r.state = Rejected;\r\n}\r\n/** This function is bound and passed to the executor as the push argument. */\r\nfunction push(r, value) {\r\n    swallow(value);\r\n    if (r.pushes.length >= MAX_QUEUE_LENGTH) {\r\n        throw new RepeaterOverflowError(\"No more than \" + MAX_QUEUE_LENGTH + \" pending calls to push are allowed on a single repeater.\");\r\n    }\r\n    else if (r.state >= Stopped) {\r\n        return Promise.resolve(undefined);\r\n    }\r\n    var valueP = r.pending === undefined\r\n        ? Promise.resolve(value)\r\n        : r.pending.then(function () { return value; });\r\n    valueP = valueP.catch(function (err) {\r\n        if (r.state < Stopped) {\r\n            r.err = err;\r\n        }\r\n        reject(r);\r\n        return undefined; // void :(\r\n    });\r\n    var nextP;\r\n    if (r.nexts.length) {\r\n        var next_1 = r.nexts.shift();\r\n        next_1.resolve(createIteration(r, valueP));\r\n        if (r.nexts.length) {\r\n            nextP = Promise.resolve(r.nexts[0].value);\r\n        }\r\n        else if (typeof r.buffer !== \"undefined\" && !r.buffer.full) {\r\n            nextP = Promise.resolve(undefined);\r\n        }\r\n        else {\r\n            nextP = new Promise(function (resolve) { return (r.onnext = resolve); });\r\n        }\r\n    }\r\n    else if (typeof r.buffer !== \"undefined\" && !r.buffer.full) {\r\n        r.buffer.add(valueP);\r\n        nextP = Promise.resolve(undefined);\r\n    }\r\n    else {\r\n        nextP = new Promise(function (resolve) { return r.pushes.push({ resolve: resolve, value: valueP }); });\r\n    }\r\n    // If an error is thrown into the repeater via the next or throw methods, we give the repeater a chance to handle this by rejecting the promise returned from push. If the push call is not immediately handled we throw the next iteration of the repeater.\r\n    // To check that the promise returned from push is floating, we modify the then and catch methods of the returned promise so that they flip the floating flag. The push function actually does not return a promise, because modern engines do not call the then and catch methods on native promises. By making next a plain old javascript object, we ensure that the then and catch methods will be called.\r\n    var floating = true;\r\n    var next = {};\r\n    var unhandled = nextP.catch(function (err) {\r\n        if (floating) {\r\n            throw err;\r\n        }\r\n        return undefined; // void :(\r\n    });\r\n    next.then = function (onfulfilled, onrejected) {\r\n        floating = false;\r\n        return Promise.prototype.then.call(nextP, onfulfilled, onrejected);\r\n    };\r\n    next.catch = function (onrejected) {\r\n        floating = false;\r\n        return Promise.prototype.catch.call(nextP, onrejected);\r\n    };\r\n    next.finally = nextP.finally.bind(nextP);\r\n    r.pending = valueP\r\n        .then(function () { return unhandled; })\r\n        .catch(function (err) {\r\n        r.err = err;\r\n        reject(r);\r\n    });\r\n    return next;\r\n}\r\n/**\r\n * Creates the stop callable promise which is passed to the executor\r\n */\r\nfunction createStop(r) {\r\n    var stop1 = stop.bind(null, r);\r\n    var stopP = new Promise(function (resolve) { return (r.onstop = resolve); });\r\n    stop1.then = stopP.then.bind(stopP);\r\n    stop1.catch = stopP.catch.bind(stopP);\r\n    stop1.finally = stopP.finally.bind(stopP);\r\n    return stop1;\r\n}\r\n/**\r\n * Calls the executor passed into the constructor. This function is called the first time the next method is called on the repeater.\r\n *\r\n * Advances state to Started.\r\n */\r\nfunction execute(r) {\r\n    if (r.state >= Started) {\r\n        return;\r\n    }\r\n    r.state = Started;\r\n    var push1 = push.bind(null, r);\r\n    var stop1 = createStop(r);\r\n    r.execution = new Promise(function (resolve) { return resolve(r.executor(push1, stop1)); });\r\n    // TODO: We should consider stopping all repeaters when the executor settles.\r\n    r.execution.catch(function () { return stop(r); });\r\n}\r\nvar records = new WeakMap();\r\n// NOTE: While repeaters implement and are assignable to the AsyncGenerator interface, and you can use the types interchangeably, we don’t use typescript’s implements syntax here because this would make supporting earlier versions of typescript trickier. This is because TypeScript version 3.6 changed the iterator types by adding the TReturn and TNext type parameters.\r\nvar Repeater = /** @class */ (function () {\r\n    function Repeater(executor, buffer) {\r\n        records.set(this, {\r\n            executor: executor,\r\n            buffer: buffer,\r\n            err: undefined,\r\n            state: Initial,\r\n            pushes: [],\r\n            nexts: [],\r\n            pending: undefined,\r\n            execution: undefined,\r\n            onnext: NOOP,\r\n            onstop: NOOP,\r\n        });\r\n    }\r\n    Repeater.prototype.next = function (value) {\r\n        swallow(value);\r\n        var r = records.get(this);\r\n        if (r === undefined) {\r\n            throw new Error(\"WeakMap error\");\r\n        }\r\n        if (r.nexts.length >= MAX_QUEUE_LENGTH) {\r\n            throw new RepeaterOverflowError(\"No more than \" + MAX_QUEUE_LENGTH + \" pending calls to next are allowed on a single repeater.\");\r\n        }\r\n        if (r.state <= Initial) {\r\n            execute(r);\r\n        }\r\n        r.onnext(value);\r\n        if (typeof r.buffer !== \"undefined\" && !r.buffer.empty) {\r\n            var result = createIteration(r, r.buffer.remove());\r\n            if (r.pushes.length) {\r\n                var push_2 = r.pushes.shift();\r\n                r.buffer.add(push_2.value);\r\n                r.onnext = push_2.resolve;\r\n            }\r\n            return result;\r\n        }\r\n        else if (r.pushes.length) {\r\n            var push_3 = r.pushes.shift();\r\n            r.onnext = push_3.resolve;\r\n            return createIteration(r, push_3.value);\r\n        }\r\n        else if (r.state >= Stopped) {\r\n            finish(r);\r\n            return createIteration(r, consumeExecution(r));\r\n        }\r\n        return new Promise(function (resolve) { return r.nexts.push({ resolve: resolve, value: value }); });\r\n    };\r\n    Repeater.prototype.return = function (value) {\r\n        swallow(value);\r\n        var r = records.get(this);\r\n        if (r === undefined) {\r\n            throw new Error(\"WeakMap error\");\r\n        }\r\n        finish(r);\r\n        // We override the execution because return should always return the value passed in.\r\n        r.execution = Promise.resolve(r.execution).then(function () { return value; });\r\n        return createIteration(r, consumeExecution(r));\r\n    };\r\n    Repeater.prototype.throw = function (err) {\r\n        var r = records.get(this);\r\n        if (r === undefined) {\r\n            throw new Error(\"WeakMap error\");\r\n        }\r\n        if (r.state <= Initial ||\r\n            r.state >= Stopped ||\r\n            (typeof r.buffer !== \"undefined\" && !r.buffer.empty)) {\r\n            finish(r);\r\n            // If r.err is already set, that mean the repeater has already produced an error, so we throw that error rather than the error passed in, because doing so might be more informative for the caller.\r\n            if (r.err == null) {\r\n                r.err = err;\r\n            }\r\n            return createIteration(r, consumeExecution(r));\r\n        }\r\n        return this.next(Promise.reject(err));\r\n    };\r\n    Repeater.prototype[Symbol.asyncIterator] = function () {\r\n        return this;\r\n    };\r\n    // TODO: Remove these static methods from the class.\r\n    Repeater.race = race;\r\n    Repeater.merge = merge;\r\n    Repeater.zip = zip;\r\n    Repeater.latest = latest;\r\n    return Repeater;\r\n}());\r\n/*** COMBINATOR FUNCTIONS ***/\r\n// TODO: move these combinators to their own file.\r\nfunction getIterators(values, options) {\r\n    var e_3, _a;\r\n    var iters = [];\r\n    var _loop_1 = function (value) {\r\n        if (value != null && typeof value[Symbol.asyncIterator] === \"function\") {\r\n            iters.push(value[Symbol.asyncIterator]());\r\n        }\r\n        else if (value != null && typeof value[Symbol.iterator] === \"function\") {\r\n            iters.push(value[Symbol.iterator]());\r\n        }\r\n        else {\r\n            iters.push((function valueToAsyncIterator() {\r\n                return __asyncGenerator(this, arguments, function valueToAsyncIterator_1() {\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0:\r\n                                if (!options.yieldValues) return [3 /*break*/, 3];\r\n                                return [4 /*yield*/, __await(value)];\r\n                            case 1: return [4 /*yield*/, _a.sent()];\r\n                            case 2:\r\n                                _a.sent();\r\n                                _a.label = 3;\r\n                            case 3:\r\n                                if (!options.returnValues) return [3 /*break*/, 5];\r\n                                return [4 /*yield*/, __await(value)];\r\n                            case 4: return [2 /*return*/, _a.sent()];\r\n                            case 5: return [2 /*return*/];\r\n                        }\r\n                    });\r\n                });\r\n            })());\r\n        }\r\n    };\r\n    try {\r\n        for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {\r\n            var value = values_1_1.value;\r\n            _loop_1(value);\r\n        }\r\n    }\r\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n    finally {\r\n        try {\r\n            if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);\r\n        }\r\n        finally { if (e_3) throw e_3.error; }\r\n    }\r\n    return iters;\r\n}\r\n// NOTE: whenever you see any variables called `advance` or `advances`, know that it is a hack to get around the fact that `Promise.race` leaks memory. These variables are intended to be set to the resolve function of a promise which is constructed and awaited as an alternative to Promise.race. For more information, see this comment in the Node.js issue tracker: https://github.com/nodejs/node/issues/17469#issuecomment-685216777.\r\nfunction race(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, { returnValues: true });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advance, stopped, finalIteration, iteration, i_1, _loop_2;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/];\r\n                    }\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        advance();\r\n                        stopped = true;\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 5, 7]);\r\n                    iteration = void 0;\r\n                    i_1 = 0;\r\n                    _loop_2 = function () {\r\n                        var j, iters_1, iters_1_1, iter;\r\n                        var e_4, _a;\r\n                        return __generator(this, function (_b) {\r\n                            switch (_b.label) {\r\n                                case 0:\r\n                                    j = i_1;\r\n                                    try {\r\n                                        for (iters_1 = (e_4 = void 0, __values(iters)), iters_1_1 = iters_1.next(); !iters_1_1.done; iters_1_1 = iters_1.next()) {\r\n                                            iter = iters_1_1.value;\r\n                                            Promise.resolve(iter.next()).then(function (iteration) {\r\n                                                if (iteration.done) {\r\n                                                    stop();\r\n                                                    if (finalIteration === undefined) {\r\n                                                        finalIteration = iteration;\r\n                                                    }\r\n                                                }\r\n                                                else if (i_1 === j) {\r\n                                                    // This iterator has won, advance i and resolve the promise.\r\n                                                    i_1++;\r\n                                                    advance(iteration);\r\n                                                }\r\n                                            }, function (err) { return stop(err); });\r\n                                        }\r\n                                    }\r\n                                    catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n                                    finally {\r\n                                        try {\r\n                                            if (iters_1_1 && !iters_1_1.done && (_a = iters_1.return)) _a.call(iters_1);\r\n                                        }\r\n                                        finally { if (e_4) throw e_4.error; }\r\n                                    }\r\n                                    return [4 /*yield*/, new Promise(function (resolve) { return (advance = resolve); })];\r\n                                case 1:\r\n                                    iteration = _b.sent();\r\n                                    if (!(iteration !== undefined)) return [3 /*break*/, 3];\r\n                                    return [4 /*yield*/, push(iteration.value)];\r\n                                case 2:\r\n                                    _b.sent();\r\n                                    _b.label = 3;\r\n                                case 3: return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    };\r\n                    _a.label = 2;\r\n                case 2:\r\n                    if (!!stopped) return [3 /*break*/, 4];\r\n                    return [5 /*yield**/, _loop_2()];\r\n                case 3:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 2];\r\n                case 4: return [2 /*return*/, finalIteration && finalIteration.value];\r\n                case 5:\r\n                    stop();\r\n                    return [4 /*yield*/, Promise.race(iters.map(function (iter) { return iter.return && iter.return(); }))];\r\n                case 6:\r\n                    _a.sent();\r\n                    return [7 /*endfinally*/];\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nfunction merge(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, { yieldValues: true });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advances, stopped, finalIteration;\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/];\r\n                    }\r\n                    advances = [];\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        var e_5, _a;\r\n                        stopped = true;\r\n                        try {\r\n                            for (var advances_1 = __values(advances), advances_1_1 = advances_1.next(); !advances_1_1.done; advances_1_1 = advances_1.next()) {\r\n                                var advance = advances_1_1.value;\r\n                                advance();\r\n                            }\r\n                        }\r\n                        catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n                        finally {\r\n                            try {\r\n                                if (advances_1_1 && !advances_1_1.done && (_a = advances_1.return)) _a.call(advances_1);\r\n                            }\r\n                            finally { if (e_5) throw e_5.error; }\r\n                        }\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 3, 4]);\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter, i) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var iteration, _a;\r\n                            return __generator(this, function (_b) {\r\n                                switch (_b.label) {\r\n                                    case 0:\r\n                                        _b.trys.push([0, , 6, 9]);\r\n                                        _b.label = 1;\r\n                                    case 1:\r\n                                        if (!!stopped) return [3 /*break*/, 5];\r\n                                        Promise.resolve(iter.next()).then(function (iteration) { return advances[i](iteration); }, function (err) { return stop(err); });\r\n                                        return [4 /*yield*/, new Promise(function (resolve) {\r\n                                                advances[i] = resolve;\r\n                                            })];\r\n                                    case 2:\r\n                                        iteration = _b.sent();\r\n                                        if (!(iteration !== undefined)) return [3 /*break*/, 4];\r\n                                        if (iteration.done) {\r\n                                            finalIteration = iteration;\r\n                                            return [2 /*return*/];\r\n                                        }\r\n                                        return [4 /*yield*/, push(iteration.value)];\r\n                                    case 3:\r\n                                        _b.sent();\r\n                                        _b.label = 4;\r\n                                    case 4: return [3 /*break*/, 1];\r\n                                    case 5: return [3 /*break*/, 9];\r\n                                    case 6:\r\n                                        _a = iter.return;\r\n                                        if (!_a) return [3 /*break*/, 8];\r\n                                        return [4 /*yield*/, iter.return()];\r\n                                    case 7:\r\n                                        _a = (_b.sent());\r\n                                        _b.label = 8;\r\n                                    case 8:\r\n                                        return [7 /*endfinally*/];\r\n                                    case 9: return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); }))];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [2 /*return*/, finalIteration && finalIteration.value];\r\n                case 3:\r\n                    stop();\r\n                    return [7 /*endfinally*/];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nfunction zip(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, { returnValues: true });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advance, stopped, iterations, values;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/, []];\r\n                    }\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        advance();\r\n                        stopped = true;\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 6, 8]);\r\n                    _a.label = 2;\r\n                case 2:\r\n                    if (!!stopped) return [3 /*break*/, 5];\r\n                    Promise.all(iters.map(function (iter) { return iter.next(); })).then(function (iterations) { return advance(iterations); }, function (err) { return stop(err); });\r\n                    return [4 /*yield*/, new Promise(function (resolve) { return (advance = resolve); })];\r\n                case 3:\r\n                    iterations = _a.sent();\r\n                    if (iterations === undefined) {\r\n                        return [2 /*return*/];\r\n                    }\r\n                    values = iterations.map(function (iteration) { return iteration.value; });\r\n                    if (iterations.some(function (iteration) { return iteration.done; })) {\r\n                        return [2 /*return*/, values];\r\n                    }\r\n                    return [4 /*yield*/, push(values)];\r\n                case 4:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 2];\r\n                case 5: return [3 /*break*/, 8];\r\n                case 6:\r\n                    stop();\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter) { return iter.return && iter.return(); }))];\r\n                case 7:\r\n                    _a.sent();\r\n                    return [7 /*endfinally*/];\r\n                case 8: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nfunction latest(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, {\r\n        yieldValues: true,\r\n        returnValues: true,\r\n    });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advance, advances, stopped, iterations_1, values_2;\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/, []];\r\n                    }\r\n                    advances = [];\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        var e_6, _a;\r\n                        advance();\r\n                        try {\r\n                            for (var advances_2 = __values(advances), advances_2_1 = advances_2.next(); !advances_2_1.done; advances_2_1 = advances_2.next()) {\r\n                                var advance1 = advances_2_1.value;\r\n                                advance1();\r\n                            }\r\n                        }\r\n                        catch (e_6_1) { e_6 = { error: e_6_1 }; }\r\n                        finally {\r\n                            try {\r\n                                if (advances_2_1 && !advances_2_1.done && (_a = advances_2.return)) _a.call(advances_2);\r\n                            }\r\n                            finally { if (e_6) throw e_6.error; }\r\n                        }\r\n                        stopped = true;\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 5, 7]);\r\n                    Promise.all(iters.map(function (iter) { return iter.next(); })).then(function (iterations) { return advance(iterations); }, function (err) { return stop(err); });\r\n                    return [4 /*yield*/, new Promise(function (resolve) { return (advance = resolve); })];\r\n                case 2:\r\n                    iterations_1 = _a.sent();\r\n                    if (iterations_1 === undefined) {\r\n                        return [2 /*return*/];\r\n                    }\r\n                    values_2 = iterations_1.map(function (iteration) { return iteration.value; });\r\n                    if (iterations_1.every(function (iteration) { return iteration.done; })) {\r\n                        return [2 /*return*/, values_2];\r\n                    }\r\n                    // We continuously yield and mutate the same values array so we shallow copy it each time it is pushed.\r\n                    return [4 /*yield*/, push(values_2.slice())];\r\n                case 3:\r\n                    // We continuously yield and mutate the same values array so we shallow copy it each time it is pushed.\r\n                    _a.sent();\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter, i) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var iteration;\r\n                            return __generator(this, function (_a) {\r\n                                switch (_a.label) {\r\n                                    case 0:\r\n                                        if (iterations_1[i].done) {\r\n                                            return [2 /*return*/, iterations_1[i].value];\r\n                                        }\r\n                                        _a.label = 1;\r\n                                    case 1:\r\n                                        if (!!stopped) return [3 /*break*/, 4];\r\n                                        Promise.resolve(iter.next()).then(function (iteration) { return advances[i](iteration); }, function (err) { return stop(err); });\r\n                                        return [4 /*yield*/, new Promise(function (resolve) { return (advances[i] = resolve); })];\r\n                                    case 2:\r\n                                        iteration = _a.sent();\r\n                                        if (iteration === undefined) {\r\n                                            return [2 /*return*/, iterations_1[i].value];\r\n                                        }\r\n                                        else if (iteration.done) {\r\n                                            return [2 /*return*/, iteration.value];\r\n                                        }\r\n                                        values_2[i] = iteration.value;\r\n                                        return [4 /*yield*/, push(values_2.slice())];\r\n                                    case 3:\r\n                                        _a.sent();\r\n                                        return [3 /*break*/, 1];\r\n                                    case 4: return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); }))];\r\n                case 4: return [2 /*return*/, _a.sent()];\r\n                case 5:\r\n                    stop();\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter) { return iter.return && iter.return(); }))];\r\n                case 6:\r\n                    _a.sent();\r\n                    return [7 /*endfinally*/];\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\n\nexport { DroppingBuffer, FixedBuffer, MAX_QUEUE_LENGTH, Repeater, RepeaterOverflowError, SlidingBuffer };\n//# sourceMappingURL=repeater.js.map\n","export default class Config {\n    static global = new Config();\n\n    private _extraRequestThreshold = 256 * 1024;\n\n    /**\n     * Fetch up to this many extra bytes if it will eliminate an extra request\n     */\n    public extraRequestThreshold(): number {\n        return this._extraRequestThreshold;\n    }\n\n    public setExtraRequestThreshold(bytes: number): void {\n        if (bytes < 0) {\n            throw new Error('extraRequestThreshold cannot be negative');\n        }\n        this._extraRequestThreshold = bytes;\n    }\n}\n","import type * as flatbuffers from 'flatbuffers';\nimport type { GeometryLayout } from 'ol/geom/Geometry.js';\nimport { GeometryType } from '../flat-geobuf/geometry-type.js';\nimport { Geometry } from '../flat-geobuf/geometry.js';\n\nexport interface IParsedGeometry {\n    xy: number[];\n    z?: number[];\n    m?: number[];\n    ends: number[];\n    parts: IParsedGeometry[];\n    type: GeometryType;\n}\n\nexport interface ISimpleGeometry {\n    getFlatCoordinates?(): number[];\n    getType(): string;\n    getLayout?: () => GeometryLayout;\n}\n\nexport interface IPolygon extends ISimpleGeometry {\n    getEnds(): number[];\n}\n\nexport interface IMultiLineString extends ISimpleGeometry {\n    getEnds(): number[];\n}\n\nexport interface IMultiPolygon extends ISimpleGeometry {\n    getEndss(): number[][];\n    getPolygons(): IPolygon[];\n}\n\nexport type ICreateGeometry = (geometry: Geometry | null, type: GeometryType) => ISimpleGeometry | undefined;\n\nexport function buildGeometry(builder: flatbuffers.Builder, parsedGeometry: IParsedGeometry) {\n    const { xy, z, m, ends, parts, type } = parsedGeometry;\n\n    if (parts) {\n        const partOffsets = parts.map((part) => buildGeometry(builder, part));\n        const partsOffset = Geometry.createPartsVector(builder, partOffsets);\n        Geometry.startGeometry(builder);\n        Geometry.addParts(builder, partsOffset);\n        Geometry.addType(builder, type);\n        return Geometry.endGeometry(builder);\n    }\n\n    const xyOffset = Geometry.createXyVector(builder, xy);\n    let zOffset: number | undefined;\n    if (z) zOffset = Geometry.createZVector(builder, z);\n\n    let mOffset: number | undefined;\n    if (m) mOffset = Geometry.createMVector(builder, m);\n\n    let endsOffset: number | undefined;\n    if (ends) endsOffset = Geometry.createEndsVector(builder, ends);\n\n    Geometry.startGeometry(builder);\n    if (endsOffset) Geometry.addEnds(builder, endsOffset);\n    Geometry.addXy(builder, xyOffset);\n    if (zOffset) Geometry.addZ(builder, zOffset);\n    if (mOffset) Geometry.addM(builder, mOffset);\n    Geometry.addType(builder, type);\n    return Geometry.endGeometry(builder);\n}\n\nexport function flat(a: number[] | number[][], xy: number[], z: number[]): number[] | undefined {\n    if (a.length === 0) return;\n    if (Array.isArray(a[0])) {\n        for (const sa of a as number[][]) flat(sa, xy, z);\n    } else {\n        if (a.length === 2) xy.push(...(a as number[]));\n        else {\n            xy.push(a[0], (a as number[])[1]);\n            z.push((a as number[])[2]);\n        }\n    }\n}\n\nfunction deinterleaveZ(flatCoordinates: number[]): [number[], number[]] {\n    const cLength = flatCoordinates.length / 3;\n    const xy = new Array(cLength * 2);\n    const z = new Array(cLength);\n    for (let i = 0, j = 0; i < flatCoordinates.length; i += 3, j++) {\n        xy[j * 2] = flatCoordinates[i];\n        xy[j * 2 + 1] = flatCoordinates[i + 1];\n        z[j] = flatCoordinates[i + 2];\n    }\n    return [xy, z];\n}\n\nfunction deinterleaveZM(flatCoordinates: number[]): [number[], number[], number[]] {\n    const cLength = flatCoordinates.length / 4;\n    const xy = new Array(cLength * 2);\n    const z = new Array(cLength);\n    const m = new Array(cLength);\n    for (let i = 0, j = 0; i < flatCoordinates.length; i += 4, j++) {\n        xy[j * 2] = flatCoordinates[i];\n        xy[j * 2 + 1] = flatCoordinates[i + 1];\n        z[j] = flatCoordinates[i + 2];\n        m[j] = flatCoordinates[i + 3];\n    }\n\n    return [xy, z, m];\n}\n\nexport function parseGeometry(geometry: ISimpleGeometry, headerGeomType: GeometryType): IParsedGeometry {\n    let flatCoordinates: number[] | undefined;\n    let xy: number[] | undefined;\n    let z: number[] | undefined;\n    let m: number[] | undefined;\n    let ends: number[] | undefined;\n    let parts: IParsedGeometry[] | undefined;\n\n    let type = headerGeomType;\n    if (type === GeometryType.Unknown) {\n        type = toGeometryType(geometry.getType());\n    }\n\n    let flatEnds: number[] | undefined;\n    if (type === GeometryType.MultiLineString) {\n        if (geometry.getFlatCoordinates) flatCoordinates = geometry.getFlatCoordinates();\n        flatEnds = (geometry as IMultiLineString).getEnds();\n    } else if (type === GeometryType.Polygon) {\n        if (geometry.getFlatCoordinates) flatCoordinates = geometry.getFlatCoordinates();\n        flatEnds = (geometry as IPolygon).getEnds();\n    } else if (type === GeometryType.MultiPolygon) {\n        const mp = geometry as IMultiPolygon;\n        parts = mp.getPolygons().map((p) => parseGeometry(p, GeometryType.Polygon));\n    } else {\n        if (geometry.getFlatCoordinates) flatCoordinates = geometry.getFlatCoordinates();\n    }\n\n    const layout = geometry.getLayout?.() ?? 'XY';\n    if (flatCoordinates) {\n        if (layout === 'XY') {\n            xy = flatCoordinates;\n        } else if (layout === 'XYZ') {\n            [xy, z] = deinterleaveZ(flatCoordinates);\n        } else if (layout === 'XYM') {\n            [xy, m] = deinterleaveZ(flatCoordinates);\n        } else if (layout === 'XYZM') {\n            [xy, z, m] = deinterleaveZM(flatCoordinates);\n        }\n    }\n\n    if (flatEnds) {\n        let endDivision = 2;\n        if (layout === 'XYZ' || layout === 'XYM') endDivision = 3;\n        else if (layout === 'XYZM') endDivision = 4;\n        ends = flatEnds.map((e) => e / endDivision);\n    }\n\n    return {\n        xy,\n        z,\n        m,\n        ends,\n        type,\n        parts,\n    } as IParsedGeometry;\n}\n\nexport function pairFlatCoordinates(xy: Float64Array, z?: Float64Array): number[][] {\n    const newArray: number[][] = [];\n    for (let i = 0; i < xy.length; i += 2) {\n        const a = [xy[i], xy[i + 1]];\n        if (z) a.push(z[i >> 1]);\n        newArray.push(a);\n    }\n    return newArray;\n}\n\nexport function toGeometryType(name?: string): GeometryType {\n    if (!name) return GeometryType.Unknown;\n    const type: GeometryType = (GeometryType as never)[name];\n    return type;\n}\n","import * as flatbuffers from 'flatbuffers';\n\nimport type { ColumnMeta } from '../column-meta.js';\nimport { ColumnType } from '../flat-geobuf/column-type.js';\nimport { Feature } from '../flat-geobuf/feature.js';\nimport type { HeaderMeta } from '../header-meta.js';\nimport { type ICreateGeometry, type IParsedGeometry, type ISimpleGeometry, buildGeometry } from './geometry.js';\n\nconst textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\n\nexport interface IProperties {\n    [key: string]: boolean | number | string | Uint8Array | undefined;\n}\n\nexport interface IFeature {\n    getGeometry?(): ISimpleGeometry;\n    getId?(): number;\n    getProperties?(): IProperties;\n    setProperties?(properties: IProperties): void;\n}\n\nexport type ICreateFeature = (\n    id: number,\n    geometry?: ISimpleGeometry,\n    properties?: Record<string, string | number | boolean | Uint8Array | undefined>,\n) => IFeature;\n\nexport function fromFeature(\n    id: number,\n    feature: Feature,\n    header: HeaderMeta,\n    createGeometry: ICreateGeometry,\n    createFeature: ICreateFeature,\n): IFeature {\n    const columns = header.columns;\n    const geometry = feature.geometry();\n    const simpleGeometry = createGeometry(geometry, header.geometryType);\n    const properties = parseProperties(feature, columns as ColumnMeta[]);\n    return createFeature(id, simpleGeometry, properties);\n}\n\nexport function buildFeature(geometry: IParsedGeometry, properties: IProperties, header: HeaderMeta): Uint8Array {\n    const columns = header.columns;\n    const builder = new flatbuffers.Builder();\n\n    let offset = 0;\n    let capacity = 1024;\n    let bytes = new Uint8Array(capacity);\n    let view = new DataView(bytes.buffer);\n\n    const prep = (size: number) => {\n        if (offset + size < capacity) return;\n        capacity = Math.max(capacity + size, capacity * 2);\n        const newBytes = new Uint8Array(capacity);\n        newBytes.set(bytes);\n        bytes = newBytes;\n        view = new DataView(bytes.buffer);\n    };\n\n    if (columns) {\n        for (let i = 0; i < columns.length; i++) {\n            const column = columns[i];\n            const value = properties[column.name];\n            if (value === null) continue;\n            prep(2);\n            view.setUint16(offset, i, true);\n            offset += 2;\n            switch (column.type) {\n                case ColumnType.Bool:\n                    prep(1);\n                    view.setUint8(offset, value as number);\n                    offset += 1;\n                    break;\n                case ColumnType.Short:\n                    prep(2);\n                    view.setInt16(offset, value as number, true);\n                    offset += 2;\n                    break;\n                case ColumnType.UShort:\n                    prep(2);\n                    view.setUint16(offset, value as number, true);\n                    offset += 2;\n                    break;\n                case ColumnType.Int:\n                    prep(4);\n                    view.setInt32(offset, value as number, true);\n                    offset += 4;\n                    break;\n                case ColumnType.UInt:\n                    prep(4);\n                    view.setUint32(offset, value as number, true);\n                    offset += 4;\n                    break;\n                case ColumnType.Long:\n                    prep(8);\n                    view.setBigInt64(offset, BigInt(value as number), true);\n                    offset += 8;\n                    break;\n                case ColumnType.Float:\n                    prep(4);\n                    view.setFloat32(offset, value as number, true);\n                    offset += 4;\n                    break;\n                case ColumnType.Double:\n                    prep(8);\n                    view.setFloat64(offset, value as number, true);\n                    offset += 8;\n                    break;\n                case ColumnType.DateTime:\n                case ColumnType.String: {\n                    const str = textEncoder.encode(value as string);\n                    prep(4);\n                    view.setUint32(offset, str.length, true);\n                    offset += 4;\n                    prep(str.length);\n                    bytes.set(str, offset);\n                    offset += str.length;\n                    break;\n                }\n                case ColumnType.Json: {\n                    const str = textEncoder.encode(JSON.stringify(value));\n                    prep(4);\n                    view.setUint32(offset, str.length, true);\n                    offset += 4;\n                    prep(str.length);\n                    bytes.set(str, offset);\n                    offset += str.length;\n                    break;\n                }\n                case ColumnType.Binary: {\n                    prep(4);\n                    const blob = value as Uint8Array;\n                    view.setUint32(offset, blob.length, true);\n                    offset += 4;\n                    prep(blob.length);\n                    bytes.set(blob, offset);\n                    offset += blob.length;\n                    break;\n                }\n                default:\n                    throw new Error(`Unknown type ${column.type}`);\n            }\n        }\n    }\n\n    let propertiesOffset = 0;\n    if (offset > 0) propertiesOffset = Feature.createPropertiesVector(builder, bytes.slice(0, offset));\n\n    const geometryOffset = buildGeometry(builder, geometry);\n    Feature.startFeature(builder);\n    Feature.addGeometry(builder, geometryOffset);\n    if (propertiesOffset) Feature.addProperties(builder, propertiesOffset);\n    const featureOffset = Feature.endFeature(builder);\n    builder.finishSizePrefixed(featureOffset);\n    return builder.asUint8Array() as Uint8Array;\n}\n\nexport function parseProperties(feature: Feature, columns?: ColumnMeta[] | null): IProperties {\n    const properties: IProperties = {};\n    if (!columns || columns.length === 0) return properties;\n    const array = feature.propertiesArray();\n    if (!array) return properties;\n    const view = new DataView(array.buffer, array.byteOffset);\n    const length = feature.propertiesLength();\n    let offset = 0;\n    while (offset < length) {\n        const i = view.getUint16(offset, true);\n        offset += 2;\n        const column = columns[i];\n        const name = column.name;\n        switch (column.type) {\n            case ColumnType.Bool: {\n                properties[name] = !!view.getUint8(offset);\n                offset += 1;\n                break;\n            }\n            case ColumnType.Byte: {\n                properties[name] = view.getInt8(offset);\n                offset += 1;\n                break;\n            }\n            case ColumnType.UByte: {\n                properties[name] = view.getUint8(offset);\n                offset += 1;\n                break;\n            }\n            case ColumnType.Short: {\n                properties[name] = view.getInt16(offset, true);\n                offset += 2;\n                break;\n            }\n            case ColumnType.UShort: {\n                properties[name] = view.getUint16(offset, true);\n                offset += 2;\n                break;\n            }\n            case ColumnType.Int: {\n                properties[name] = view.getInt32(offset, true);\n                offset += 4;\n                break;\n            }\n            case ColumnType.UInt: {\n                properties[name] = view.getUint32(offset, true);\n                offset += 4;\n                break;\n            }\n            case ColumnType.Long: {\n                properties[name] = Number(view.getBigInt64(offset, true));\n                offset += 8;\n                break;\n            }\n            case ColumnType.ULong: {\n                properties[name] = Number(view.getBigUint64(offset, true));\n                offset += 8;\n                break;\n            }\n            case ColumnType.Float: {\n                properties[name] = view.getFloat32(offset, true);\n                offset += 4;\n                break;\n            }\n            case ColumnType.Double: {\n                properties[name] = view.getFloat64(offset, true);\n                offset += 8;\n                break;\n            }\n            case ColumnType.DateTime:\n            case ColumnType.String: {\n                const length = view.getUint32(offset, true);\n                offset += 4;\n                properties[name] = textDecoder.decode(array.subarray(offset, offset + length));\n                offset += length;\n                break;\n            }\n            case ColumnType.Json: {\n                const length = view.getUint32(offset, true);\n                offset += 4;\n                const str = textDecoder.decode(array.subarray(offset, offset + length));\n                properties[name] = JSON.parse(str);\n                offset += length;\n                break;\n            }\n            case ColumnType.Binary: {\n                const length = view.getUint32(offset, true);\n                offset += 4;\n                properties[name] = array.subarray(offset, offset + length);\n                offset += length;\n                break;\n            }\n            default:\n                throw new Error(`Unknown type ${column.type}`);\n        }\n    }\n    return properties;\n}\n","export const VERSION = 3;\n\n/**\n * Magic bytes that identify a FlatGeobuf file.\n * These bytes must appear at the start of a valid FlatGeobuf file.\n */\nexport const MAGIC_BYTES = [0x66, 0x67, 0x62, VERSION, 0x66, 0x67, 0x62, 0]; // \"fgb\\0\"\n\n/**\n * Size of the length prefix for each feature in bytes.\n * Each feature in a FlatGeobuf file is prefixed with a 4-byte length.\n */\nexport const SIZE_PREFIX_LEN = 4;\n\n/**\n * Default size to fetch when reading the header.\n */\nexport const HEADER_FETCH_SIZE = 8192 * 4;\n\n/**\n * Default options for query planning.\n */\nexport const QUERY_PLAN_DEFAULTS = {\n  /**\n   * Amount of space allowed between features before splitting requests.\n   * If features are closer together than this, they will be fetched in a\n   * single request to minimize network overhead.\n   */\n  overfetchBytes: 500 * 1024, // 500KB\n} as const;\n\n/**\n * Default size of the feature data cache in bytes.\n * This can be overridden when creating a source.\n */\nexport const DEFAULT_CACHE_SIZE = 5 * 1024 * 1024; // 5MB\n\n/**\n * Whether to validate feature data size prefixes against actual sizes.\n * This is useful for debugging but should be disabled in production.\n */\nexport const VALIDATE_FEATURE_DATA = false;\n","import { LRUCache } from \"lru-cache\";\nimport { DEFAULT_CACHE_SIZE } from \"./constants\";\n\nexport type FetchRangeFn = (\n  range: [number, number | null]\n) => Promise<ArrayBuffer>;\n\n/**\n * Statistics about the LRU cache and in-flight requests.\n * Used to monitor cache performance and memory usage.\n */\nexport type CacheStats = {\n  /** Current number of items in the cache */\n  count: number;\n  /** Total size of cached items in bytes */\n  calculatedSize: number;\n  /** Maximum size of the cache which stores feature data in bytes */\n  maxSize: number;\n  /** Number of requests currently in flight */\n  inFlightRequests: number;\n};\n\n/**\n * Manages fetching and caching of byte ranges from a source.\n */\nexport class FetchManager {\n  private cache: LRUCache<string, ArrayBuffer>;\n  private inFlightRequests = new Map<string, Promise<ArrayBuffer>>();\n  private fetchRangeFn: FetchRangeFn;\n  private url?: string;\n\n  constructor(\n    urlOrFetchRangeFn: string | FetchRangeFn,\n    maxCacheSize: number = DEFAULT_CACHE_SIZE\n  ) {\n    if (typeof urlOrFetchRangeFn === \"string\") {\n      this.url = urlOrFetchRangeFn;\n      this.fetchRangeFn = this.defaultFetchRange;\n    } else {\n      this.fetchRangeFn = urlOrFetchRangeFn;\n    }\n\n    this.cache = new LRUCache({\n      maxSize: maxCacheSize,\n      sizeCalculation: (value) => value.byteLength,\n      updateAgeOnGet: true,\n    });\n  }\n\n  /**\n   * Get cache statistics\n   */\n  get cacheStats(): CacheStats {\n    return {\n      count: this.cache.size,\n      calculatedSize: this.cache.calculatedSize,\n      maxSize: this.cache.maxSize,\n      inFlightRequests: this.inFlightRequests.size,\n    };\n  }\n\n  /**\n   * Clear the feature data cache\n   */\n  clearCache() {\n    this.cache.clear();\n    this.inFlightRequests.clear();\n  }\n\n  /**\n   * Fetch a byte range from the source.\n   *\n   * The result is cached using an LRU cache to minimize network requests.\n   *\n   * @param range - [start (number), end (number | null)] byte range to fetch.\n   *                End may be null to indicate the end of the file.\n   * @returns Promise resolving to the fetched data as ArrayBuffer\n   * @throws Error if source is misconfigured\n   */\n  async fetchRange(range: [number, number | null]): Promise<ArrayBuffer> {\n    // Generate cache key from range\n    const cacheKey = `${range[0]}-${range[1] ?? \"\"}`;\n\n    // Check cache first\n    const cached = this.cache.get(cacheKey);\n    if (cached) {\n      console.log(\"returning cached\", cacheKey);\n      return cached;\n    }\n\n    // Check for in-flight request\n    const inFlightRequest = this.inFlightRequests.get(cacheKey);\n    if (inFlightRequest) {\n      console.log(\"returning in flight request\", cacheKey);\n      return inFlightRequest;\n    }\n\n    // Create new request\n    const request = (async () => {\n      try {\n        const bytes = await this.fetchRangeFn(range);\n        console.log(\"got bytes\", bytes.byteLength);\n        // Store in cache\n        this.cache.set(cacheKey, bytes);\n        this.inFlightRequests.delete(cacheKey);\n        console.log(\n          \"deleting cachekey. in flight requests cache size\",\n          this.inFlightRequests.size\n        );\n        return bytes;\n      } catch (e) {\n        console.error(\"error fetching range\", e);\n        this.inFlightRequests.delete(cacheKey);\n        throw e;\n      }\n    })();\n\n    // Store request in in-flight map\n    this.inFlightRequests.set(cacheKey, request);\n    console.log(\n      \"setting cachekey. in flight requests cache size\",\n      this.inFlightRequests.size,\n      range\n    );\n    return request;\n  }\n\n  /**\n   * Default fetch implementation using the fetch API.\n   */\n  private async defaultFetchRange(\n    range: [number, number | null]\n  ): Promise<ArrayBuffer> {\n    if (!this.url) {\n      throw new Error(\"Misconfiguration: fetchRange called without url\");\n    }\n    const response = await fetch(this.url, {\n      headers: {\n        Range: `bytes=${range[0]}-${range[1] ? range[1] : \"\"}`,\n      },\n    });\n    return response.arrayBuffer();\n  }\n}\n","import { FetchRangeFn } from \"./fetch-manager\";\nimport { OffsetAndLength } from \"./rtree\";\nimport {\n  SIZE_PREFIX_LEN,\n  VALIDATE_FEATURE_DATA,\n  QUERY_PLAN_DEFAULTS,\n} from \"./constants\";\n\n/**\n * Represents a request to fetch a range of bytes from the source.\n */\nexport type QueryPlanRequest = {\n  /** Byte range to fetch [start, end] */\n  range: [number, number | null];\n  /** Offsets of features within the range [offset, length][] */\n  offsets: [number, number | null][];\n};\n\nexport type QueryPlan = {\n  requests: QueryPlanRequest[];\n  bytes: number;\n  features: number;\n};\n\n/**\n * Options for query planning and execution.\n */\nexport type QueryPlanOptions = {\n  /** Maximum number of bytes to overfetch when merging ranges */\n  overfetchBytes?: number;\n  /** Skip validation of feature data size prefixes */\n  skipValidation?: boolean;\n};\n\n/**\n * Creates a query plan from search results, optimizing for minimal network requests\n * while maintaining feature order.\n */\nexport function createQueryPlan(\n  results: OffsetAndLength[],\n  featureDataOffset: number,\n  options: QueryPlanOptions\n): QueryPlan {\n  // Sort results by offset to maintain feature order\n  results.sort((a, b) => a[0] - b[0]);\n\n  if (results.length === 0) {\n    return {\n      requests: [],\n      bytes: 0,\n      features: 0,\n    };\n  } else if (results.length === 1) {\n    const result = results[0];\n    return {\n      requests: [\n        {\n          range: toRange(result, featureDataOffset),\n          offsets: [[0, result[1]]],\n        },\n      ],\n      bytes: result[1] ? result[1] - result[0] : 0,\n      features: 1,\n    };\n  }\n\n  // Group results into ranges that can be fetched in a single request\n  const plan: QueryPlan = {\n    requests: [],\n    bytes: results.reduce((acc, [offset, length]) => {\n      const range = toRange([offset, length], featureDataOffset);\n      acc += range[1] ? range[1] - range[0] : 0;\n      return acc;\n    }, 0),\n    features: results.length,\n  };\n  let offset = 0;\n  const [start, length] = results[0];\n  let currentRange: QueryPlanRequest = {\n    range: toRange([start, length], featureDataOffset),\n    offsets: [[0, length!]],\n  };\n  offset = length!;\n  plan.requests.push(currentRange);\n\n  const overfetchBytes =\n    options.overfetchBytes ?? QUERY_PLAN_DEFAULTS.overfetchBytes;\n\n  for (let i = 1; i < results.length; i++) {\n    const [start, length] = results[i];\n    const range = toRange([start, length], featureDataOffset);\n    const distance = range[0] - currentRange.range[1]! - 1;\n\n    // Merge ranges if:\n    // 1. The distance between ranges is small enough\n    // 2. The merged range size would be reasonable\n    // 3. The total number of features in the range isn't too large\n    if (distance < overfetchBytes && currentRange.offsets.length < 10000) {\n      // merge the ranges and add to existing request\n      currentRange.range[1] = range[1];\n      offset += distance;\n      currentRange.offsets.push([offset, length]);\n      offset += length!;\n    } else {\n      // add a new request\n      currentRange = {\n        range,\n        offsets: [[0, length!]],\n      };\n      offset = length!;\n      plan.requests.push(currentRange);\n    }\n  }\n\n  return plan;\n}\n\n/**\n * Convert an OffsetAndLength tuple to a byte range tuple. Accounts for\n * possible null length, which indicates the end of the file. In this case\n * the range is [start, null].\n * @param offsetAndLength\n * @returns [number, number | null]\n */\nfunction toRange(\n  offsetAndLength: OffsetAndLength,\n  featureDataOffset: number\n): [number, number | null] {\n  if (offsetAndLength[1] === null) {\n    return [featureDataOffset + offsetAndLength[0], null];\n  } else {\n    return [\n      featureDataOffset + offsetAndLength[0],\n      featureDataOffset + offsetAndLength[0] + offsetAndLength[1] - 1,\n    ];\n  }\n}\n\n/**\n * Execute a query plan by fetching and processing features in parallel.\n * Features are yielded as soon as they are available, rather than in the\n * order they were requested.\n */\nexport async function* executeQueryPlan(\n  plan: QueryPlanRequest[],\n  fetchRange: FetchRangeFn,\n  options: QueryPlanOptions = {}\n): AsyncGenerator<[globalThis.DataView, number]> {\n  // Start all fetch requests in parallel and map them to their respective plan index\n  const fetchPromises = plan.map(async ({ range, offsets }, i) => {\n    const data = await fetchRange(range);\n    return { data, offsets, i };\n  });\n\n  // Use Promise.race to yield data as soon as each fetch is ready\n  const pendingFetches = new Set(plan.map((_, i) => i));\n\n  while (pendingFetches.size > 0) {\n    // Wait for the next fetch to complete\n    const completedFetch = await Promise.race(\n      [...pendingFetches].map((i: number) => fetchPromises[i])\n    );\n\n    // Remove the completed fetch from the pending set\n    pendingFetches.delete(completedFetch.i);\n\n    // Process the completed fetch\n    const { data, offsets } = completedFetch;\n    const view = new DataView(data);\n\n    for (let [offset, length] of offsets) {\n      if (length === null) {\n        length = view.buffer.byteLength - offset;\n      }\n\n      const featureView = new DataView(data, offset, length);\n      if (VALIDATE_FEATURE_DATA) {\n        const size = featureView.getUint32(0, true);\n        if (size !== length - SIZE_PREFIX_LEN) {\n          throw new Error(\n            `Feature data size mismatch: expected ${length}, size prefix was ${size}`\n          );\n        }\n      }\n      yield [featureView, offset];\n    }\n  }\n}\n","import { GeometryType } from '../flat-geobuf/geometry-type.js';\nimport type { Geometry } from '../flat-geobuf/geometry.js';\n\nimport type {\n    Geometry as GeoJsonGeometry,\n    GeometryCollection,\n    LineString,\n    MultiLineString,\n    MultiPoint,\n    MultiPolygon,\n    Point,\n    Polygon,\n} from 'geojson';\n\nimport { type IParsedGeometry, flat, pairFlatCoordinates, toGeometryType } from '../generic/geometry.js';\n\nexport interface IGeoJsonGeometry {\n    type: string;\n    coordinates: number[] | number[][] | number[][][] | number[][][][];\n    geometries?: IGeoJsonGeometry[];\n}\n\nexport function parseGeometry(\n    geometry: Point | MultiPoint | LineString | MultiLineString | Polygon | MultiPolygon,\n): IParsedGeometry {\n    const cs = geometry.coordinates;\n    const xy: number[] = [];\n    const z: number[] = [];\n    let ends: number[] | undefined;\n    let parts: IParsedGeometry[] | undefined;\n    const type: GeometryType = toGeometryType(geometry.type);\n    let end = 0;\n    switch (geometry.type) {\n        case 'Point':\n            flat(cs as number[], xy, z);\n            break;\n        case 'MultiPoint':\n        case 'LineString':\n            flat(cs as number[][], xy, z);\n            break;\n        case 'MultiLineString':\n        case 'Polygon': {\n            const css = cs as number[][];\n            flat(css, xy, z);\n            if (css.length > 1) ends = css.map((c) => (end += c.length));\n            break;\n        }\n        case 'MultiPolygon': {\n            const csss = cs as number[][][][];\n            const geometries = csss.map((coordinates) => ({\n                type: 'Polygon',\n                coordinates,\n            })) as Polygon[];\n            parts = geometries.map(parseGeometry);\n            break;\n        }\n    }\n    return {\n        xy,\n        z: z.length > 0 ? z : undefined,\n        ends,\n        type,\n        parts,\n    } as IParsedGeometry;\n}\n\nexport function parseGC(geometry: GeometryCollection): IParsedGeometry {\n    const type: GeometryType = toGeometryType(geometry.type);\n    const parts: IParsedGeometry[] = [];\n    for (let i = 0; i < geometry.geometries.length; i++) {\n        const g = geometry.geometries[i];\n        if (g.type === 'GeometryCollection') parts.push(parseGC(g));\n        else parts.push(parseGeometry(g));\n    }\n    return {\n        type,\n        parts,\n    } as IParsedGeometry;\n}\n\nfunction extractParts(xy: Float64Array, z: Float64Array, ends: Uint32Array) {\n    if (!ends || ends.length === 0) return [pairFlatCoordinates(xy, z)];\n    let s = 0;\n    const xySlices = Array.from(ends).map((e) => xy.slice(s, (s = e << 1)));\n    let zSlices: Float64Array[];\n    if (z) {\n        s = 0;\n        zSlices = Array.from(ends).map((e) => z.slice(s, (s = e)));\n    }\n    return xySlices.map((xy, i) => pairFlatCoordinates(xy, zSlices ? zSlices[i] : undefined));\n}\n\nfunction toGeoJsonCoordinates(geometry: Geometry, type: GeometryType) {\n    const xy = geometry.xyArray() as Float64Array;\n    const z = geometry.zArray() as Float64Array;\n    switch (type) {\n        case GeometryType.Point: {\n            const a = Array.from(xy);\n            if (z) a.push(z[0]);\n            return a;\n        }\n        case GeometryType.MultiPoint:\n        case GeometryType.LineString:\n            return pairFlatCoordinates(xy, z);\n        case GeometryType.MultiLineString:\n            return extractParts(xy, z, geometry.endsArray() as Uint32Array);\n        case GeometryType.Polygon:\n            return extractParts(xy, z, geometry.endsArray() as Uint32Array);\n    }\n}\n\nexport function fromGeometry(geometry: Geometry, headerType: GeometryType): GeoJsonGeometry {\n    let type = headerType;\n    if (type === GeometryType.Unknown) {\n        type = geometry.type();\n    }\n    if (type === GeometryType.GeometryCollection) {\n        const geometries: GeoJsonGeometry[] = [];\n        for (let i = 0; i < geometry.partsLength(); i++) {\n            const part = geometry.parts(i) as Geometry;\n            const partType = part.type() as GeometryType;\n            geometries.push(fromGeometry(part, partType));\n        }\n        return {\n            type: GeometryType[type],\n            geometries,\n        } as GeoJsonGeometry;\n    }\n    if (type === GeometryType.MultiPolygon) {\n        const geometries: GeoJsonGeometry[] = [];\n        for (let i = 0; i < geometry.partsLength(); i++)\n            geometries.push(fromGeometry(geometry.parts(i) as Geometry, GeometryType.Polygon));\n        return {\n            type: GeometryType[type],\n            coordinates: geometries.map((g) => (g as Polygon).coordinates),\n        } as GeoJsonGeometry;\n    }\n    const coordinates = toGeoJsonCoordinates(geometry, type);\n    return {\n        type: GeometryType[type],\n        coordinates,\n    } as GeoJsonGeometry;\n}\n","import type { Feature } from '../flat-geobuf/feature.js';\nimport type { Geometry } from '../flat-geobuf/geometry.js';\nimport { type IFeature, parseProperties } from '../generic/feature.js';\nimport type { HeaderMeta } from '../header-meta.js';\nimport { fromGeometry } from './geometry.js';\n\nimport type { Feature as GeoJsonFeature } from 'geojson';\n\nexport interface IGeoJsonFeature extends IFeature, GeoJsonFeature {}\n\nexport function fromFeature(id: number, feature: Feature, header: HeaderMeta): IGeoJsonFeature {\n    const columns = header.columns;\n    const geometry = fromGeometry(feature.geometry() as Geometry, header.geometryType);\n    const geoJsonfeature: GeoJsonFeature = {\n        type: 'Feature',\n        id,\n        geometry,\n        properties: parseProperties(feature, columns),\n    };\n    return geoJsonfeature;\n}\n","import {\n  Feature as GeoJSONFeature,\n  GeoJsonProperties,\n  Geometry,\n} from \"geojson\";\nimport { HeaderMeta } from \"flatgeobuf\";\nimport { ByteBuffer } from \"flatbuffers\";\nimport { Feature } from \"flatgeobuf/lib/mjs/flat-geobuf/feature\";\nimport { fromFeature } from \"flatgeobuf/lib/mjs/geojson/feature\";\nimport { parseProperties as flatgeobufParseProperties } from \"flatgeobuf/lib/mjs/generic/feature\";\nimport { SIZE_PREFIX_LEN } from \"./constants\";\n\n// Set to true to validate the feature data size prefix against the actual size\n// fetched from the file. This is useful for debugging, but should be disabled\n// in production.\nexport const VALIDATE_FEATURE_DATA = false;\n\n/**\n * Feature with additional metadata from the FlatGeobuf file.\n */\nexport type FeatureWithMetadata<T = GeoJSONFeature> = T & {\n  properties: GeoJsonProperties & {\n    /** Length of the feature data in bytes */\n    __byteLength: number;\n    /** Offset of the feature in the FlatGeobuf file */\n    __offset: number;\n  };\n};\n\n/**\n * Validate that the feature data has the correct size prefix.\n */\nexport function validateFeatureData(view: DataView, size: number) {\n  const sizePrefix = view.getUint32(0, true);\n  // Only validate if explicitly enabled\n  if (VALIDATE_FEATURE_DATA && sizePrefix !== size - SIZE_PREFIX_LEN) {\n    throw new Error(\n      `Feature data size mismatch: expected ${size}, size prefix was ${sizePrefix}`\n    );\n  }\n}\n\n/**\n * Parse feature data from a byte array and return a GeoJSON Feature.\n *\n * @param offset - Offset of the feature in the file, used as the feature ID\n * @param bytesAligned - Uint8Array of the feature data, with the size prefix\n * @param header - FlatGeobuf header metadata\n * @returns GeoJSON Feature with metadata\n */\nexport function parseFeatureData(\n  offset: number,\n  bytesAligned: Uint8Array,\n  header: HeaderMeta\n): FeatureWithMetadata<any> {\n  const bb = new ByteBuffer(bytesAligned);\n  bb.setPosition(SIZE_PREFIX_LEN);\n  const feature = fromFeature(offset, Feature.getRootAsFeature(bb), header);\n  return {\n    ...feature,\n    properties: {\n      ...feature.properties,\n      __byteLength: bytesAligned.byteLength,\n      __offset: offset,\n    },\n  };\n}\n\n/**\n * Parse properties from a FlatGeobuf feature.\n *\n * @param bb - ByteBuffer containing the feature data\n * @param columns - Column metadata from the FlatGeobuf header\n * @param offset - Offset of the feature in the file\n * @returns Parsed properties with metadata\n */\nexport function parseProperties(\n  bb: ByteBuffer,\n  columns: HeaderMeta[\"columns\"],\n  offset: number\n): GeoJsonProperties & {\n  __byteLength: number;\n  __offset: number;\n} {\n  const feature = Feature.getRootAsFeature(bb);\n  const props = flatgeobufParseProperties(feature, columns);\n  return {\n    ...props,\n    __byteLength: bb.capacity(),\n    __offset: offset,\n  };\n}\n","import RTreeIndex, {\n  calculatePackedRTreeDetails,\n  OffsetAndLength,\n} from \"./rtree\";\nimport { ByteBuffer } from \"flatbuffers\";\nimport { GeometryType } from \"flatgeobuf/lib/mjs/generic.js\";\nimport {\n  Feature as GeoJSONFeature,\n  GeoJsonProperties,\n  Geometry,\n} from \"geojson\";\nimport { HeaderMeta } from \"flatgeobuf\";\nimport { fromByteBuffer } from \"flatgeobuf/lib/mjs/header-meta.js\";\nimport { FetchManager, FetchRangeFn } from \"./fetch-manager\";\nimport {\n  createQueryPlan,\n  executeQueryPlan,\n  QueryPlanOptions,\n  QueryPlanRequest,\n} from \"./query-plan\";\nimport {\n  parseFeatureData,\n  validateFeatureData,\n  FeatureWithMetadata,\n  parseProperties,\n} from \"./feature-parser\";\nimport {\n  QUERY_PLAN_DEFAULTS,\n  HEADER_FETCH_SIZE,\n  SIZE_PREFIX_LEN,\n  DEFAULT_CACHE_SIZE,\n  MAGIC_BYTES,\n} from \"./constants\";\nimport bytes from \"bytes\";\n\n/**\n * Represents a byte size that can be specified as either a number of bytes\n * or a string that will be parsed using the bytes module (e.g. \"5MB\", \"1GB\").\n */\nexport type ByteSize = number | string;\n\n/**\n * Represents a bounding box with minimum and maximum coordinates.\n * Used for spatial queries to specify the area to search for features.\n *\n * @example\n * ```typescript\n * const bbox: Envelope = {\n *   minX: -180, // westernmost coordinate\n *   minY: -90,  // southernmost coordinate\n *   maxX: 180,  // easternmost coordinate\n *   maxY: 90    // northernmost coordinate\n * };\n * ```\n */\nexport type Envelope = {\n  /** Westernmost coordinate (minimum X) */\n  minX: number;\n  /** Southernmost coordinate (minimum Y) */\n  minY: number;\n  /** Easternmost coordinate (maximum X) */\n  maxX: number;\n  /** Northernmost coordinate (maximum Y) */\n  maxY: number;\n};\n\n/**\n * Use to implement custom fetching logic, such as from an R2 bucket. Accepts\n * a byte range and returns a promise that resolves to an ArrayBuffer.\n */\nexport type FetchRangeByKeyFn = (\n  key: string,\n  range: [number, number | null]\n) => Promise<ArrayBuffer>;\n\n/**\n * Configuration options for creating a new FlatGeobufSource instance.\n */\nexport type CreateSourceOptions = {\n  /**\n   * Custom function for fetching byte ranges from the source.\n   * If not provided, the source will use the default fetch implementation.\n   */\n  fetchRangeFn?: FetchRangeByKeyFn;\n  /**\n   * Maximum size of the feature data cache in bytes.\n   * Can be specified as a number of bytes or a string (e.g. \"5MB\", \"1GB\").\n   * Defaults to 5MB.\n   */\n  maxCacheSize?: ByteSize;\n  /**\n   * Initial size of the header request in bytes.\n   * Can be specified as a number of bytes or a string (e.g. \"5MB\", \"1GB\").\n   * If not provided, defaults to HEADER_FETCH_SIZE.\n   * Use this when you know your dataset has a large spatial index.\n   */\n  initialHeaderRequestLength?: ByteSize;\n  /**\n   * Amount of space allowed between features before splitting requests.\n   * Can be specified as a number of bytes or a string (e.g. \"5MB\", \"1GB\").\n   * If not provided, defaults to QUERY_PLAN_DEFAULTS.overfetchBytes.\n   * Use this to control how aggressively ranges are merged.\n   */\n  overfetchBytes?: ByteSize;\n};\n\n/**\n * Parse a byte size that can be either a number or a string.\n * @param size - The size to parse, either as a number of bytes or a string (e.g. \"5MB\")\n * @returns The size in bytes as a number, or undefined if size is undefined or null\n */\nfunction parseByteSize(size?: ByteSize | null): number | undefined {\n  if (size === undefined || size === null) return undefined;\n  if (typeof size === \"number\") return size;\n  return bytes(size) ?? undefined;\n}\n\n/**\n * FlatGeobuf data source class. Provides methods to query features from a\n * flatgeobuf file. Features are streamed to minimize memory usage, and an\n * LRU cache is used to minimize network requests.\n *\n * You probably do not want to use this class directly. Instead, use the\n * `createSource` function to create a source instance.\n *\n * @example\n * ```typescript\n * const source = await createSource('https://example.com/data.fgb');\n * for await (const feature of source.getFeaturesAsync(bbox)) {\n *   console.log(feature);\n * }\n * ```\n */\nexport class FlatGeobufSource<T = GeoJSONFeature> {\n  /** Url for fgb, unless fetchRangeFn is specified  */\n  private url?: string;\n  /** Custom method provided to createSource used to fetch fgb byte ranges */\n  private fetchRangeFn?: FetchRangeFn;\n  /** fgb header metadata */\n  header: HeaderMeta;\n  /** Spatial index for bounding box queries */\n  private index: RTreeIndex;\n  /** offset from the start of the fgb to the first feature data byte */\n  private featureDataOffset: number;\n  /** Manages fetching and caching of byte ranges */\n  private fetchManager: FetchManager;\n  /** Amount of space allowed between features before splitting requests */\n  private overfetchBytes?: number;\n\n  /**\n   * Should not be called directly. Instead initialize using createSource(),\n   * which will generate the necessary metadata and spatial index.\n   */\n  constructor(\n    urlOrFetchRangeFn: string | FetchRangeFn,\n    header: HeaderMeta,\n    index: RTreeIndex,\n    featureDataOffset: number,\n    maxCacheSize: ByteSize = DEFAULT_CACHE_SIZE,\n    overfetchBytes?: ByteSize\n  ) {\n    if (typeof urlOrFetchRangeFn === \"string\") {\n      this.url = urlOrFetchRangeFn;\n    } else {\n      this.fetchRangeFn = urlOrFetchRangeFn;\n    }\n    this.header = header;\n    this.index = index;\n    this.featureDataOffset = featureDataOffset;\n    this.fetchManager = new FetchManager(\n      urlOrFetchRangeFn,\n      parseByteSize(maxCacheSize)\n    );\n    this.overfetchBytes = parseByteSize(overfetchBytes);\n  }\n\n  /**\n   * Get cache statistics\n   */\n  get cacheStats() {\n    return this.fetchManager.cacheStats;\n  }\n\n  /**\n   * Clear the feature data cache\n   */\n  clearCache() {\n    this.fetchManager.clearCache();\n  }\n\n  /**\n   * Bounds of the source, as determined from the spatial index.\n   */\n  get bounds() {\n    return {\n      minX: this.index.minX,\n      minY: this.index.minY,\n      maxX: this.index.maxX,\n      maxY: this.index.maxY,\n    };\n  }\n\n  /**\n   * Size of the index in bytes, which approximates the size this data source\n   * occupies in memory.\n   */\n  get indexSizeBytes() {\n    return this.index.byteLength;\n  }\n\n  /**\n   * Geometry type of the source.\n   */\n  get geometryType(): keyof typeof GeometryType {\n    return GeometryType[this.header.geometryType] as keyof typeof GeometryType;\n  }\n\n  /**\n   * Get features within a bounding box. Features are streamed to minimize\n   * memory usage. Each feature is deserialized to GeoJSON before being yielded.\n   *\n   * Memory usage is minimized by deserializing features to GeoJSON individually\n   * before yielding them. If you need to minimize memory usage in an\n   * environment like cloudflare workers, you need only concern yourself with\n   * the memory usage of the binary bytes fetched + the GeoJSON size of only\n   * the single largest feature being processed at any given time.\n   *\n   * @param bbox - Single bounding box or array of bounding boxes to query\n   * @param options - Query options\n   * @returns AsyncGenerator yielding GeoJSON features with metadata\n   *\n   * @example\n   * ```typescript\n   * const bbox = { minX: -180, minY: -90, maxX: 180, maxY: 90 };\n   * for await (const feature of source.getFeaturesAsync(bbox)) {\n   *   console.log(feature);\n   * }\n   * ```\n   */\n  async *getFeaturesAsync(\n    bbox: Envelope | Envelope[],\n    options?: QueryPlanOptions & {\n      /**\n       * If set true, the cache will be warmed by fetching all features in the\n       * bounding box. These features are not parsed or yielded.\n       */\n      warmCache?: boolean;\n    }\n  ): AsyncGenerator<FeatureWithMetadata<T>> {\n    // extract queryplanoptions and QueryExecutionOptions into separate objects\n    options = {\n      ...QUERY_PLAN_DEFAULTS,\n      ...options,\n      overfetchBytes: this.overfetchBytes ?? options?.overfetchBytes,\n    };\n    if (!Array.isArray(bbox)) {\n      bbox = [bbox];\n    }\n    const offsets: OffsetAndLength[] = [];\n    for (const b of bbox) {\n      if (!this.index) {\n        throw new Error(\"Spatial index not available\");\n      }\n      const results = await this.index.search(b.minX, b.minY, b.maxX, b.maxY);\n      for (const result of results) {\n        offsets.push(result);\n      }\n    }\n    const plan = createQueryPlan(offsets, this.featureDataOffset, options);\n    plan.requests.sort((a, b) => a.range[0] - b.range[0]);\n    for await (const [data, offset] of executeQueryPlan(\n      plan.requests,\n      this.fetchManager.fetchRange.bind(this.fetchManager),\n      options\n    )) {\n      if (options.warmCache) {\n        continue;\n      }\n      const bytes = new Uint8Array(data.buffer);\n      const bytesAligned = new Uint8Array(data.byteLength);\n      bytesAligned.set(\n        bytes.slice(data.byteOffset, data.byteOffset + data.byteLength),\n        0\n      );\n      const feature = parseFeatureData(offset, bytesAligned, this.header);\n      yield feature as unknown as FeatureWithMetadata<T>;\n    }\n  }\n\n  async countAndBytesForQuery(bbox: Envelope | Envelope[]) {\n    if (!this.index) {\n      throw new Error(\"Spatial index not available\");\n    }\n    if (!Array.isArray(bbox)) {\n      bbox = [bbox];\n    }\n    let offsetAndLengths: OffsetAndLength[] = [];\n    for (const b of bbox) {\n      const results = await this.index.search(b.minX, b.minY, b.maxX, b.maxY);\n      for (const result of results) {\n        // check if the range is already in the query plan\n        const existing = offsetAndLengths.find(\n          (p) => p[0] === result[0] && p[1] === result[1]\n        );\n        if (!existing) {\n          // if not, add it to the query plan\n          offsetAndLengths.push(result);\n        }\n      }\n    }\n    const plan = createQueryPlan(offsetAndLengths, this.featureDataOffset, {\n      overfetchBytes: 0,\n    });\n    return {\n      bytes: plan.bytes,\n      features: plan.features,\n    };\n  }\n\n  /**\n   * Scan all features in the source. Does not use the spatial index, but\n   * rather fetches the entire feature data section and iterates through it.\n   *\n   * Features are not deserialized to GeoJSON until they are yielded, reducing\n   * memory usage.\n   *\n   * @returns AsyncGenerator yielding GeoJSON features with metadata\n   *\n   * @example\n   * ```typescript\n   * for await (const feature of source.scanAllFeatures()) {\n   *   console.log(feature);\n   * }\n   * ```\n   */\n  async *scanAllFeatures(): AsyncGenerator<\n    T & {\n      properties: GeoJsonProperties & {\n        __byteLength: number;\n        __offset: number;\n      };\n    }\n  > {\n    const data = await this.fetchManager.fetchRange([\n      this.featureDataOffset,\n      null,\n    ]);\n    // iterate through the data, checking the size prefix to determine the\n    // length of each feature, parsing and yielding each feature\n    const view = new DataView(data);\n    let offset = 0;\n    while (offset < data.byteLength) {\n      const size = view.getUint32(offset, true);\n      const bytesAligned = new Uint8Array(data, offset, size + SIZE_PREFIX_LEN);\n      validateFeatureData(view, size + SIZE_PREFIX_LEN);\n      const feature = parseFeatureData(offset, bytesAligned, this.header);\n      yield feature as unknown as T & {\n        properties: GeoJsonProperties & {\n          __byteLength: number;\n          __offset: number;\n        };\n      };\n      offset += size + SIZE_PREFIX_LEN;\n    }\n  }\n\n  async *getFeatureProperties(): AsyncGenerator<{\n    properties: GeoJsonProperties & {\n      __byteLength: number;\n      __offset: number;\n    };\n    getFeature: () => T & {\n      properties: GeoJsonProperties & {\n        __byteLength: number;\n        __offset: number;\n      };\n    };\n  }> {\n    /**\n     * This method returns an async generator for feature properties only.\n     * This is useful for performance when you only need the properties of features.\n     * It avoids parsing geometry data, which can be expensive.\n     */\n    const data = await this.fetchManager.fetchRange([\n      this.featureDataOffset,\n      null,\n    ]);\n    const view = new DataView(data);\n    let offset = 0;\n    while (offset < data.byteLength) {\n      const size = view.getUint32(offset, true);\n      const bytesAligned = new Uint8Array(data, offset, size + SIZE_PREFIX_LEN);\n      const bb = new ByteBuffer(bytesAligned);\n      bb.setPosition(SIZE_PREFIX_LEN);\n      yield {\n        properties: parseProperties(bb, this.header.columns, offset),\n        getFeature: () => parseFeatureData(offset, bytesAligned, this.header),\n      };\n      offset += size + SIZE_PREFIX_LEN;\n    }\n  }\n}\n\n/**\n * Create a FlatGeobufSource from a URL or a custom fetchRange function. The\n * Promise will not be resolved until the source is fully initialized, loading\n * the header and spatial index data.\n *\n * @param urlOrKey - URL or key to fetch the source from. If a key is provided,\n * the fetchRangeFn will be used to fetch the source.\n * @param options - Options for creating the source.\n * @returns Promise<FlatGeobufSource<T>>\n */\nexport async function createSource<\n  T = GeoJSONFeature<Geometry, GeoJsonProperties>\n>(\n  urlOrKey: string,\n  options?: CreateSourceOptions\n): Promise<FlatGeobufSource<T>> {\n  const fetchRangeFnOption = options?.fetchRangeFn;\n  const maxCacheSize = parseByteSize(options?.maxCacheSize);\n  const initialHeaderRequestLength =\n    parseByteSize(options?.initialHeaderRequestLength) ?? HEADER_FETCH_SIZE;\n  const overfetchBytes = parseByteSize(options?.overfetchBytes);\n  const fetchRange =\n    fetchRangeFnOption && typeof fetchRangeFnOption === \"function\"\n      ? (range: [number, number | null]) => {\n          return fetchRangeFnOption(urlOrKey, range);\n        }\n      : (range: [number, number | null]) => {\n          return fetch(urlOrKey, {\n            headers: { Range: `bytes=${range[0]}-${range[1] ? range[1] : \"\"}` },\n          }).then((response) => response.arrayBuffer());\n        };\n\n  let headerData = await fetchRange([0, initialHeaderRequestLength]);\n\n  const view = new DataView(headerData);\n\n  // Verify magic bytes\n  for (let i = 0; i < MAGIC_BYTES.length; i++) {\n    if (view.getUint8(i) !== MAGIC_BYTES[i] && i < MAGIC_BYTES.length - 1) {\n      throw new Error(\n        \"Invalid FlatGeobuf file (magic bytes mismatch). \" + urlOrKey\n      );\n    }\n  }\n\n  // Create ByteBuffer from data after magic bytes\n  // Offset is magic bytes length + 4 bytes for the prefixed header size\n  const offset = MAGIC_BYTES.length + 4;\n  const bb = new ByteBuffer(new Uint8Array(headerData, offset));\n  // get header size. It should be an 32-bit unsigned integer directly following\n  // the magic bytes\n  const headerSize = view.getUint32(MAGIC_BYTES.length, true);\n  // @ts-ignore\n  const header = fromByteBuffer(bb);\n  const featuresCount = header.featuresCount;\n  const indexNodeSize = header.indexNodeSize;\n  if (!indexNodeSize) {\n    throw new Error(\"FlatGeobuf file does not contain a spatial index\");\n  }\n\n  const rtreeDetails = calculatePackedRTreeDetails(\n    featuresCount,\n    indexNodeSize\n  );\n  const indexSize = rtreeDetails.nodesByteSize;\n  const indexOffset = headerSize + MAGIC_BYTES.length + 4;\n\n  if (headerData.byteLength < indexOffset + indexSize) {\n    headerData = await fetchRange([0, indexOffset + indexSize]);\n  }\n  const indexData = headerData.slice(indexOffset, indexOffset + indexSize);\n  const index = new RTreeIndex(indexData, rtreeDetails);\n  const source = new FlatGeobufSource<T>(\n    fetchRange,\n    header,\n    index,\n    indexOffset + indexSize,\n    maxCacheSize,\n    overfetchBytes\n  );\n  return source;\n}\n","import { LRUCache } from \"lru-cache\";\nimport { createSource, CreateSourceOptions, FlatGeobufSource } from \"./source\";\nimport bytes from \"bytes\";\nimport {\n  Feature as GeoJSONFeature,\n  GeoJsonProperties,\n  Geometry,\n} from \"geojson\";\n\n/**\n * Configuration options for creating a new SourceCache instance.\n */\nexport type SourceCacheOptions = {\n  /**\n   * Callback called when a source is evicted from the cache. Receives (key, source, reason).\n   */\n  onEvict?: (\n    key: string,\n    source: FlatGeobufSource<any>,\n    reason: string\n  ) => void;\n  /**\n   * Default fetch function to use when creating sources. Will be merged with options passed to get().\n   */\n  fetchRangeFn?: CreateSourceOptions[\"fetchRangeFn\"];\n  /**\n   * Default maximum cache size for sources. Will be merged with options passed to get().\n   */\n  maxCacheSize?: CreateSourceOptions[\"maxCacheSize\"];\n  /**\n   * Default initial header request length. Will be merged with options passed to get().\n   */\n  initialHeaderRequestLength?: CreateSourceOptions[\"initialHeaderRequestLength\"];\n  /**\n   * Default overfetch bytes. Will be merged with options passed to get().\n   */\n  overfetchBytes?: CreateSourceOptions[\"overfetchBytes\"];\n};\n\n/**\n * Caches FlatGeobufSource instances to avoid re-initializing sources for the same URL.\n * Uses an LRU (Least Recently Used) cache strategy to manage memory usage.\n *\n * The cache size is calculated based on the total memory used by each source:\n * - Size of the spatial index (indexSizeBytes)\n * - Size of the feature data cache (cacheStats.maxSize)\n *\n * @example\n * ```typescript\n * const sourceCache = new SourceCache('64mb', {\n *   onEvict: (key, source, reason) => {\n *     console.log(`Evicted ${key} for reason: ${reason}`);\n *   }\n * });\n * const source = await sourceCache.get('https://example.com/data.fgb');\n * ```\n */\nexport class SourceCache {\n  private sizeLimitBytes: number;\n  private cache: LRUCache<string, FlatGeobufSource<any>>;\n  /**\n   * Map of keys to in-flight requests. Used to avoid creating the same source\n   * multiple times when there are concurrent requests for the same source.\n   */\n  private inFlightRequests: Map<string, Promise<FlatGeobufSource<any>>>;\n  private onEvict?: (\n    key: string,\n    source: FlatGeobufSource<any>,\n    reason: string\n  ) => void;\n  private defaultOptions?: CreateSourceOptions;\n\n  /**\n   * Create a new SourceCache instance.\n   *\n   * @param sizeLimit - Maximum size of the cache, parseable by the bytes library.\n   *                   Examples: '100MB', '1GB', '500KB'\n   * @param options - Optional configuration object\n   *   - onEvict: Callback called when a source is evicted from the cache. Receives (key, source, reason).\n   *   - fetchRangeFn: Default fetch function to use when creating sources. Will be merged with options passed to get().\n   *   - maxCacheSize: Default maximum cache size for sources. Will be merged with options passed to get().\n   *   - initialHeaderRequestLength: Default initial header request length. Will be merged with options passed to get().\n   *   - overfetchBytes: Default overfetch bytes. Will be merged with options passed to get().\n   * @throws Error if sizeLimit is invalid\n   */\n  constructor(sizeLimit: string, options?: SourceCacheOptions) {\n    const size = bytes(sizeLimit);\n    if (size === null) {\n      throw new Error(`Invalid size limit: ${sizeLimit}`);\n    }\n    this.sizeLimitBytes = size;\n    this.inFlightRequests = new Map();\n    this.onEvict = options?.onEvict;\n\n    // Store default options for merging with get() options\n    this.defaultOptions = {\n      fetchRangeFn: options?.fetchRangeFn,\n      maxCacheSize: options?.maxCacheSize,\n      initialHeaderRequestLength: options?.initialHeaderRequestLength,\n      overfetchBytes: options?.overfetchBytes,\n    };\n\n    this.cache = new LRUCache({\n      maxSize: this.sizeLimitBytes,\n      sizeCalculation: (source, key) => {\n        const size = source.indexSizeBytes + source.cacheStats.maxSize;\n        return size;\n      },\n      dispose: (value, key, reason) => {\n        if (this.onEvict) {\n          this.onEvict(key, value, reason);\n        }\n      },\n    });\n  }\n\n  /**\n   * Get a FlatGeobufSource instance for the given key. If the source is already\n   * cached, returns the cached instance. Otherwise, creates a new source and\n   * caches it.\n   *\n   * @param key - URL or key to fetch the source from\n   * @param options - Options for creating the source if it needs to be created. These will be merged with default options from the constructor.\n   * @returns Promise resolving to a FlatGeobufSource instance\n   *\n   * @example\n   * ```typescript\n   * const sourceCache = new SourceCache('64mb');\n   * // Basic usage with default options\n   * const source = await sourceCache.get('https://example.com/data.fgb');\n   *\n   * // Customize feature data cache size\n   * const source = await sourceCache.get('https://example.com/data.fgb', {\n   *   maxCacheSize: 1024 * 1024 // 1MB feature cache\n   * });\n   *\n   * // Use custom fetch implementation (e.g. for R2 bucket)\n   * const source = await sourceCache.get('fgb-object-key', {\n   *   fetchRangeFn: async (key, range) => {\n   *     const response = await fetch(`https://my-bucket.r2.dev/${key}`, {\n   *       headers: { Range: `bytes=${range[0]}-${range[1] ?? ''}` }\n   *     });\n   *     return response.arrayBuffer();\n   *   }\n   * });\n   *\n   * // With default fetch function set in constructor\n   * const sourceCache = new SourceCache('64mb', {\n   *   fetchRangeFn: async (key, range) => {\n   *     const response = await fetch(`https://uploads.seasketch.org/${key}`, {\n   *       headers: { Range: `bytes=${range[0]}-${range[1] ?? ''}` }\n   *     });\n   *     return response.arrayBuffer();\n   *   }\n   * });\n   * // Now you can use get() without specifying fetchRangeFn each time\n   * const source = await sourceCache.get('my-data.fgb');\n   *\n   * // Query features within a bounding box\n   * const bbox = { minX: -180, minY: -90, maxX: 180, maxY: 90 };\n   * for await (const feature of source.getFeaturesAsync(bbox)) {\n   *   console.log(feature);\n   * }\n   * ```\n   */\n  async get<T = GeoJSONFeature<Geometry, GeoJsonProperties>>(\n    key: string,\n    options?: CreateSourceOptions\n  ): Promise<FlatGeobufSource<T>> {\n    // Check cache first\n    if (this.cache.has(key)) {\n      return this.cache.get(key)!;\n    }\n\n    // Check for in-flight request\n    const inFlightRequest = this.inFlightRequests.get(key);\n    if (inFlightRequest) {\n      return inFlightRequest as Promise<FlatGeobufSource<T>>;\n    }\n\n    // Merge default options with provided options (provided options take precedence)\n    const mergedOptions: CreateSourceOptions = {\n      ...this.defaultOptions,\n      ...options,\n    };\n\n    // Create new request\n    const request = (async () => {\n      try {\n        const source = await createSource<T>(key, mergedOptions);\n        this.cache.set(key, source);\n        return source;\n      } finally {\n        // Clean up in-flight request map\n        this.inFlightRequests.delete(key);\n      }\n    })();\n\n    // Store request in in-flight map\n    this.inFlightRequests.set(key, request);\n    return request;\n  }\n}\n"]}