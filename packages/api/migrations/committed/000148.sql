--! Previous: sha1:3c730ee942c1f5f8187c03e6819c50c3234ce32d
--! Hash: sha1:0bf0f833cbc2c8b521f37439c9a61ea326608164

-- Enter migration here
alter table projects add column if not exists is_offline_enabled boolean default false;
revoke update (is_offline_enabled) on projects from anon;
revoke update (is_offline_enabled) on projects from seasketch_user;

create or replace function enable_offline_support (project_id int, enable boolean)
  returns projects
  security definer
  language sql
  as $$
    update projects set is_offline_enabled = enable where projects.id = project_id and session_is_superuser() returning *; 
  $$;

grant execute on function enable_offline_support to seasketch_user;

create or replace function surveys_basemaps(survey surveys)
  returns setof basemaps
  STABLE
  language sql
  as $$
    select * from basemaps where id = any(select distinct(unnest(array_cat(
      (select array_agg(c) from (
        select unnest(map_basemaps) from form_elements where form_id = (
          select id from forms where survey_id = survey.id) and layout = any('{MAP_STACKED,MAP_SIDEBAR_LEFT,MAP_SIDEBAR_RIGHT,MAP_FULLSCREEN,MAP_TOP}')
        ) as dt(c)
      ),
      (select array_agg(basemaps) from (
        select jsonb_array_elements(component_settings->'basemaps') as basemaps from form_elements where form_id = (
          select id from forms where survey_id = survey.id
        ) and component_settings->'basemaps' is not null
      ) as f)::int[]
    ))));
  $$;

grant execute on function surveys_basemaps to anon;

comment on function surveys_basemaps is '@simpleCollections only';

alter table basemaps add column if not exists is_offline_enabled boolean not null default false;

-- drop table if exists offline_tile_settings cascade;
create table if not exists offline_tile_settings (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_id int not null references projects(id),
  basemap_id int references basemaps(id),
  region geometry(polygon, 4326) not null,
  max_z int not null default 11 check(max_z >= 6 and max_z <= 16),
  max_shoreline_z int check(max_shoreline_z > max_z and max_shoreline_z <= 16),
  unique(project_id, basemap_id)
);
drop index if exists offline_tile_settings_unique_project_default;
CREATE UNIQUE INDEX offline_tile_settings_unique_project_default ON offline_tile_settings (project_id, (basemap_id IS NULL)) WHERE basemap_id IS NULL;
comment on table offline_tile_settings is '@simpleCollections only';

create index on offline_tile_settings(project_id);
create index on offline_tile_settings(basemap_id);

grant all on table offline_tile_settings to seasketch_user;

alter table offline_tile_settings enable row level security;

drop policy if exists offline_tile_settings_admin on offline_tile_settings;
CREATE POLICY offline_tile_settings_admin ON public.offline_tile_settings USING (public.session_is_admin(project_id)) WITH CHECK (public.session_is_admin(project_id));

alter table basemaps add column if not exists use_default_offline_tile_settings boolean not null default true;

alter table offline_tile_settings alter column max_shoreline_z set default 14;
alter table offline_tile_settings alter column max_z set default 11;

-- TODO: make sure to create default settings if tile package is requested before settings are created/adjusted

drop table if exists offline_tile_packages cascade;
DROP TYPE IF EXISTS offline_tile_package_status;
CREATE TYPE offline_tile_package_status AS ENUM ('QUEUED', 'GENERATING', 'UPLOADING', 'COMPLETE', 'FAILED');

DROP TYPE IF EXISTS offline_tile_package_source_type;
CREATE TYPE offline_tile_package_source_type AS ENUM ('vector', 'raster', 'raster-dem');

create table if not exists offline_tile_packages (
  id uuid DEFAULT public.uuid_generate_v4() NOT NULL,
  project_id int not null references projects(id),
  data_source_url text not null,
  is_mapbox_hosted boolean not null,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  status offline_tile_package_status not null default 'QUEUED',
  total_tiles int not null default 0,
  tiles_fetched int not null default 0,
  bytes int not null default 0,
  region geometry(polygon, 4326) not null,
  max_z int not null default 11 check(max_z >= 6 and max_z <= 16),
  max_shoreline_z int check(max_shoreline_z > max_z and max_shoreline_z <= 16),
  source_type offline_tile_package_source_type not null,
  error text,
  primary key(id)
);

DROP TRIGGER if EXISTS offline_tile_packages_on_insert_1 on offline_tile_packages;
CREATE OR REPLACE FUNCTION offline_tile_packages_insert_trigger()
RETURNS trigger AS $$
BEGIN
  PERFORM graphile_worker.add_job('createTilePackage', json_build_object('packageId', NEW.id), queue_name := 'create-tile-package', max_attempts := 1);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER offline_tile_packages_on_insert_1
AFTER INSERT ON offline_tile_packages
FOR EACH ROW
EXECUTE PROCEDURE offline_tile_packages_insert_trigger();

drop function if exists update_basemap_offline_tile_settings;

create or replace function update_basemap_offline_tile_settings("projectId" int, "basemapId" int, use_default boolean, "maxZ" int, "maxShorelineZ" int)
  returns offline_tile_settings
  language plpgsql
  security definer
  as $$
    declare
      existing_settings_id int;
      return_value offline_tile_settings;
    begin
      if session_is_admin("projectId") then
        update basemaps set use_default_offline_tile_settings = use_default where id = "basemapId";
        if use_default then
          select id into existing_settings_id from offline_tile_settings where project_id = "projectId" and basemap_id is null;
          if existing_settings_id is null then
            insert into offline_tile_settings (project_id, max_z, max_shoreline_z, region) values ("projectId", "maxZ", "maxShorelineZ", (select region from projects where id = "projectId")) returning * into return_value;
          else
            update offline_tile_settings set max_z = "maxZ", max_shoreline_z = "maxShorelineZ" where id = existing_settings_id returning * into return_value;
          end if;
        else
          select id into existing_settings_id from offline_tile_settings where project_id = "projectId" and basemap_id = "basemapId";
          if existing_settings_id is null then
            insert into offline_tile_settings (project_id, basemap_id, max_z, max_shoreline_z, region) values ("projectId", "basemapId", "maxZ", "maxShorelineZ", (select region from projects where id = "projectId")) returning * into return_value;
          else
            update offline_tile_settings set max_z = "maxZ", max_shoreline_z = "maxShorelineZ" where id = existing_settings_id returning * into return_value;
          end if;
        end if;
        return return_value;
      else
        raise exception 'Permission denied';
      end if;
    end;
  $$;

grant execute on function update_basemap_offline_tile_settings to seasketch_user;

CREATE OR REPLACE FUNCTION cleanup_tile_package() RETURNS trigger AS
$$BEGIN
  PERFORM graphile_worker.add_job('cleanupDeletedTilePackage', json_build_object('packageId', OLD.id));
  RETURN OLD;
END;$$ LANGUAGE plpgsql;

CREATE TRIGGER on_delete_offline_tile_package_001
   AFTER DELETE ON offline_tile_packages FOR EACH ROW
   EXECUTE PROCEDURE cleanup_tile_package();


grant select on offline_tile_packages to anon;

alter table offline_tile_packages enable row level security;

drop policy if exists offline_tile_packages_admin on offline_tile_packages;
CREATE POLICY offline_tile_packages_admin ON public.offline_tile_packages for select USING (public.session_is_admin(project_id));
create index on offline_tile_packages(project_id);

comment on table offline_tile_packages is '@simpleConnections only';

create or replace function generate_offline_tile_package("projectId" int, "dataSourceUrl" text, "maxZ" int, "maxShorelineZ" int, "sourceType" offline_tile_package_source_type)
  returns offline_tile_packages
  language plpgsql
  security definer
  as $$
    declare
      pkg offline_tile_packages;
    begin
      if session_is_admin("projectId") and (select is_offline_enabled from projects where id = "projectId") = true then
        insert into offline_tile_packages (project_id, region, data_source_url, is_mapbox_hosted, max_z, max_shoreline_z, source_type) values (
          "projectId",
          (select region from projects where id = "projectId"),
          "dataSourceUrl",
          true,
          "maxZ",
          "maxShorelineZ",
          "sourceType"
        ) returning * into pkg;
        return pkg;
      else
        raise exception 'Permission denied';  
      end if;
      return pkg;
    end;
  $$;

grant execute on function generate_offline_tile_package to seasketch_user;

create or replace function delete_offline_tile_package("id" uuid)
  returns offline_tile_packages
  language sql
  security definer
  as $$
    delete from offline_tile_packages where offline_tile_packages.id = delete_offline_tile_package.id and session_is_admin(offline_tile_packages.project_id) returning *;
  $$;

  grant execute on function delete_offline_tile_package to seasketch_user;

create or replace function offline_tile_packages_job_status(pkg offline_tile_packages)
  returns offline_tile_package_status
  language plpgsql
  security definer
  STABLE
  as $$
    declare
      job_error text;
    begin
      select last_error into job_error from graphile_worker.jobs where payload->>'packageId' = pkg.id::text;
      if job_error is null then
        return pkg.status;
      else
        return 'FAILED';
      end if;
    end;
  $$;

grant execute on function offline_tile_packages_job_status to anon;

comment on column offline_tile_packages.status is '@deprecated Use jobStatus instead';

create or replace function offline_tile_packages_job_errors(pkg offline_tile_packages)
  returns text
  language plpgsql
  security definer
  STABLE
  as $$
    declare
      job_error text;
    begin
      select last_error into job_error from graphile_worker.jobs where payload->>'packageId' = pkg.id::text;
      if pkg.error is null then
        return job_error;
      end if;
      return pkg.error;
    end;
  $$;

grant execute on function offline_tile_packages_job_errors to anon;

comment on column offline_tile_packages.error is '@deprecated Use jobErrors instead'
