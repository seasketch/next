--! Previous: sha1:e3e075792f9c7f7a2a7bc846ae9e083d68c0b0de
--! Hash: sha1:0ac4708539ed31664b8ad7ba769ce30ca817785d

-- Enter migration here
-- Basemaps

drop type if exists basemap_type cascade;
CREATE TYPE basemap_type AS ENUM (
  'MAPBOX',
  'RASTER_URL_TEMPLATE'
  -- 'RASTER_TILEJSON' TBD
);

comment on type basemap_type is 'SeaSketch supports multiple different basemap types. All must eventually be compiled down to a mapbox gl style.';

drop table if exists basemaps cascade;
create table basemaps (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_id integer REFERENCES projects (id) ON DELETE CASCADE,
  name text not null,
  type basemap_type not null,
  url text not null,
  tile_size integer not null default 256,
  labels_layer_id text,
  thumbnail text not null,
  attribution text,
  terrain_url text,
  terrain_tile_size integer not null default 512,
  terrain_max_zoom integer not null default 14,
  terrain_optional boolean not null default true,
  terrain_visibility_default boolean not null default true,
  terrain_exaggeration numeric not null default 1
);

create index on basemaps(project_id);

comment on column basemaps.project_id is 'If not set, the basemap will be considered a "Shared Basemap" that can be added to any project. Otherwise it is private to the given proejct. Only superusers can create Shared Basemaps.';
comment on column basemaps.name is 'Label shown in the basemap picker interface';
comment on column basemaps.url is 'For MAPBOX types, this can be a mapbox://-style url or a link to a custom mapbox gl style. For RASTER_URL_TEMPLATE, it should be a url template conforming to the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)';
comment on column basemaps.tile_size is 'For use with RASTER_URL_TEMPLATE types. See the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)';
comment on column basemaps.labels_layer_id is 'Identify the labels layer lowest in the stack so that overlay layers may be placed underneath.';
comment on column basemaps.thumbnail is 'Square thumbnail will be used to identify the basemap';
comment on column basemaps.attribution is 'Optional attribution to show at the bottom of the map. Will be overriden by the attribution specified in the gl-style in the case of MAPBOX types.';
comment on column basemaps.terrain_url is 'Terrain data source url. Leave blank to disable 3d terrain. See [mapbox gl style terrain documentation](https://docs.mapbox.com/mapbox-gl-js/style-spec/terrain/).';
comment on column basemaps.terrain_optional is 'If set to false, terrain will always be on. Otherwise the user will be given a toggle switch.';

-- Add basemaps model to access_control_lists table
alter table access_control_lists add column if not exists basemap_id int unique 
  references basemaps (id) on delete cascade;

alter table access_control_lists drop constraint if exists access_control_list_has_related_model; 
alter table access_control_lists add constraint 
  access_control_list_has_related_model CHECK (
    (
      (sketch_class_id IS NOT NULL)::integer + 
      (forum_id_read IS NOT NULL)::integer + 
      (forum_id_write IS NOT NULL)::integer + 
      (table_of_contents_item_id IS NOT NULL)::integer +
      (basemap_id IS NOT NULL)::integer
    ) = 1
  );

-- Triggers should be added for all models to create acls with defaults
create or replace function create_basemap_acl() returns trigger
    security definer
    language plpgsql
    AS $$
begin
  if new.project_id is not null then
  insert into
    access_control_lists(project_id, basemap_id, type)
    values(new.project_id, new.id, 'public'::access_control_list_type);
  end if;
  return new;
end;
$$;

-- Enable the trigger function
create trigger trig_create_basemap_acl after insert on basemaps 
  for each row execute function create_basemap_acl();


-- Add an index to make acl lookups by basemap_id efficient
create unique index on access_control_lists (basemap_id) 
  where basemap_id is not null;

drop table if exists projects_shared_basemaps;
create table projects_shared_basemaps (
  basemap_id integer not null references basemaps (id) on delete cascade,
  project_id integer not null references projects (id) on delete cascade,
  unique(basemap_id, project_id)
);

drop type if exists optional_basemap_layers_group_type cascade;
create type optional_basemap_layers_group_type as enum (
  'NONE',
  'RADIO',
  'SELECT'
);

drop table if exists optional_basemap_layers cascade;
create table optional_basemap_layers (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  basemap_id integer not null references basemaps (id) on delete cascade,
  layers text[] not null default array[]::text[],
  default_visibility boolean not null default true,
  name text not null,
  description text,
  group_type optional_basemap_layers_group_type not null default 'NONE'::optional_basemap_layers_group_type,
  group_label text,
  metadata jsonb
);


CREATE OR REPLACE FUNCTION check_optional_basemap_layers_columns()
  RETURNS trigger 
  language plpgsql
  AS
$$
  begin
    if new.group_type != 'NONE'::optional_basemap_layers_group_type and new.group_label is null then
      raise 'group_label must be set unless group_type is NONE';
    end if;
    return new;
  end;
$$;


CREATE TRIGGER check_optional_basemap_layers
    BEFORE UPDATE OR INSERT ON optional_basemap_layers
    FOR EACH ROW
    EXECUTE PROCEDURE check_optional_basemap_layers_columns();

comment on table optional_basemap_layers is '
@omit all
@simpleCollections only
Available only for MapBox GL Style-based basemaps. Specifies optional components of the basemap that can be shown or hidden.
';

comment on column optional_basemap_layers.layers is 'IDs for layers in the gl style that will be toggled by this option.';
comment on column optional_basemap_layers.name is 'Label that will be given in the UI';
comment on column optional_basemap_layers.group_type is 'Specify RADIO or SELECT if this option should be presented as a group of options. Useful for mutually exclusive views like different years for the same dataset, or a heatmap display of density for multiple species where a single species must be chosen from a list. If left null, the option will be treated as standalone.';
comment on column optional_basemap_layers.group_label is 'If RADIO or SELECT group_type is specified, this label will be used for the form input. It also specifies _which_ group this option should be shown for. Use the UpdateBasemapLayerRadioGroupLabel mutation to update the label for multiple options at once.';
comment on column optional_basemap_layers.metadata is 'JSON representation of a ProseMirror document with layer metadata.';

create index on optional_basemap_layers (basemap_id);

create or replace function update_basemap_layer_radio_group_label("basemapId" integer, old_label text, new_label text)
  returns optional_basemap_layers
  language sql
  security definer
  as $$
    update 
      optional_basemap_layers 
    set group_label = new_label 
    where 
      group_label = old_label and 
      basemap_id = "basemapId" and
      session_is_admin((select project_id from basemaps where basemaps.id = "basemapId"))
    returning 
      optional_basemap_layers.*;
  $$;

comment on function update_basemap_layer_radio_group_label is '
Update the group_label for multiple OptionalBasemapLayers
';

-- Interactivity settings
drop table if exists basemap_interactivity_settings cascade;
create table basemap_interactivity_settings (
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  basemap_id integer not null references basemaps (id) on delete cascade,
  layers text[] not null default array[]::text[],
  type interactivity_type not null default 'NONE'::interactivity_type,
  short_template text,
  long_template text,
  cursor cursor_type not null default 'AUTO'::cursor_type
);

create index on basemap_interactivity_settings (basemap_id);

comment on table basemap_interactivity_settings is '
@omit all
@simpleCollections only
Used to specify hover effects and popups for vector layers within a basemap. Only works for MAPBOX-type basemaps.
';

comment on column basemap_interactivity_settings.layers is 'Interactivity could apply to more than one layer.';
comment on column basemap_interactivity_settings.short_template is 'Mustache template populated with feature attributes. Used for banners and tooltips.';
comment on column basemap_interactivity_settings.short_template is 'Mustache template populated with feature attributes. Used for popup and fixed-block types.';

grant all on basemaps to seasketch_user;
grant select on basemaps to anon;

grant all on optional_basemap_layers to seasketch_user;
grant select on optional_basemap_layers to anon;

grant execute on function update_basemap_layer_radio_group_label to seasketch_user;

grant all on basemap_interactivity_settings to seasketch_user;
grant select on basemap_interactivity_settings to anon;

grant select on projects_shared_basemaps to anon;
grant all on projects_shared_basemaps to seasketch_user;

alter table basemaps enable row level security;
create policy basemaps_select on basemaps for select using (
  basemaps.project_id is null or
  (
    session_has_project_access(basemaps.project_id) and 
    session_on_acl((
      select access_control_lists.id from access_control_lists where basemap_id = basemaps.id
    ))
  )
);
create policy basemaps_admin on basemaps for all using (session_is_admin(project_id)) with check (session_is_admin(project_id));

alter table optional_basemap_layers enable row level security;
-- Nothing confidential here
create policy optional_basemap_layers_select on optional_basemap_layers for select using (true);
create policy optional_basemap_layers_admin on optional_basemap_layers for all using (session_is_admin((select project_id from basemaps where id = basemap_id)) or session_is_superuser()) with check (session_is_admin((select project_id from basemaps where id = basemap_id)) or session_is_superuser());

alter table basemap_interactivity_settings enable row level security;
-- Nothing confidential here
create policy basemap_interactivity_settings_select on basemap_interactivity_settings for select using (true);
create policy basemap_interactivity_settings_admin on basemap_interactivity_settings for all using (session_is_admin((select project_id from basemaps where id = basemap_id))  or session_is_superuser()) with check (session_is_admin((select project_id from basemaps where id = basemap_id)) or session_is_superuser());

alter table projects_shared_basemaps enable row level security;
-- Nothing confidential here
create policy projects_shared_basemaps_select on projects_shared_basemaps for select using (true);
create policy projects_shared_basemaps_admin on projects_shared_basemaps for all using (true) with check (session_is_admin(project_id));

create function projects_basemaps(project projects)
  returns setof basemaps
  security definer
  language sql
  stable
  as $$
    select 
      * 
    from 
      basemaps 
    where 
      session_has_project_access(project.id) and 
      (
        basemaps.project_id = project.id or 
        basemaps.id in (
          select 
            basemap_id 
          from 
            projects_shared_basemaps 
          where 
            projects_shared_basemaps.project_id = project.id
        )
      );
  $$;

create function shared_basemaps()
  returns basemaps
  language sql
  security definer
  stable
  as $$
    select * from basemaps where project_id is null;
  $$;

grant execute on function shared_basemaps to anon;
comment on function shared_basemaps is '
@simpleCollections only
';

grant execute on function projects_basemaps to anon;

comment on function projects_basemaps is '
@simpleCollections only
';

DROP POLICY IF EXISTS access_control_lists_update ON public.access_control_lists;
create POLICY "access_control_lists_update" on access_control_lists FOR UPDATE
      TO seasketch_user
      USING ((session_is_admin(( SELECT sketch_classes.project_id
   FROM sketch_classes
  WHERE (sketch_classes.id = access_control_lists.sketch_class_id))) OR session_is_admin(( SELECT forums.project_id
   FROM forums
  WHERE ((forums.id = access_control_lists.forum_id_read) OR (forums.id = access_control_lists.forum_id_write)))))
  OR (
    session_is_admin((select project_id from table_of_contents_items where table_of_contents_items.id = access_control_lists.table_of_contents_item_id))
  ) OR (
    session_is_admin((select project_id from basemaps where basemaps.id = access_control_lists.basemap_id))
  )
  
  )
      WITH CHECK ((session_is_admin(( SELECT sketch_classes.project_id
   FROM sketch_classes
  WHERE (sketch_classes.id = access_control_lists.sketch_class_id))) OR session_is_admin(( SELECT forums.project_id
   FROM forums
  WHERE ((forums.id = access_control_lists.forum_id_read) OR (forums.id = access_control_lists.forum_id_write)))))
  or session_is_admin((select project_id from table_of_contents_items where table_of_contents_items.id = access_control_lists.table_of_contents_item_id))
  OR session_is_admin((select project_id from basemaps where basemaps.id = access_control_lists.basemap_id))
  
  );
