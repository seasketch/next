-- Enter migration here

-- schema for storing google maps 2d tile api session tokens

create table if not exists google_maps_tile_api_sessions (
  id integer primary key generated by default as identity,
  map_type text not null,
  language text not null,
  region text not null,
  expires_at timestamptz not null,
  session text not null,
  tile_width integer not null,
  tile_height integer not null,
  image_format text not null
);


create or replace function gmapsSatelliteSession()
  returns google_maps_tile_api_sessions
  stable
  security definer
  language sql
  as $$
    select * from google_maps_tile_api_sessions
    where map_type = 'satellite'
      and expires_at > now() limit 1
  $$;

grant execute on function gmapsSatelliteSession() to anon;

-- Function saves new session to the table, deleting other records with
-- matching map_type, language, and region.
create or replace function update_google_maps_tile_api_session(
  p_map_type text,
  p_language text,
  p_region text,
  p_expires_at timestamptz,
  p_session text,
  p_tile_width integer,
  p_tile_height integer,
  p_image_format text
)
  returns void
  language plpgsql
  as $$
    begin
      -- Delete existing records with the same map_type, language, and region
      delete from google_maps_tile_api_sessions
      where map_type = p_map_type
        and language = p_language
        and region = p_region;

      -- Insert the new session record
      insert into google_maps_tile_api_sessions (
        map_type,
        language,
        region,
        expires_at,
        session,
        tile_width,
        tile_height,
        image_format
      ) values (
        p_map_type,
        p_language,
        p_region,
        p_expires_at,
        p_session,
        p_tile_width,
        p_tile_height,
        p_image_format
      );
    end;

  $$;