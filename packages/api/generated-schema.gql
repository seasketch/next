"""All input for the create `Project` mutation."""
input CreateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Project` to be created by this mutation."""
  project: ProjectInput!
}

"""The output of our create `Project` mutation."""
type CreateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Project` that was created by this mutation."""
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Project`."""
  createProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """Updates a single `Project` using a unique key and a patch."""
  updateProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInput!
  ): UpdateProjectPayload

  """Updates a single `Project` using its globally unique id and a patch."""
  updateProjectByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectByNodeIdInput!
  ): UpdateProjectPayload

  """Updates a single `Project` using a unique key and a patch."""
  updateProjectBySubdomain(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectBySubdomainInput!
  ): UpdateProjectPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Project implements Node {
  defaultLocale: SupportedLocale
  description: String
  id: Int!

  """Featured projects may be given prominent placement on the homepage."""
  isFeatured: Boolean

  """
  Whether the project is visible to non-admins. Projects that are unpublished
  can be thought of as in a staging state before the admin has chosen to invite end-users.
  """
  isPublished: Boolean

  """
  If a logoUrl is provided, it will link to this url in a new window if provided.
  """
  logoLink: String

  """
  URL referencing an image that will be used to represent the project. Will be displayed at 48x48 pixels
  """
  logoUrl: String
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `ProjectMember`."""
  projectMembersConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectMemberCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectMember`."""
    orderBy: [ProjectMembersOrderBy!] = [NATURAL]
  ): ProjectMembersConnection!

  """Will resolve to {subdomain}.seasketch.org and cannot be changed"""
  subdomain: String!
  url: String
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isFeatured` field."""
  isFeatured: Boolean

  """Checks for equality with the object’s `isPublished` field."""
  isPublished: Boolean

  """Checks for equality with the object’s `subdomain` field."""
  subdomain: String
}

"""An input for mutations affecting `Project`"""
input ProjectInput {
  name: String!

  """Will resolve to {subdomain}.seasketch.org and cannot be changed"""
  subdomain: String!
}

type ProjectMember {
  isAdmin: Boolean

  """Reads a single `Project` that is related to this `ProjectMember`."""
  project: Project
  projectId: Int!
  userId: Int!
}

"""
A condition to be used against `ProjectMember` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectMemberCondition {
  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""A connection to a list of `ProjectMember` values."""
type ProjectMembersConnection {
  """
  A list of edges which contains the `ProjectMember` and cursor to aid in pagination.
  """
  edges: [ProjectMembersEdge!]!

  """A list of `ProjectMember` objects."""
  nodes: [ProjectMember]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectMember` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectMember` edge in the connection."""
type ProjectMembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectMember` at the end of the edge."""
  node: ProjectMember
}

"""Methods to use when ordering `ProjectMember`."""
enum ProjectMembersOrderBy {
  NATURAL
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""
Represents an update to a `Project`. Fields that are set will be updated.
"""
input ProjectPatch {
  description: String

  """Featured projects may be given prominent placement on the homepage."""
  isFeatured: Boolean

  """
  Whether the project is visible to non-admins. Projects that are unpublished
  can be thought of as in a staging state before the admin has chosen to invite end-users.
  """
  isPublished: Boolean

  """
  If a logoUrl is provided, it will link to this url in a new window if provided.
  """
  logoLink: String

  """
  URL referencing an image that will be used to represent the project. Will be displayed at 48x48 pixels
  """
  logoUrl: String
  name: String
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  ID_ASC
  ID_DESC
  IS_FEATURED_ASC
  IS_FEATURED_DESC
  IS_PUBLISHED_ASC
  IS_PUBLISHED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SUBDOMAIN_ASC
  SUBDOMAIN_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  project(id: Int!): Project

  """Reads a single `Project` using its globally unique `ID`."""
  projectByNodeId(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    nodeId: ID!
  ): Project
  projectBySubdomain(subdomain: String!): Project

  """Reads and enables pagination through a set of `Project`."""
  projectsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  supportedLocale(code: String!): SupportedLocale

  """Reads a single `SupportedLocale` using its globally unique `ID`."""
  supportedLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SupportedLocale`.
    """
    nodeId: ID!
  ): SupportedLocale

  """Reads a set of `SupportedLocale`."""
  supportedLocales(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SupportedLocale!]
}

type SupportedLocale implements Node {
  code: String!
  label: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""All input for the `updateProjectByNodeId` mutation."""
input UpdateProjectByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Project` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!
}

"""All input for the `updateProjectBySubdomain` mutation."""
input UpdateProjectBySubdomainInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!

  """Will resolve to {subdomain}.seasketch.org and cannot be changed"""
  subdomain: String!
}

"""All input for the `updateProject` mutation."""
input UpdateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!
}

"""The output of our update `Project` mutation."""
type UpdateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Project` that was updated by this mutation."""
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
