enum AccessControlListType {
  ADMINS_ONLY
  GROUP
  PUBLIC
}

"""
Access Control Lists can be associated with SketchClasses, Forums, and 
potentially other application resources to allow admins to control access based
on admin privileges or group membership. The behavior of the system is primarily
driven by the `type` and `groups` settings.

The [AUTHORIZATION.md file](https://github.com/seasketch/next/blob/master/packages/db/AUTHORIZATION.md#content-managed-by-an-access-control-list)
details how ACL functionality was added to the Forums type, and can be used as a
template to add ACL features to new types if needed.

"""
type Acl implements Node {
  """Reads a single `Basemap` that is related to this `Acl`."""
  basemap: Basemap
  basemapId: Int
  forumIdRead: Int
  forumIdWrite: Int

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Group!]
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `SketchClass` that is related to this `Acl`."""
  sketchClass: SketchClass
  sketchClassId: Int

  """Reads a single `TableOfContentsItem` that is related to this `Acl`."""
  tableOfContentsItem: TableOfContentsItem
  tableOfContentsItemId: Int

  """Control whether access control is PUBLIC, ADMINS_ONLY, or GROUP"""
  type: AccessControlListType!
}

"""Represents an update to a `Acl`. Fields that are set will be updated."""
input AclPatch {
  """Control whether access control is PUBLIC, ADMINS_ONLY, or GROUP"""
  type: AccessControlListType
}

enum ActivityStatsPeriod {
  _1_YEAR
  _24HRS
  _30_DAYS
  _6_MONTHS
  _7_DAYS
  ALL_TIME
}

"""All input for the `addGroupToAcl` mutation."""
input AddGroupToAclInput {
  aclId: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
}

"""The output of our `addGroupToAcl` mutation."""
type AddGroupToAclPayload {
  acl: Acl

  """Reads a single `Basemap` that is related to this `Acl`."""
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Acl`."""
  sketchClass: SketchClass

  """Reads a single `TableOfContentsItem` that is related to this `Acl`."""
  tableOfContentsItem: TableOfContentsItem
}

"""All input for the `addUserToGroup` mutation."""
input AddUserToGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
  userId: Int
}

"""The output of our `addUserToGroup` mutation."""
type AddUserToGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `addValidChildSketchClass` mutation."""
input AddValidChildSketchClassInput {
  child: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parent: Int
}

"""The output of our `addValidChildSketchClass` mutation."""
type AddValidChildSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `alternateLanguageLabelsForFormElement` mutation."""
input AlternateLanguageLabelsForFormElementInput {
  alternateLanguageSettings: JSON
  attrId: Int
  attrValue: JSON

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `alternateLanguageLabelsForFormElement` mutation."""
type AlternateLanguageLabelsForFormElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type ApiKey implements Node {
  createdAt: Datetime!
  createdBy: Int!
  expiresAt: Datetime
  id: UUID!
  isRevoked: Boolean!
  label: String!
  lastUsedAt: Datetime

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `ApiKey`."""
  project: Project
  projectId: Int!

  """Reads a single `User` that is related to this `ApiKey`."""
  userByCreatedBy: User
}

"""
A condition to be used against `ApiKey` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ApiKeyCondition {
  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""A connection to a list of `ApiKey` values."""
type ApiKeysConnection {
  """
  A list of edges which contains the `ApiKey` and cursor to aid in pagination.
  """
  edges: [ApiKeysEdge!]!

  """A list of `ApiKey` objects."""
  nodes: [ApiKey!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ApiKey` you could get from the connection."""
  totalCount: Int!
}

"""A `ApiKey` edge in the connection."""
type ApiKeysEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApiKey` at the end of the edge."""
  node: ApiKey!
}

"""Methods to use when ordering `ApiKey`."""
enum ApiKeysOrderBy {
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""All input for the `approveParticipant` mutation."""
input ApproveParticipantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `approveParticipant` mutation."""
type ApproveParticipantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

enum ArcgisFeatureLayerFetchStrategy {
  AUTO
  RAW
  TILED
}

"""An input for mutations affecting `ArcgisImportItem`"""
input ArcgisImportItemInput {
  id: Int
  isFolder: Boolean
  parentId: String
  sourceId: Int
  stableId: String
  sublayerId: Int
  sublayerType: SublayerType
  title: String
}

"""An input for mutations affecting `ArcgisImportSource`"""
input ArcgisImportSourceInput {
  fetchStrategy: ArcgisFeatureLayerFetchStrategy
  id: Int
  type: ArcgisSourceType
  url: String
}

enum ArcgisSourceType {
  ARCGIS_DYNAMIC_MAPSERVER
  ARCGIS_RASTER_TILES
  ARCGIS_VECTOR
}

"""
Admins can upload new version of data sources, and these are tracked from this
table. This is used to track changes to data sources over time with a version
number and optional changelog.
"""
type ArchivedDataSource implements Node {
  bounds: [BigFloat]

  """
  Optional changelog so that admins can explain what changed in the new version.
  """
  changelog: String
  createdAt: Datetime
  dataLayerId: Int!

  """
  Reads a single `DataSource` that is related to this `ArchivedDataSource`.
  """
  dataSource: DataSource
  dataSourceId: Int!
  dynamicMetadata: Boolean!

  """
  Mapbox GL style from the associated data layer at the time of upload of the
  new version. This is tracked in case the data source is significantly changed
  such that rolling back to a previous version also requires style changes
  """
  mapboxGlStyle: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  projectId: Int!
  sourceLayer: String

  """Array of sprite ids used in the archived mapbox_gl_style."""
  spriteIds: [Int]

  """Reads and enables pagination through a set of `Sprite`."""
  sprites(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Sprite!]
  sublayer: String
  sublayerType: SublayerType

  """
  Version number of the data source. Incremented each time a new version is uploaded.
  """
  version: Int!
}

"""
A condition to be used against `ArchivedDataSource` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArchivedDataSourceCondition {
  """Checks for equality with the object’s `dataSourceId` field."""
  dataSourceId: Int
}

"""A connection to a list of `ArchivedDataSource` values."""
type ArchivedDataSourcesConnection {
  """
  A list of edges which contains the `ArchivedDataSource` and cursor to aid in pagination.
  """
  edges: [ArchivedDataSourcesEdge!]!

  """A list of `ArchivedDataSource` objects."""
  nodes: [ArchivedDataSource!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ArchivedDataSource` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ArchivedDataSource` edge in the connection."""
type ArchivedDataSourcesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArchivedDataSource` at the end of the edge."""
  node: ArchivedDataSource!
}

"""Methods to use when ordering `ArchivedDataSource`."""
enum ArchivedDataSourcesOrderBy {
  DATA_SOURCE_ID_ASC
  DATA_SOURCE_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `archiveResponses` mutation."""
input ArchiveResponsesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ids: [Int]
  makeArchived: Boolean
}

"""The output of our `archiveResponses` mutation."""
type ArchiveResponsesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  surveyResponses: [SurveyResponse!]
}

type Basemap implements Node {
  """Reads a single `Acl` that is related to this `Basemap`."""
  acl: Acl

  """
  Optional attribution to show at the bottom of the map. Will be overriden by
  the attribution specified in the gl-style in the case of MAPBOX types.
  """
  attribution: String
  description: String
  id: Int!

  """
  Reads a single `InteractivitySetting` that is related to this `Basemap`.
  """
  interactivitySettings: InteractivitySetting
  interactivitySettingsId: Int!
  isArcgisTiledMapservice: Boolean!

  """
  Used to indicate whether the basemap is included in the public basemap
  listing. Useful for hiding an option temporarily, or adding a basemap to the
  project which will only be used in surveys.
  
  """
  isDisabled: Boolean!

  """
  Identify the labels layer lowest in the stack so that overlay layers may be placed underneath.
  """
  labelsLayerId: String

  """Reads and enables pagination through a set of `MapBookmark`."""
  mapBookmarksBySelectedBasemapConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapBookmarkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MapBookmark`."""
    orderBy: [MapBookmarksOrderBy!] = [NATURAL]
  ): MapBookmarksConnection!
  maxzoom: Int

  """Label shown in the basemap picker interface"""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Only available on supported projects by authorized users"""
  offlineSupportInformation: OfflineSupportInformation

  """Reads and enables pagination through a set of `OfflineTileSetting`."""
  offlineTileSettings(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfflineTileSettingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `OfflineTileSetting`."""
    orderBy: [OfflineTileSettingsOrderBy!]
  ): [OfflineTileSetting!]!

  """Reads and enables pagination through a set of `OptionalBasemapLayer`."""
  optionalBasemapLayers(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OptionalBasemapLayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `OptionalBasemapLayer`."""
    orderBy: [OptionalBasemapLayersOrderBy!]
  ): [OptionalBasemapLayer!]!

  """Reads a single `Project` that is related to this `Basemap`."""
  project: Project

  """
  If not set, the basemap will be considered a "Shared Basemap" that can be
  added to any project. Otherwise it is private to the given proejct. Only
  superusers can create Shared Basemaps.
  """
  projectId: Int

  """Reads and enables pagination through a set of `ProjectsSharedBasemap`."""
  projectsSharedBasemapsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectsSharedBasemapCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectsSharedBasemap`."""
    orderBy: [ProjectsSharedBasemapsOrderBy!] = [NATURAL]
  ): ProjectsSharedBasemapsConnection!

  """Reads and enables pagination through a set of `FormElement`."""
  relatedFormElements(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [FormElement!]
  surveysOnly: Boolean!
  terrainExaggeration: BigFloat!
  terrainMaxZoom: Int!

  """
  If set to false, terrain will always be on. Otherwise the user will be given a toggle switch.
  """
  terrainOptional: Boolean!
  terrainTileSize: Int!

  """
  Terrain data source url. Leave blank to disable 3d terrain. See [mapbox gl style terrain
  documentation](https://docs.mapbox.com/mapbox-gl-js/style-spec/terrain/).
  """
  terrainUrl: String
  terrainVisibilityDefault: Boolean!

  """Square thumbnail will be used to identify the basemap"""
  thumbnail: String!

  """
  For use with RASTER_URL_TEMPLATE types. See the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  tileSize: Int!
  translatedProps: JSON!
  type: BasemapType!

  """
  For MAPBOX types, this can be a mapbox://-style url or a link to a custom
  mapbox gl style. For RASTER_URL_TEMPLATE, it should be a url template
  conforming to the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  url: String!
  useDefaultOfflineTileSettings: Boolean!
}

"""
A condition to be used against `Basemap` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BasemapCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `interactivitySettingsId` field."""
  interactivitySettingsId: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""An input for mutations affecting `Basemap`"""
input BasemapInput {
  """
  Optional attribution to show at the bottom of the map. Will be overriden by
  the attribution specified in the gl-style in the case of MAPBOX types.
  """
  attribution: String
  description: String
  id: Int
  isArcgisTiledMapservice: Boolean

  """
  Used to indicate whether the basemap is included in the public basemap
  listing. Useful for hiding an option temporarily, or adding a basemap to the
  project which will only be used in surveys.
  
  """
  isDisabled: Boolean

  """
  Identify the labels layer lowest in the stack so that overlay layers may be placed underneath.
  """
  labelsLayerId: String
  maxzoom: Int

  """Label shown in the basemap picker interface"""
  name: String!

  """
  If not set, the basemap will be considered a "Shared Basemap" that can be
  added to any project. Otherwise it is private to the given proejct. Only
  superusers can create Shared Basemaps.
  """
  projectId: Int
  surveysOnly: Boolean
  terrainExaggeration: BigFloat
  terrainMaxZoom: Int

  """
  If set to false, terrain will always be on. Otherwise the user will be given a toggle switch.
  """
  terrainOptional: Boolean
  terrainTileSize: Int

  """
  Terrain data source url. Leave blank to disable 3d terrain. See [mapbox gl style terrain
  documentation](https://docs.mapbox.com/mapbox-gl-js/style-spec/terrain/).
  """
  terrainUrl: String
  terrainVisibilityDefault: Boolean

  """Square thumbnail will be used to identify the basemap"""
  thumbnail: Upload

  """
  For use with RASTER_URL_TEMPLATE types. See the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  tileSize: Int
  translatedProps: JSON
  type: BasemapType!

  """
  For MAPBOX types, this can be a mapbox://-style url or a link to a custom
  mapbox gl style. For RASTER_URL_TEMPLATE, it should be a url template
  conforming to the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  url: String!
  useDefaultOfflineTileSettings: Boolean
}

"""
Represents an update to a `Basemap`. Fields that are set will be updated.
"""
input BasemapPatch {
  """
  Optional attribution to show at the bottom of the map. Will be overriden by
  the attribution specified in the gl-style in the case of MAPBOX types.
  """
  attribution: String
  description: String
  id: Int
  interactivitySettingsId: Int
  isArcgisTiledMapservice: Boolean

  """
  Used to indicate whether the basemap is included in the public basemap
  listing. Useful for hiding an option temporarily, or adding a basemap to the
  project which will only be used in surveys.
  
  """
  isDisabled: Boolean

  """
  Identify the labels layer lowest in the stack so that overlay layers may be placed underneath.
  """
  labelsLayerId: String
  maxzoom: Int

  """Label shown in the basemap picker interface"""
  name: String

  """
  If not set, the basemap will be considered a "Shared Basemap" that can be
  added to any project. Otherwise it is private to the given proejct. Only
  superusers can create Shared Basemaps.
  """
  projectId: Int
  surveysOnly: Boolean
  terrainExaggeration: BigFloat
  terrainMaxZoom: Int

  """
  If set to false, terrain will always be on. Otherwise the user will be given a toggle switch.
  """
  terrainOptional: Boolean
  terrainTileSize: Int

  """
  Terrain data source url. Leave blank to disable 3d terrain. See [mapbox gl style terrain
  documentation](https://docs.mapbox.com/mapbox-gl-js/style-spec/terrain/).
  """
  terrainUrl: String
  terrainVisibilityDefault: Boolean

  """Square thumbnail will be used to identify the basemap"""
  thumbnail: Upload

  """
  For use with RASTER_URL_TEMPLATE types. See the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  tileSize: Int
  translatedProps: JSON
  type: BasemapType

  """
  For MAPBOX types, this can be a mapbox://-style url or a link to a custom
  mapbox gl style. For RASTER_URL_TEMPLATE, it should be a url template
  conforming to the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  url: String
  useDefaultOfflineTileSettings: Boolean
}

"""A connection to a list of `Basemap` values."""
type BasemapsConnection {
  """
  A list of edges which contains the `Basemap` and cursor to aid in pagination.
  """
  edges: [BasemapsEdge!]!

  """A list of `Basemap` objects."""
  nodes: [Basemap!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Basemap` you could get from the connection."""
  totalCount: Int!
}

"""A `Basemap` edge in the connection."""
type BasemapsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Basemap` at the end of the edge."""
  node: Basemap!
}

"""Methods to use when ordering `Basemap`."""
enum BasemapsOrderBy {
  ID_ASC
  ID_DESC
  INTERACTIVITY_SETTINGS_ID_ASC
  INTERACTIVITY_SETTINGS_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""
SeaSketch supports multiple different basemap types. All must eventually be compiled down to a mapbox gl style.
"""
enum BasemapType {
  MAPBOX
  RASTER_URL_TEMPLATE
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type BookmarkPayload {
  bookmark: MapBookmark
  bookmarkId: UUID!
}

type CacheableOfflineAsset {
  """
  If provided, is a "bare" url with query strings such as access_token
  stripped out.
  """
  cacheKey: String
  type: CacheableOfflineAssetType!
  url: String!
}

enum CacheableOfflineAssetType {
  FONT
  IMAGE
  JSON
  MAPBOX_GL_STYLE
  SPRITE
}

"""All input for the `cancelBackgroundJob` mutation."""
input CancelBackgroundJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  jobId: UUID
  projectId: Int
}

"""The output of our `cancelBackgroundJob` mutation."""
type CancelBackgroundJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `clearFormElementStyle` mutation."""
input ClearFormElementStyleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formElementId: Int
}

"""The output of our `clearFormElementStyle` mutation."""
type ClearFormElementStylePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formElement: FormElement

  """An edge for our `FormElement`. May be used by Relay 1."""
  formElementEdge(
    """The method to use when ordering `FormElement`."""
    orderBy: [FormElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormElementsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

input ClippingLayerInput {
  """
  If provided, features used for clipping will be filtered based on this
  JSON-encoded OGC Common Query Language (CQL2) query
  """
  cql2Query: JSON

  """
  If provided, this layer will be associated with this geography. Either
  templateId or dataLayerId must be provided
  """
  dataLayerId: Int

  """
  Type of operation to perform on the clipping layer (e.g. intersect, difference).
  """
  operationType: GeographyLayerOperation!

  """
  If provided, this template layer will be cloned into the project. Either
  templateId or dataLayerId must be provided
  """
  templateId: String
}

"""
Community guidelines can be set by project admins with standards for using the 
discussion forums. Users will be shown this content before making their first
post, and they will be shown when posts are hidden by moderators for violating
community standards.

"""
type CommunityGuideline implements Node {
  """
  JSON contents are expected to be used with a system like DraftJS on the client.
  
  """
  content: JSON!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `CommunityGuideline`."""
  project: Project
  projectId: Int!
}

"""An input for mutations affecting `CommunityGuideline`"""
input CommunityGuidelineInput {
  """
  JSON contents are expected to be used with a system like DraftJS on the client.
  
  """
  content: JSON
  projectId: Int!
}

"""
Represents an update to a `CommunityGuideline`. Fields that are set will be updated.
"""
input CommunityGuidelinePatch {
  """
  JSON contents are expected to be used with a system like DraftJS on the client.
  
  """
  content: JSON
}

"""All input for the `computeProjectGeographyHash` mutation."""
input ComputeProjectGeographyHashInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  geogId: Int
}

"""The output of our `computeProjectGeographyHash` mutation."""
type ComputeProjectGeographyHashPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  string: String
}

"""All input for the `confirmOnboarded` mutation."""
input ConfirmOnboardedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `confirmOnboarded` mutation."""
type ConfirmOnboardedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `confirmProjectInviteWithSurveyToken` mutation."""
input ConfirmProjectInviteWithSurveyTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `confirmProjectInviteWithSurveyToken` mutation."""
type ConfirmProjectInviteWithSurveyTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `confirmProjectInviteWithVerifiedEmail` mutation."""
input ConfirmProjectInviteWithVerifiedEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `confirmProjectInviteWithVerifiedEmail` mutation."""
type ConfirmProjectInviteWithVerifiedEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `convertEsriFeatureLayerToSeasketchHosted` mutation."""
input ConvertEsriFeatureLayerToSeasketchHostedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tableOfContentsItemId: Int
}

"""The output of our `convertEsriFeatureLayerToSeasketchHosted` mutation."""
type ConvertEsriFeatureLayerToSeasketchHostedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Project` that is related to this `ProjectBackgroundJob`.
  """
  project: Project
  projectBackgroundJob: ProjectBackgroundJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `copyAppearance` mutation."""
input CopyAppearanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  copyFromId: Int
  formElementId: Int
}

"""The output of our `copyAppearance` mutation."""
type CopyAppearancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formElement: FormElement

  """An edge for our `FormElement`. May be used by Relay 1."""
  formElementEdge(
    """The method to use when ordering `FormElement`."""
    orderBy: [FormElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormElementsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `copyDataLibraryTemplateItem` mutation."""
input CopyDataLibraryTemplateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectSlug: String
  templateId: String
}

"""The output of our `copyDataLibraryTemplateItem` mutation."""
type CopyDataLibraryTemplateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItem: TableOfContentsItem

  """An edge for our `TableOfContentsItem`. May be used by Relay 1."""
  tableOfContentsItemEdge(
    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsEdge
}

type CopySketchTocItemResults {
  folders: [SketchFolder!]
  parentId: Int!
  sketches: [Sketch!]

  """
  Returns the parent collection (if exists) so that the client can select an updated updatedAt
  """
  updatedCollection: Sketch
}

type CreateApiKeyResponse {
  token: String!
}

"""All input for the create `Basemap` mutation."""
input CreateBasemapInput {
  """The `Basemap` to be created by this mutation."""
  basemap: BasemapInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Basemap` mutation."""
type CreateBasemapPayload {
  """The `Basemap` that was created by this mutation."""
  basemap: Basemap

  """An edge for our `Basemap`. May be used by Relay 1."""
  basemapEdge(
    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `InteractivitySetting` that is related to this `Basemap`.
  """
  interactivitySettings: InteractivitySetting

  """Reads a single `Project` that is related to this `Basemap`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CommunityGuideline` mutation."""
input CreateCommunityGuidelineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CommunityGuideline` to be created by this mutation."""
  communityGuideline: CommunityGuidelineInput!
}

"""The output of our create `CommunityGuideline` mutation."""
type CreateCommunityGuidelinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CommunityGuideline` that was created by this mutation."""
  communityGuideline: CommunityGuideline

  """Reads a single `Project` that is related to this `CommunityGuideline`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `DataLayer` mutation."""
input CreateDataLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DataLayer` to be created by this mutation."""
  dataLayer: DataLayerInput!
}

"""The output of our create `DataLayer` mutation."""
type CreateDataLayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataLayer` that was created by this mutation."""
  dataLayer: DataLayer

  """An edge for our `DataLayer`. May be used by Relay 1."""
  dataLayerEdge(
    """The method to use when ordering `DataLayer`."""
    orderBy: [DataLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataLayersEdge

  """Reads a single `DataSource` that is related to this `DataLayer`."""
  dataSource: DataSource

  """
  Reads a single `InteractivitySetting` that is related to this `DataLayer`.
  """
  interactivitySettings: InteractivitySetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `DataSource` mutation."""
input CreateDataSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DataSource` to be created by this mutation."""
  dataSource: DataSourceInput!
}

"""The output of our create `DataSource` mutation."""
type CreateDataSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataSource` that was created by this mutation."""
  dataSource: DataSource

  """An edge for our `DataSource`. May be used by Relay 1."""
  dataSourceEdge(
    """The method to use when ordering `DataSource`."""
    orderBy: [DataSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createDataUpload` mutation."""
input CreateDataUploadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  contentType: String
  filename: String
  projectId: Int
  replaceTableOfContentsItemId: Int
}

"""The output of our `createDataUpload` mutation."""
type CreateDataUploadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  dataUploadTask: DataUploadTask

  """An edge for our `DataUploadTask`. May be used by Relay 1."""
  dataUploadTaskEdge(
    """The method to use when ordering `DataUploadTask`."""
    orderBy: [DataUploadTasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataUploadTasksEdge

  """
  Reads a single `ProjectBackgroundJob` that is related to this `DataUploadTask`.
  """
  projectBackgroundJob: ProjectBackgroundJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormElement` mutation."""
input CreateFormElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormElement` to be created by this mutation."""
  formElement: FormElementInput!
}

"""The output of our create `FormElement` mutation."""
type CreateFormElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormElement` that was created by this mutation."""
  formElement: FormElement

  """An edge for our `FormElement`. May be used by Relay 1."""
  formElementEdge(
    """The method to use when ordering `FormElement`."""
    orderBy: [FormElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormElementsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormLogicCondition` mutation."""
input CreateFormLogicConditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormLogicCondition` to be created by this mutation."""
  formLogicCondition: FormLogicConditionInput!
}

"""The output of our create `FormLogicCondition` mutation."""
type CreateFormLogicConditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormLogicCondition` that was created by this mutation."""
  formLogicCondition: FormLogicCondition

  """An edge for our `FormLogicCondition`. May be used by Relay 1."""
  formLogicConditionEdge(
    """The method to use when ordering `FormLogicCondition`."""
    orderBy: [FormLogicConditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormLogicConditionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormLogicRule` mutation."""
input CreateFormLogicRuleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormLogicRule` to be created by this mutation."""
  formLogicRule: FormLogicRuleInput!
}

"""The output of our create `FormLogicRule` mutation."""
type CreateFormLogicRulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormLogicRule` that was created by this mutation."""
  formLogicRule: FormLogicRule

  """An edge for our `FormLogicRule`. May be used by Relay 1."""
  formLogicRuleEdge(
    """The method to use when ordering `FormLogicRule`."""
    orderBy: [FormLogicRulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormLogicRulesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createFormTemplateFromSketchClass` mutation."""
input CreateFormTemplateFromSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sketchClassId: Int
  templateName: String
  templateType: FormTemplateType
}

"""The output of our `createFormTemplateFromSketchClass` mutation."""
type CreateFormTemplateFromSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

"""All input for the `createFormTemplateFromSurvey` mutation."""
input CreateFormTemplateFromSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  surveyId: Int
  templateName: String
  templateType: FormTemplateType
}

"""The output of our `createFormTemplateFromSurvey` mutation."""
type CreateFormTemplateFromSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

"""All input for the create `Forum` mutation."""
input CreateForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Forum` to be created by this mutation."""
  forum: ForumInput!
}

"""The output of our create `Forum` mutation."""
type CreateForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Forum` that was created by this mutation."""
  forum: Forum

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type CreateGeographiesPayload {
  """The newly created geography"""
  geographies: [Geography!]!
}

input CreateGeographyArgs {
  """
  Used to identify Geographies that are created using a particular wizard
  flow like "Pick an EEZ" or "Terrestrial Areas".
  """
  clientTemplate: String

  """Clipping layers to associate with this geography"""
  clippingLayers: [ClippingLayerInput]!

  """Name of the geography"""
  name: String!

  """Slug of the project to create the geography in"""
  slug: String!

  """Translated strings"""
  translatedProps: JSON
}

"""All input for the create `GeographyClippingLayer` mutation."""
input CreateGeographyClippingLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GeographyClippingLayer` to be created by this mutation."""
  geographyClippingLayer: GeographyClippingLayerInput!
}

"""The output of our create `GeographyClippingLayer` mutation."""
type CreateGeographyClippingLayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `GeographyClippingLayer`.
  """
  dataLayer: DataLayer

  """The `GeographyClippingLayer` that was created by this mutation."""
  geographyClippingLayer: GeographyClippingLayer

  """An edge for our `GeographyClippingLayer`. May be used by Relay 1."""
  geographyClippingLayerEdge(
    """The method to use when ordering `GeographyClippingLayer`."""
    orderBy: [GeographyClippingLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeographyClippingLayersEdge

  """
  Reads a single `Geography` that is related to this `GeographyClippingLayer`.
  """
  projectGeography: Geography

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Geography` mutation."""
input CreateGeographyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Geography` to be created by this mutation."""
  geography: GeographyInput!
}

"""The output of our create `Geography` mutation."""
type CreateGeographyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Geography` that was created by this mutation."""
  geography: Geography

  """Reads a single `Project` that is related to this `Geography`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Group` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Group` to be created by this mutation."""
  group: GroupInput!
}

"""The output of our create `Group` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was created by this mutation."""
  group: Group

  """Reads a single `Project` that is related to this `Group`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `InteractivitySetting` mutation."""
input CreateInteractivitySettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `InteractivitySetting` to be created by this mutation."""
  interactivitySetting: InteractivitySettingInput!
}

"""The output of our create `InteractivitySetting` mutation."""
type CreateInteractivitySettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InteractivitySetting` that was created by this mutation."""
  interactivitySetting: InteractivitySetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createMapBookmark` mutation."""
input CreateMapBookmarkInput {
  basemapName: String
  basemapOptionalLayerStates: JSON
  cameraOptions: JSON
  clientGeneratedThumbnail: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  isPublic: Boolean
  layerNames: JSON
  mapDimensions: [Int]
  selectedBasemap: Int
  sidebarState: JSON
  sketchNames: JSON
  slug: String
  style: JSON
  visibleDataLayers: [String]
  visibleSketches: [Int]
}

"""The output of our `createMapBookmark` mutation."""
type CreateMapBookmarkPayload {
  """Reads a single `Basemap` that is related to this `MapBookmark`."""
  basemapBySelectedBasemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  mapBookmark: MapBookmark

  """An edge for our `MapBookmark`. May be used by Relay 1."""
  mapBookmarkEdge(
    """The method to use when ordering `MapBookmark`."""
    orderBy: [MapBookmarksOrderBy!] = [NATURAL]
  ): MapBookmarksEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `OfflineTileSetting` mutation."""
input CreateOfflineTileSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OfflineTileSetting` to be created by this mutation."""
  offlineTileSetting: OfflineTileSettingInput!
}

"""The output of our create `OfflineTileSetting` mutation."""
type CreateOfflineTileSettingPayload {
  """Reads a single `Basemap` that is related to this `OfflineTileSetting`."""
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OfflineTileSetting` that was created by this mutation."""
  offlineTileSetting: OfflineTileSetting

  """Reads a single `Project` that is related to this `OfflineTileSetting`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `OptionalBasemapLayer` mutation."""
input CreateOptionalBasemapLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OptionalBasemapLayer` to be created by this mutation."""
  optionalBasemapLayer: OptionalBasemapLayerInput!
}

"""The output of our create `OptionalBasemapLayer` mutation."""
type CreateOptionalBasemapLayerPayload {
  """
  Reads a single `Basemap` that is related to this `OptionalBasemapLayer`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OptionalBasemapLayer` that was created by this mutation."""
  optionalBasemapLayer: OptionalBasemapLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createProject` mutation."""
input CreateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  slug: String!
}

"""All input for the create `ProjectInviteGroup` mutation."""
input CreateProjectInviteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectInviteGroup` to be created by this mutation."""
  projectInviteGroup: ProjectInviteGroupInput!
}

"""The output of our create `ProjectInviteGroup` mutation."""
type CreateProjectInviteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `ProjectInviteGroup`."""
  group: Group

  """
  Reads a single `ProjectInvite` that is related to this `ProjectInviteGroup`.
  """
  invite: ProjectInvite

  """The `ProjectInviteGroup` that was created by this mutation."""
  projectInviteGroup: ProjectInviteGroup

  """An edge for our `ProjectInviteGroup`. May be used by Relay 1."""
  projectInviteGroupEdge(
    """The method to use when ordering `ProjectInviteGroup`."""
    orderBy: [ProjectInviteGroupsOrderBy!] = [NATURAL]
  ): ProjectInviteGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createProjectInvites` mutation."""
input CreateProjectInvitesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupNames: [String]
  makeAdmin: Boolean
  projectId: Int
  projectInviteOptions: [ProjectInviteOptionInput]
  sendEmailNow: Boolean
}

"""The output of our `createProjectInvites` mutation."""
type CreateProjectInvitesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  projectInvites: [ProjectInvite!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our `createProject` mutation."""
type CreateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ProjectsSharedBasemap` mutation."""
input CreateProjectsSharedBasemapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectsSharedBasemap` to be created by this mutation."""
  projectsSharedBasemap: ProjectsSharedBasemapInput!
}

"""The output of our create `ProjectsSharedBasemap` mutation."""
type CreateProjectsSharedBasemapPayload {
  """
  Reads a single `Basemap` that is related to this `ProjectsSharedBasemap`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectsSharedBasemap` that was created by this mutation."""
  projectsSharedBasemap: ProjectsSharedBasemap

  """An edge for our `ProjectsSharedBasemap`. May be used by Relay 1."""
  projectsSharedBasemapEdge(
    """The method to use when ordering `ProjectsSharedBasemap`."""
    orderBy: [ProjectsSharedBasemapsOrderBy!] = [NATURAL]
  ): ProjectsSharedBasemapsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createRemoteGeojsonSource` mutation."""
input CreateRemoteGeojsonSourceInput {
  bounds: [BigFloat]

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  geostats: JSON
  slug: String
  url: String
}

"""The output of our `createRemoteGeojsonSource` mutation."""
type CreateRemoteGeojsonSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItem: TableOfContentsItem

  """An edge for our `TableOfContentsItem`. May be used by Relay 1."""
  tableOfContentsItemEdge(
    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsEdge
}

"""All input for the `createRemoteMvtSource` mutation."""
input CreateRemoteMvtSourceInput {
  bounds: [BigFloat]

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  featureBounds: [BigFloat]
  geostats: JSON
  maxZoom: Int
  minZoom: Int
  projectId: Int
  sourceLayers: [String]
  url: String
}

"""The output of our `createRemoteMvtSource` mutation."""
type CreateRemoteMvtSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItems: [TableOfContentsItem!]
}

"""All input for the `createSketchClassFromTemplate` mutation."""
input CreateSketchClassFromTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  templateSketchClassId: Int
}

"""The output of our `createSketchClassFromTemplate` mutation."""
type CreateSketchClassFromTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormElement` that is related to this `SketchClass`."""
  formElement: FormElement

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the `createSketchFolder` mutation."""
input CreateSketchFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  collectionId: Int
  folderId: Int
  name: String
  slug: String
}

"""The output of our `createSketchFolder` mutation."""
type CreateSketchFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  sketchFolder: SketchFolder

  """An edge for our `SketchFolder`. May be used by Relay 1."""
  sketchFolderEdge(
    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersEdge
}

"""All input for the create `SurveyInvitedGroup` mutation."""
input CreateSurveyInvitedGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SurveyInvitedGroup` to be created by this mutation."""
  surveyInvitedGroup: SurveyInvitedGroupInput!
}

"""The output of our create `SurveyInvitedGroup` mutation."""
type CreateSurveyInvitedGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyInvitedGroup`."""
  survey: Survey

  """The `SurveyInvitedGroup` that was created by this mutation."""
  surveyInvitedGroup: SurveyInvitedGroup
}

"""All input for the `createSurveyInvites` mutation."""
input CreateSurveyInvitesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupNames: [String]
  includeProjectInvite: Boolean
  makeAdmin: Boolean
  surveyId: Int
  surveyInviteOptions: [SurveyInviteOptionsInput]
}

"""The output of our `createSurveyInvites` mutation."""
type CreateSurveyInvitesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  surveyInvites: [SurveyInvite!]
}

"""All input for the `createSurveyJumpRule` mutation."""
input CreateSurveyJumpRuleInput {
  booleanOperator: FormLogicOperator

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formElementId: Int
  jumpToId: Int
  operator: FieldRuleOperator
}

"""The output of our `createSurveyJumpRule` mutation."""
type CreateSurveyJumpRulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formLogicRule: FormLogicRule

  """An edge for our `FormLogicRule`. May be used by Relay 1."""
  formLogicRuleEdge(
    """The method to use when ordering `FormLogicRule`."""
    orderBy: [FormLogicRulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormLogicRulesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createSurveyResponse` mutation."""
input CreateSurveyResponseInput {
  bypassedSubmissionControl: Boolean

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  draft: Boolean
  facilitated: Boolean
  offlineId: UUID
  practice: Boolean
  responseData: JSON
  surveyId: Int
}

"""The output of our `createSurveyResponse` mutation."""
type CreateSurveyResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey
  surveyResponse: SurveyResponse

  """An edge for our `SurveyResponse`. May be used by Relay 1."""
  surveyResponseEdge(
    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesEdge
}

"""All input for the `createSurveyResponseV2` mutation."""
input CreateSurveyResponseV2Input {
  bypassedSubmissionControl: Boolean

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  draft: Boolean
  facilitated: Boolean
  offlineId: UUID
  practice: Boolean
  responseData: JSON
  surveyId: Int
}

"""The output of our `createSurveyResponseV2` mutation."""
type CreateSurveyResponseV2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `TableOfContentsItem` mutation."""
input CreateTableOfContentsItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TableOfContentsItem` to be created by this mutation."""
  tableOfContentsItem: TableOfContentsItemInput!
}

"""The output of our create `TableOfContentsItem` mutation."""
type CreateTableOfContentsItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TableOfContentsItem` that was created by this mutation."""
  tableOfContentsItem: TableOfContentsItem

  """An edge for our `TableOfContentsItem`. May be used by Relay 1."""
  tableOfContentsItemEdge(
    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsEdge
}

"""All input for the `createVisibilityLogicRule` mutation."""
input CreateVisibilityLogicRuleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formElementId: Int
}

"""The output of our `createVisibilityLogicRule` mutation."""
type CreateVisibilityLogicRulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formLogicRule: FormLogicRule

  """An edge for our `FormLogicRule`. May be used by Relay 1."""
  formLogicRuleEdge(
    """The method to use when ordering `FormLogicRule`."""
    orderBy: [FormLogicRulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormLogicRulesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

enum CursorType {
  AUTO
  CROSSHAIR
  DEFAULT
  POINTER
}

type DashboardStat {
  dataSources: Int
  forumPosts: Int
  projects: Int
  sketches: Int
  surveyResponses: Int
  uploadedBytes: BigInt
  uploads: Int
  users: Int
}

"""
Data layers represent multiple MapBox GL Style layers tied to a single source. 
These layers could also be called "operational layers" in that they are meant to
be overlaid on a basemap.

The layers can appear tied to a TableOfContentsItem or be part of rich features 
associated with a basemap.

"""
type DataLayer implements Node {
  """Reads and enables pagination through a set of `ArchivedDataSource`."""
  archivedSources(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [ArchivedDataSource!]

  """Reads a single `DataSource` that is related to this `DataLayer`."""
  dataSource: DataSource
  dataSourceId: Int!

  """
  Reads and enables pagination through a set of `GeographyClippingLayer`.
  """
  geographyClippingLayersConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeographyClippingLayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GeographyClippingLayer`."""
    orderBy: [GeographyClippingLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeographyClippingLayersConnection!
  id: Int!

  """
  Reads a single `InteractivitySetting` that is related to this `DataLayer`.
  """
  interactivitySettings: InteractivitySetting
  interactivitySettingsId: Int!

  """
  JSON array of MapBox GL Style layers. Layers should not specify an id or
  sourceId. These will be automatically generated at runtime.
  
  """
  mapboxGlStyles: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  projectId: Int!

  """
  Determines z-ordering of layer in relation to layers in the basemap. For this
  functionality to work, layers must be identified in the basemap configuration.
  """
  renderUnder: RenderUnderType!

  """
  For vector tile sources (VECTOR), references the layer inside the vector tiles that this layer applies to.
  """
  sourceLayer: String
  spriteIds: [Int]

  """Reads and enables pagination through a set of `Sprite`."""
  sprites(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Sprite!]
  staticId: String @deprecated(reason: "Use TableOfContentsItem.geoprocessingReferenceId instead")

  """
  For ARCGIS_MAPSERVER and eventually WMS sources. In this case mapbox_gl_styles
  is blank and this layer merely controls the display of a single sublayer when
  making image requests.
  """
  sublayer: String
  sublayerType: SublayerType

  """
  Reads a single `TableOfContentsItem` that is related to this `DataLayer`.
  """
  tableOfContentsItem: TableOfContentsItem

  """Reads and enables pagination through a set of `TableOfContentsItem`."""
  tableOfContentsItemsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TableOfContentsItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsConnection! @deprecated(reason: "Please use tableOfContentsItem instead")
  totalQuotaUsed: BigInt

  """
  Returns the ogc geometry type of the layer if it is a vector layer, otherwise
  returns null. E.g. "Point", "LineString", "Polygon", "MultiPoint",
  "MultiLineString", "MultiPolygon".
  """
  vectorGeometryType: String
  vectorObjectKey: String
  version: Int
  zIndex: Int!
}

"""
A condition to be used against `DataLayer` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DataLayerCondition {
  """Checks for equality with the object’s `dataSourceId` field."""
  dataSourceId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `interactivitySettingsId` field."""
  interactivitySettingsId: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""An input for mutations affecting `DataLayer`"""
input DataLayerInput {
  dataSourceId: Int!
  id: Int

  """
  JSON array of MapBox GL Style layers. Layers should not specify an id or
  sourceId. These will be automatically generated at runtime.
  
  """
  mapboxGlStyles: JSON
  projectId: Int!

  """
  Determines z-ordering of layer in relation to layers in the basemap. For this
  functionality to work, layers must be identified in the basemap configuration.
  """
  renderUnder: RenderUnderType

  """
  For vector tile sources (VECTOR), references the layer inside the vector tiles that this layer applies to.
  """
  sourceLayer: String
  spriteIds: [Int]
  staticId: String

  """
  For ARCGIS_MAPSERVER and eventually WMS sources. In this case mapbox_gl_styles
  is blank and this layer merely controls the display of a single sublayer when
  making image requests.
  """
  sublayer: String
  sublayerType: SublayerType
  zIndex: Int
}

"""
Represents an update to a `DataLayer`. Fields that are set will be updated.
"""
input DataLayerPatch {
  dataSourceId: Int
  id: Int
  interactivitySettingsId: Int

  """
  JSON array of MapBox GL Style layers. Layers should not specify an id or
  sourceId. These will be automatically generated at runtime.
  
  """
  mapboxGlStyles: JSON
  projectId: Int

  """
  Determines z-ordering of layer in relation to layers in the basemap. For this
  functionality to work, layers must be identified in the basemap configuration.
  """
  renderUnder: RenderUnderType

  """
  For vector tile sources (VECTOR), references the layer inside the vector tiles that this layer applies to.
  """
  sourceLayer: String
  spriteIds: [Int]
  staticId: String

  """
  For ARCGIS_MAPSERVER and eventually WMS sources. In this case mapbox_gl_styles
  is blank and this layer merely controls the display of a single sublayer when
  making image requests.
  """
  sublayer: String
  sublayerType: SublayerType
  zIndex: Int
}

"""A connection to a list of `DataLayer` values."""
type DataLayersConnection {
  """
  A list of edges which contains the `DataLayer` and cursor to aid in pagination.
  """
  edges: [DataLayersEdge!]!

  """A list of `DataLayer` objects."""
  nodes: [DataLayer!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DataLayer` you could get from the connection."""
  totalCount: Int!
}

"""A `DataLayer` edge in the connection."""
type DataLayersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DataLayer` at the end of the edge."""
  node: DataLayer!
}

"""Methods to use when ordering `DataLayer`."""
enum DataLayersOrderBy {
  DATA_SOURCE_ID_ASC
  DATA_SOURCE_ID_DESC
  ID_ASC
  ID_DESC
  INTERACTIVITY_SETTINGS_ID_ASC
  INTERACTIVITY_SETTINGS_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""
SeaSketch DataSources are analogous to MapBox GL Style sources but are extended
to include new types to support services such as ArcGIS MapServers and content
hosted on the SeaSketch CDN.

When documentation is lacking for any of these properties, consult the [MapBox GL Style docs](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geojson-promoteId)

"""
type DataSource implements Node {
  approximateFgbIndexSize: Int
  arcgisFetchStrategy: ArcgisFeatureLayerFetchStrategy!

  """Reads and enables pagination through a set of `ArchivedDataSource`."""
  archivedDataSources(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArchivedDataSourceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArchivedDataSource`."""
    orderBy: [ArchivedDataSourcesOrderBy!]
  ): [ArchivedDataSource!]!

  """
  Contains an attribution to be displayed when the map is shown to a user.
  """
  attribution: String
  authorProfile: Profile

  """
  An array containing the longitude and latitude of the southwest and northeast
  corners of the source bounding box in the following order: `[sw.lng, sw.lat,
  ne.lng, ne.lat]`. When this property is included in a source, no tiles outside
  of the given bounds are requested by Mapbox GL. This property can also be used
  as metadata for non-tiled sources.
  """
  bounds: [BigFloat]

  """
  SEASKETCH_VECTOR sources only. S3 bucket where data are stored. Populated from Project.data_sources_bucket on creation.
  """
  bucketId: String

  """
  GeoJSON only. Size of the tile buffer on each side. A value of 0 produces no
  buffer. A value of 512 produces a buffer as wide as the tile itself. Larger
  values produce fewer rendering artifacts near tile edges and slower performance.
  """
  buffer: Int

  """SEASKETCH_VECTOR sources only. Approximate size of the geojson source"""
  byteLength: Int
  changelog: String

  """
  GeoJSON only.
  
  If the data is a collection of point features, setting this to true clusters
  the points by radius into groups. Cluster groups become new Point features in
  the source with additional properties:
  
    * cluster Is true if the point is a cluster
    * cluster_id A unqiue id for the cluster to be used in conjunction with the
  [cluster inspection methods](https://docs.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)
    * point_count Number of original points grouped into this cluster
    * point_count_abbreviated An abbreviated point count
  
  """
  cluster: Boolean

  """
  GeoJSON only. Max zoom on which to cluster points if clustering is enabled.
  Defaults to one zoom less than maxzoom (so that last zoom features are not clustered).
  """
  clusterMaxZoom: Int

  """
  See [MapBox GL Style docs](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geojson-clusterProperties).
  """
  clusterProperties: JSON

  """
  GeoJSON only. Radius of each cluster if clustering is enabled. A value of 512
  indicates a radius equal to the width of a tile.
  """
  clusterRadius: Int

  """
  Image sources only. Corners of image specified in longitude, latitude pairs.
  """
  coordinates: [BigFloat]
  createdAt: Datetime!
  createdBy: Int

  """Reads and enables pagination through a set of `DataLayer`."""
  dataLayersConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataLayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataLayer`."""
    orderBy: [DataLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataLayersConnection!
  dataLibraryMetadata: JSON
  dataLibraryTemplateId: String

  """
  Raster-DEM only. The encoding used by this source. Mapbox Terrain RGB is used by default
  """
  encoding: RasterDemEncoding

  """
  SEASKETCH_VECTOR sources only. When enabled, uploads will be placed in a
  different class of storage that requires a temporary security credential to
  access. Set during creation and cannot be changed.
  """
  enhancedSecurity: Boolean

  """
  GeoJSON only. Whether to generate ids for the geojson features. When enabled,
  the feature.id property will be auto assigned based on its index in the
  features array, over-writing any previous values.
  """
  generateId: Boolean

  """
  mapbox-geostats summary information for vector sources. Useful for
  cartographic tools and authoring popups. SEASKETCH_VECTOR sources only.
  """
  geostats: JSON
  hostingQuotaUsed: BigInt

  """Should be used as sourceId in stylesheets."""
  id: Int!

  """
  For SeaSketchVector sources, identifies whether the original source comes from
  a direct upload or a service location like ArcGIS server
  """
  importType: DataSourceImportTypes
  isArchived: Boolean

  """
  GeoJSON only. Whether to calculate line distance metrics. This is required for
  line layers that specify line-gradient values.
  """
  lineMetrics: Boolean

  """
  For Vector, Raster, GeoJSON and Raster DEM sources. Maximum zoom level for
  which tiles are available, as in the TileJSON spec. Data from tiles at the
  maxzoom are used when displaying the map at higher zoom levels.
  """
  maxzoom: Int

  """
  For Vector, Raster, and Raster DEM sources. Minimum zoom level for which tiles are available, as in the TileJSON spec.
  """
  minzoom: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Size of the normalized file. SEASKETCH_VECTOR sources only."""
  normalizedSourceBytes: Int

  """
  Sources are converted to flatgeobuf (vector, 4326) or geotif (raster) and
  store indefinitely so they may be processed into tilesets and to support the
  download function. SEASKETCH_VECTOR sources only.
  """
  normalizedSourceObjectKey: String

  """SEASKETCH_VECTOR sources only. S3 object key where data are stored"""
  objectKey: UUID

  """
  For SeaSketchVector sources, identifies location of original service that
  hosted the data, if any. This can be used to update a layer with an updated
  copy of the data source if necessary.
  """
  originalSourceUrl: String

  """Reads and enables pagination through a set of `DataUploadOutput`."""
  outputs(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [DataUploadOutput!]

  """Use to upload source data to s3. Must be an admin."""
  presignedUploadUrl: String
  projectId: Int!

  """
  GeoJSON only. A property to use as a feature id (for feature state). Either a
  property name, or an object of the form `{<sourceLayer>: <propertyName>}.`
  """
  promoteId: Boolean

  """
  ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR only. Key-Value object with
  querystring parameters that will be added to requests.
  """
  queryParameters: JSON

  """Reads and enables pagination through a set of `QuotaDetail`."""
  quotaUsed(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [QuotaDetail!]
  rasterOffset: Float
  rasterRepresentativeColors: JSON
  rasterScale: Float

  """Reads and enables pagination through a set of `TableOfContentsItem`."""
  relatedTableOfContentsItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [TableOfContentsItem!]

  """
  For MapBox Vector and Raster sources. Influences the y direction of the tile
  coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
  """
  scheme: TileScheme

  """
  ArcGIS map service setting. If enabled, client can reorder layers and apply layer-specific opacity settings.
  """
  supportsDynamicLayers: Boolean!

  """
  For tiled sources, a list of endpoints that can be used to retrieve tiles.
  """
  tiles: [String]

  """
  The minimum visual size to display tiles for this layer. Only configurable for raster layers.
  """
  tileSize: Int

  """
  GeoJSON only. Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance).
  """
  tolerance: BigFloat
  translatedProps: JSON!

  """MapBox GL source type or custom seasketch type."""
  type: DataSourceTypes!
  uploadedBy: String
  uploadedSourceFilename: String

  """
  If uploaded using a multi-layer file format (gdb), includes the layer ID. SEASKETCH_VECTOR sources only.
  """
  uploadedSourceLayername: String

  """
  UUID of the upload processing job associated with a SEASKETCH_VECTOR source.
  """
  uploadTaskId: UUID

  """
  A URL to a TileJSON resource for tiled sources. For GeoJSON or
  SEASKETCH_VECTOR sources, use this to fill in the data property of the source.
  Also used by ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR
  """
  url: String

  """
  Video sources only. URLs to video content in order of preferred format.
  """
  urls: [String]

  """
  ARCGIS_DYNAMIC_MAPSERVER only. When using a high-dpi screen, request higher resolution images.
  """
  useDevicePixelRatio: Boolean
  wasConvertedFromEsriFeatureLayer: Boolean!
}

enum DataSourceImportTypes {
  """
  Imported from an arcgis feature layer identified by original_source_url
  """
  ARCGIS

  """Uploaded directly to SeaSketch using GeoJSON or shapefile"""
  UPLOAD
}

"""An input for mutations affecting `DataSource`"""
input DataSourceInput {
  arcgisFetchStrategy: ArcgisFeatureLayerFetchStrategy

  """
  Contains an attribution to be displayed when the map is shown to a user.
  """
  attribution: String

  """
  An array containing the longitude and latitude of the southwest and northeast
  corners of the source bounding box in the following order: `[sw.lng, sw.lat,
  ne.lng, ne.lat]`. When this property is included in a source, no tiles outside
  of the given bounds are requested by Mapbox GL. This property can also be used
  as metadata for non-tiled sources.
  """
  bounds: [BigFloat]

  """
  SEASKETCH_VECTOR sources only. S3 bucket where data are stored. Populated from Project.data_sources_bucket on creation.
  """
  bucketId: String

  """
  GeoJSON only. Size of the tile buffer on each side. A value of 0 produces no
  buffer. A value of 512 produces a buffer as wide as the tile itself. Larger
  values produce fewer rendering artifacts near tile edges and slower performance.
  """
  buffer: Int

  """SEASKETCH_VECTOR sources only. Approximate size of the geojson source"""
  byteLength: Int
  changelog: String

  """
  GeoJSON only.
  
  If the data is a collection of point features, setting this to true clusters
  the points by radius into groups. Cluster groups become new Point features in
  the source with additional properties:
  
    * cluster Is true if the point is a cluster
    * cluster_id A unqiue id for the cluster to be used in conjunction with the
  [cluster inspection methods](https://docs.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)
    * point_count Number of original points grouped into this cluster
    * point_count_abbreviated An abbreviated point count
  
  """
  cluster: Boolean

  """
  GeoJSON only. Max zoom on which to cluster points if clustering is enabled.
  Defaults to one zoom less than maxzoom (so that last zoom features are not clustered).
  """
  clusterMaxZoom: Int

  """
  See [MapBox GL Style docs](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geojson-clusterProperties).
  """
  clusterProperties: JSON

  """
  GeoJSON only. Radius of each cluster if clustering is enabled. A value of 512
  indicates a radius equal to the width of a tile.
  """
  clusterRadius: Int

  """
  Image sources only. Corners of image specified in longitude, latitude pairs.
  """
  coordinates: [BigFloat]
  createdAt: Datetime
  createdBy: Int
  dataLibraryMetadata: JSON
  dataLibraryTemplateId: String

  """
  Raster-DEM only. The encoding used by this source. Mapbox Terrain RGB is used by default
  """
  encoding: RasterDemEncoding

  """
  SEASKETCH_VECTOR sources only. When enabled, uploads will be placed in a
  different class of storage that requires a temporary security credential to
  access. Set during creation and cannot be changed.
  """
  enhancedSecurity: Boolean

  """
  GeoJSON only. Whether to generate ids for the geojson features. When enabled,
  the feature.id property will be auto assigned based on its index in the
  features array, over-writing any previous values.
  """
  generateId: Boolean

  """
  mapbox-geostats summary information for vector sources. Useful for
  cartographic tools and authoring popups. SEASKETCH_VECTOR sources only.
  """
  geostats: JSON

  """Should be used as sourceId in stylesheets."""
  id: Int

  """
  For SeaSketchVector sources, identifies whether the original source comes from
  a direct upload or a service location like ArcGIS server
  """
  importType: DataSourceImportTypes

  """
  GeoJSON only. Whether to calculate line distance metrics. This is required for
  line layers that specify line-gradient values.
  """
  lineMetrics: Boolean

  """
  For Vector, Raster, GeoJSON and Raster DEM sources. Maximum zoom level for
  which tiles are available, as in the TileJSON spec. Data from tiles at the
  maxzoom are used when displaying the map at higher zoom levels.
  """
  maxzoom: Int

  """
  For Vector, Raster, and Raster DEM sources. Minimum zoom level for which tiles are available, as in the TileJSON spec.
  """
  minzoom: Int

  """Size of the normalized file. SEASKETCH_VECTOR sources only."""
  normalizedSourceBytes: Int

  """
  Sources are converted to flatgeobuf (vector, 4326) or geotif (raster) and
  store indefinitely so they may be processed into tilesets and to support the
  download function. SEASKETCH_VECTOR sources only.
  """
  normalizedSourceObjectKey: String

  """SEASKETCH_VECTOR sources only. S3 object key where data are stored"""
  objectKey: UUID

  """
  For SeaSketchVector sources, identifies location of original service that
  hosted the data, if any. This can be used to update a layer with an updated
  copy of the data source if necessary.
  """
  originalSourceUrl: String
  projectId: Int!

  """
  GeoJSON only. A property to use as a feature id (for feature state). Either a
  property name, or an object of the form `{<sourceLayer>: <propertyName>}.`
  """
  promoteId: Boolean

  """
  ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR only. Key-Value object with
  querystring parameters that will be added to requests.
  """
  queryParameters: JSON
  rasterOffset: Float
  rasterRepresentativeColors: JSON
  rasterScale: Float

  """
  For MapBox Vector and Raster sources. Influences the y direction of the tile
  coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
  """
  scheme: TileScheme

  """
  ArcGIS map service setting. If enabled, client can reorder layers and apply layer-specific opacity settings.
  """
  supportsDynamicLayers: Boolean

  """
  For tiled sources, a list of endpoints that can be used to retrieve tiles.
  """
  tiles: [String]

  """
  The minimum visual size to display tiles for this layer. Only configurable for raster layers.
  """
  tileSize: Int

  """
  GeoJSON only. Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance).
  """
  tolerance: BigFloat
  translatedProps: JSON

  """MapBox GL source type or custom seasketch type."""
  type: DataSourceTypes!
  uploadedSourceFilename: String

  """
  If uploaded using a multi-layer file format (gdb), includes the layer ID. SEASKETCH_VECTOR sources only.
  """
  uploadedSourceLayername: String

  """
  UUID of the upload processing job associated with a SEASKETCH_VECTOR source.
  """
  uploadTaskId: UUID

  """
  A URL to a TileJSON resource for tiled sources. For GeoJSON or
  SEASKETCH_VECTOR sources, use this to fill in the data property of the source.
  Also used by ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR
  """
  url: String

  """
  Video sources only. URLs to video content in order of preferred format.
  """
  urls: [String]

  """
  ARCGIS_DYNAMIC_MAPSERVER only. When using a high-dpi screen, request higher resolution images.
  """
  useDevicePixelRatio: Boolean
  wasConvertedFromEsriFeatureLayer: Boolean
}

"""
Represents an update to a `DataSource`. Fields that are set will be updated.
"""
input DataSourcePatch {
  arcgisFetchStrategy: ArcgisFeatureLayerFetchStrategy

  """
  Contains an attribution to be displayed when the map is shown to a user.
  """
  attribution: String

  """
  GeoJSON only. Size of the tile buffer on each side. A value of 0 produces no
  buffer. A value of 512 produces a buffer as wide as the tile itself. Larger
  values produce fewer rendering artifacts near tile edges and slower performance.
  """
  buffer: Int

  """
  GeoJSON only.
  
  If the data is a collection of point features, setting this to true clusters
  the points by radius into groups. Cluster groups become new Point features in
  the source with additional properties:
  
    * cluster Is true if the point is a cluster
    * cluster_id A unqiue id for the cluster to be used in conjunction with the
  [cluster inspection methods](https://docs.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)
    * point_count Number of original points grouped into this cluster
    * point_count_abbreviated An abbreviated point count
  
  """
  cluster: Boolean

  """
  GeoJSON only. Max zoom on which to cluster points if clustering is enabled.
  Defaults to one zoom less than maxzoom (so that last zoom features are not clustered).
  """
  clusterMaxZoom: Int

  """
  See [MapBox GL Style docs](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geojson-clusterProperties).
  """
  clusterProperties: JSON

  """
  GeoJSON only. Radius of each cluster if clustering is enabled. A value of 512
  indicates a radius equal to the width of a tile.
  """
  clusterRadius: Int

  """
  Image sources only. Corners of image specified in longitude, latitude pairs.
  """
  coordinates: [BigFloat]

  """
  Raster-DEM only. The encoding used by this source. Mapbox Terrain RGB is used by default
  """
  encoding: RasterDemEncoding

  """
  GeoJSON only. Whether to generate ids for the geojson features. When enabled,
  the feature.id property will be auto assigned based on its index in the
  features array, over-writing any previous values.
  """
  generateId: Boolean

  """
  GeoJSON only. Whether to calculate line distance metrics. This is required for
  line layers that specify line-gradient values.
  """
  lineMetrics: Boolean

  """
  For Vector, Raster, GeoJSON and Raster DEM sources. Maximum zoom level for
  which tiles are available, as in the TileJSON spec. Data from tiles at the
  maxzoom are used when displaying the map at higher zoom levels.
  """
  maxzoom: Int

  """
  For Vector, Raster, and Raster DEM sources. Minimum zoom level for which tiles are available, as in the TileJSON spec.
  """
  minzoom: Int

  """
  GeoJSON only. A property to use as a feature id (for feature state). Either a
  property name, or an object of the form `{<sourceLayer>: <propertyName>}.`
  """
  promoteId: Boolean

  """
  ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR only. Key-Value object with
  querystring parameters that will be added to requests.
  """
  queryParameters: JSON

  """
  For MapBox Vector and Raster sources. Influences the y direction of the tile
  coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
  """
  scheme: TileScheme

  """
  ArcGIS map service setting. If enabled, client can reorder layers and apply layer-specific opacity settings.
  """
  supportsDynamicLayers: Boolean

  """
  For tiled sources, a list of endpoints that can be used to retrieve tiles.
  """
  tiles: [String]

  """
  The minimum visual size to display tiles for this layer. Only configurable for raster layers.
  """
  tileSize: Int

  """
  GeoJSON only. Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance).
  """
  tolerance: BigFloat
  translatedProps: JSON

  """
  A URL to a TileJSON resource for tiled sources. For GeoJSON or
  SEASKETCH_VECTOR sources, use this to fill in the data property of the source.
  Also used by ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR
  """
  url: String

  """
  Video sources only. URLs to video content in order of preferred format.
  """
  urls: [String]

  """
  ARCGIS_DYNAMIC_MAPSERVER only. When using a high-dpi screen, request higher resolution images.
  """
  useDevicePixelRatio: Boolean
}

type DataSourcesBucket implements Node {
  bucket: String
  location: GeometryPoint!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Indicates the DataHostingStack for this region has been deleted"""
  offline: Boolean!

  """Reads and enables pagination through a set of `Project`."""
  projectsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
  region: String!

  """Base url for this point-of-presence."""
  url: String!
}

"""
A condition to be used against `DataSourcesBucket` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DataSourcesBucketCondition {
  """Checks for equality with the object’s `url` field."""
  url: String
}

"""A connection to a list of `DataSourcesBucket` values."""
type DataSourcesBucketsConnection {
  """
  A list of edges which contains the `DataSourcesBucket` and cursor to aid in pagination.
  """
  edges: [DataSourcesBucketsEdge!]!

  """A list of `DataSourcesBucket` objects."""
  nodes: [DataSourcesBucket!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DataSourcesBucket` you could get from the connection.
  """
  totalCount: Int!
}

"""A `DataSourcesBucket` edge in the connection."""
type DataSourcesBucketsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DataSourcesBucket` at the end of the edge."""
  node: DataSourcesBucket!
}

"""Methods to use when ordering `DataSourcesBucket`."""
enum DataSourcesBucketsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  URL_ASC
  URL_DESC
}

"""A `DataSource` edge in the connection."""
type DataSourcesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DataSource` at the end of the edge."""
  node: DataSource!
}

"""Methods to use when ordering `DataSource`."""
enum DataSourcesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

enum DataSourceTypes {
  """Loads dynamic images for the entire viewport from arcgis server"""
  ARCGIS_DYNAMIC_MAPSERVER

  """
  Only valid when used as a table of contents item data_source_type value.
  """
  ARCGIS_DYNAMIC_MAPSERVER_RASTER_SUBLAYER

  """
  Only valid when used as a table of contents item data_source_type value.
  """
  ARCGIS_DYNAMIC_MAPSERVER_VECTOR_SUBLAYER

  """Tiled ArcGIS Map Service"""
  ARCGIS_RASTER_TILES

  """Loads vector data from arcgis server for rendering as a geojson source"""
  ARCGIS_VECTOR

  """MapBox GL Style "geojson" source"""
  GEOJSON

  """MapBox GL Style "image" source"""
  IMAGE

  """MapBox GL Style "raster" source"""
  RASTER

  """MapBox GL Style "raster" source"""
  RASTER_DEM

  """SeaSketch-hosted vector tiles"""
  SEASKETCH_MVT

  """Raster data hosting on SeaSketch CDN"""
  SEASKETCH_RASTER

  """GeoJSON hosted on SeaSketch CDN"""
  SEASKETCH_VECTOR

  """MapBox GL Style "vector" source"""
  VECTOR

  """MapBox GL Style "video" source"""
  VIDEO
}

type DataUploadOutput implements Node {
  createdAt: Datetime!
  dataSourceId: Int
  filename: String!
  id: Int!
  isCustomUpload: Boolean
  isOriginal: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  originalFilename: String
  projectId: Int
  remote: String!
  size: BigInt!
  type: DataUploadOutputType!
  url: String!
}

enum DataUploadOutputType {
  FLAT_GEOBUF
  GEO_JSON
  GEO_TIFF
  NET_CDF
  PMTILES
  PNG
  XMLMETADATA
  ZIPPED_SHAPEFILE
}

type DataUploadTask implements Node {
  changelog: String

  """Content-Type of the original upload."""
  contentType: String!
  createdAt: Datetime!
  dataLibraryMetadata: JSON
  dataSource: DataSource

  """Original name of file as uploaded by the user."""
  filename: String!
  id: UUID!
  job: ProjectBackgroundJob

  """Reads and enables pagination through a set of `DataLayer`."""
  layers(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [DataLayer!]

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  outputs: JSON

  """Use to upload source data to s3. Must be an admin."""
  presignedUploadUrl: String

  """
  Reads a single `ProjectBackgroundJob` that is related to this `DataUploadTask`.
  """
  projectBackgroundJob: ProjectBackgroundJob
  projectBackgroundJobId: UUID!
  replaceTableOfContentsItemId: Int
  tableOfContentsItemStableIds: [String]
}

"""
A condition to be used against `DataUploadTask` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DataUploadTaskCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `projectBackgroundJobId` field."""
  projectBackgroundJobId: UUID
}

"""A connection to a list of `DataUploadTask` values."""
type DataUploadTasksConnection {
  """
  A list of edges which contains the `DataUploadTask` and cursor to aid in pagination.
  """
  edges: [DataUploadTasksEdge!]!

  """A list of `DataUploadTask` objects."""
  nodes: [DataUploadTask!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DataUploadTask` you could get from the connection."""
  totalCount: Int!
}

"""A `DataUploadTask` edge in the connection."""
type DataUploadTasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DataUploadTask` at the end of the edge."""
  node: DataUploadTask!
}

"""Methods to use when ordering `DataUploadTask`."""
enum DataUploadTasksOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_BACKGROUND_JOB_ID_ASC
  PROJECT_BACKGROUND_JOB_ID_DESC
}

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteArchivedSource` mutation."""
input DeleteArchivedSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sourceId: Int
}

"""The output of our `deleteArchivedSource` mutation."""
type DeleteArchivedSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItem: TableOfContentsItem

  """An edge for our `TableOfContentsItem`. May be used by Relay 1."""
  tableOfContentsItemEdge(
    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsEdge
}

"""All input for the `deleteBasemapByNodeId` mutation."""
input DeleteBasemapByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Basemap` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBasemap` mutation."""
input DeleteBasemapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Basemap` mutation."""
type DeleteBasemapPayload {
  """The `Basemap` that was deleted by this mutation."""
  basemap: Basemap

  """An edge for our `Basemap`. May be used by Relay 1."""
  basemapEdge(
    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedBasemapNodeId: ID

  """
  Reads a single `InteractivitySetting` that is related to this `Basemap`.
  """
  interactivitySettings: InteractivitySetting

  """Reads a single `Project` that is related to this `Basemap`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCommunityGuidelineByNodeId` mutation."""
input DeleteCommunityGuidelineByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CommunityGuideline` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCommunityGuideline` mutation."""
input DeleteCommunityGuidelineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
}

"""The output of our delete `CommunityGuideline` mutation."""
type DeleteCommunityGuidelinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CommunityGuideline` that was deleted by this mutation."""
  communityGuideline: CommunityGuideline
  deletedCommunityGuidelineNodeId: ID

  """Reads a single `Project` that is related to this `CommunityGuideline`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDataLayerByInteractivitySettingsId` mutation."""
input DeleteDataLayerByInteractivitySettingsIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  interactivitySettingsId: Int!
}

"""All input for the `deleteDataLayerByNodeId` mutation."""
input DeleteDataLayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DataLayer` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDataLayer` mutation."""
input DeleteDataLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `DataLayer` mutation."""
type DeleteDataLayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataLayer` that was deleted by this mutation."""
  dataLayer: DataLayer

  """An edge for our `DataLayer`. May be used by Relay 1."""
  dataLayerEdge(
    """The method to use when ordering `DataLayer`."""
    orderBy: [DataLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataLayersEdge

  """Reads a single `DataSource` that is related to this `DataLayer`."""
  dataSource: DataSource
  deletedDataLayerNodeId: ID

  """
  Reads a single `InteractivitySetting` that is related to this `DataLayer`.
  """
  interactivitySettings: InteractivitySetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDataSourceByNodeId` mutation."""
input DeleteDataSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DataSource` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDataSource` mutation."""
input DeleteDataSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Should be used as sourceId in stylesheets."""
  id: Int!
}

"""The output of our delete `DataSource` mutation."""
type DeleteDataSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataSource` that was deleted by this mutation."""
  dataSource: DataSource

  """An edge for our `DataSource`. May be used by Relay 1."""
  dataSourceEdge(
    """The method to use when ordering `DataSource`."""
    orderBy: [DataSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesEdge
  deletedDataSourceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormByNodeId` mutation."""
input DeleteFormByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFormBySketchClassId` mutation."""
input DeleteFormBySketchClassIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Related *SketchClass*"""
  sketchClassId: Int!
}

"""All input for the `deleteFormBySurveyId` mutation."""
input DeleteFormBySurveyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Related *Survey*"""
  surveyId: Int!
}

"""All input for the `deleteFormElementByNodeId` mutation."""
input DeleteFormElementByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormElement` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFormElement` mutation."""
input DeleteFormElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `FormElement` mutation."""
type DeleteFormElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormElementNodeId: ID

  """The `FormElement` that was deleted by this mutation."""
  formElement: FormElement

  """An edge for our `FormElement`. May be used by Relay 1."""
  formElementEdge(
    """The method to use when ordering `FormElement`."""
    orderBy: [FormElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormElementsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteForm` mutation."""
input DeleteFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFormLogicConditionByNodeId` mutation."""
input DeleteFormLogicConditionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormLogicCondition` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFormLogicCondition` mutation."""
input DeleteFormLogicConditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `FormLogicCondition` mutation."""
type DeleteFormLogicConditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormLogicConditionNodeId: ID

  """The `FormLogicCondition` that was deleted by this mutation."""
  formLogicCondition: FormLogicCondition

  """An edge for our `FormLogicCondition`. May be used by Relay 1."""
  formLogicConditionEdge(
    """The method to use when ordering `FormLogicCondition`."""
    orderBy: [FormLogicConditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormLogicConditionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormLogicRuleByNodeId` mutation."""
input DeleteFormLogicRuleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormLogicRule` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFormLogicRule` mutation."""
input DeleteFormLogicRuleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `FormLogicRule` mutation."""
type DeleteFormLogicRulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormLogicRuleNodeId: ID

  """The `FormLogicRule` that was deleted by this mutation."""
  formLogicRule: FormLogicRule

  """An edge for our `FormLogicRule`. May be used by Relay 1."""
  formLogicRuleEdge(
    """The method to use when ordering `FormLogicRule`."""
    orderBy: [FormLogicRulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormLogicRulesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `Form` mutation."""
type DeleteFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormNodeId: ID

  """The `Form` that was deleted by this mutation."""
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

"""All input for the `deleteForumByNodeId` mutation."""
input DeleteForumByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Forum` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteForum` mutation."""
input DeleteForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Forum` mutation."""
type DeleteForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedForumNodeId: ID

  """The `Forum` that was deleted by this mutation."""
  forum: Forum

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGeographyByNodeId` mutation."""
input DeleteGeographyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Geography` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGeographyClippingLayerByNodeId` mutation."""
input DeleteGeographyClippingLayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GeographyClippingLayer` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGeographyClippingLayer` mutation."""
input DeleteGeographyClippingLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `GeographyClippingLayer` mutation."""
type DeleteGeographyClippingLayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `GeographyClippingLayer`.
  """
  dataLayer: DataLayer
  deletedGeographyClippingLayerNodeId: ID

  """The `GeographyClippingLayer` that was deleted by this mutation."""
  geographyClippingLayer: GeographyClippingLayer

  """An edge for our `GeographyClippingLayer`. May be used by Relay 1."""
  geographyClippingLayerEdge(
    """The method to use when ordering `GeographyClippingLayer`."""
    orderBy: [GeographyClippingLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeographyClippingLayersEdge

  """
  Reads a single `Geography` that is related to this `GeographyClippingLayer`.
  """
  projectGeography: Geography

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGeography` mutation."""
input DeleteGeographyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Geography` mutation."""
type DeleteGeographyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectGeographyNodeId: ID

  """The `Geography` that was deleted by this mutation."""
  geography: Geography

  """Reads a single `Project` that is related to this `Geography`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGroupByNodeId` mutation."""
input DeleteGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupByProjectIdAndName` mutation."""
input DeleteGroupByProjectIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Label for the group."""
  name: String!
  projectId: Int!
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectGroupNodeId: ID

  """The `Group` that was deleted by this mutation."""
  group: Group

  """Reads a single `Project` that is related to this `Group`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOfflineTilePackage` mutation."""
input DeleteOfflineTilePackageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID
}

"""The output of our `deleteOfflineTilePackage` mutation."""
type DeleteOfflineTilePackagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  offlineTilePackage: OfflineTilePackage

  """An edge for our `OfflineTilePackage`. May be used by Relay 1."""
  offlineTilePackageEdge(
    """The method to use when ordering `OfflineTilePackage`."""
    orderBy: [OfflineTilePackagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OfflineTilePackagesEdge

  """Reads a single `Project` that is related to this `OfflineTilePackage`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOfflineTileSettingByNodeId` mutation."""
input DeleteOfflineTileSettingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OfflineTileSetting` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteOfflineTileSettingByProjectIdAndBasemapId` mutation.
"""
input DeleteOfflineTileSettingByProjectIdAndBasemapIdInput {
  basemapId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
}

"""All input for the `deleteOfflineTileSetting` mutation."""
input DeleteOfflineTileSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `OfflineTileSetting` mutation."""
type DeleteOfflineTileSettingPayload {
  """Reads a single `Basemap` that is related to this `OfflineTileSetting`."""
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOfflineTileSettingNodeId: ID

  """The `OfflineTileSetting` that was deleted by this mutation."""
  offlineTileSetting: OfflineTileSetting

  """Reads a single `Project` that is related to this `OfflineTileSetting`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOptionalBasemapLayerByNodeId` mutation."""
input DeleteOptionalBasemapLayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OptionalBasemapLayer` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOptionalBasemapLayer` mutation."""
input DeleteOptionalBasemapLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `OptionalBasemapLayer` mutation."""
type DeleteOptionalBasemapLayerPayload {
  """
  Reads a single `Basemap` that is related to this `OptionalBasemapLayer`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOptionalBasemapLayerNodeId: ID

  """The `OptionalBasemapLayer` that was deleted by this mutation."""
  optionalBasemapLayer: OptionalBasemapLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePostByNodeId` mutation."""
input DeletePostByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPostNodeId: ID

  """The `Post` that was deleted by this mutation."""
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic
}

"""All input for the `deleteProject` mutation."""
input DeleteProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
}

"""All input for the `deleteProjectInviteByEmailAndProjectId` mutation."""
input DeleteProjectInviteByEmailAndProjectIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Specified by admin when invite was created."""
  email: Email!
  projectId: Int!
}

"""All input for the `deleteProjectInviteByNodeId` mutation."""
input DeleteProjectInviteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectInvite` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectInviteGroupByInviteIdAndGroupId` mutation.
"""
input DeleteProjectInviteGroupByInviteIdAndGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  inviteId: Int!
}

"""The output of our delete `ProjectInviteGroup` mutation."""
type DeleteProjectInviteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectInviteGroupNodeId: ID

  """Reads a single `Group` that is related to this `ProjectInviteGroup`."""
  group: Group

  """
  Reads a single `ProjectInvite` that is related to this `ProjectInviteGroup`.
  """
  invite: ProjectInvite

  """The `ProjectInviteGroup` that was deleted by this mutation."""
  projectInviteGroup: ProjectInviteGroup

  """An edge for our `ProjectInviteGroup`. May be used by Relay 1."""
  projectInviteGroupEdge(
    """The method to use when ordering `ProjectInviteGroup`."""
    orderBy: [ProjectInviteGroupsOrderBy!] = [NATURAL]
  ): ProjectInviteGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectInvite` mutation."""
input DeleteProjectInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `ProjectInvite` mutation."""
type DeleteProjectInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectInviteNodeId: ID

  """The `ProjectInvite` that was deleted by this mutation."""
  projectInvite: ProjectInvite

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our `deleteProject` mutation."""
type DeleteProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteProjectsSharedBasemapByBasemapIdAndProjectId` mutation.
"""
input DeleteProjectsSharedBasemapByBasemapIdAndProjectIdInput {
  basemapId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
}

"""The output of our delete `ProjectsSharedBasemap` mutation."""
type DeleteProjectsSharedBasemapPayload {
  """
  Reads a single `Basemap` that is related to this `ProjectsSharedBasemap`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectsSharedBasemapNodeId: ID

  """The `ProjectsSharedBasemap` that was deleted by this mutation."""
  projectsSharedBasemap: ProjectsSharedBasemap

  """An edge for our `ProjectsSharedBasemap`. May be used by Relay 1."""
  projectsSharedBasemapEdge(
    """The method to use when ordering `ProjectsSharedBasemap`."""
    orderBy: [ProjectsSharedBasemapsOrderBy!] = [NATURAL]
  ): ProjectsSharedBasemapsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteSketchByNodeId` mutation."""
input DeleteSketchByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sketch` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSketchClassByFormElementId` mutation."""
input DeleteSketchClassByFormElementIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  If set, this sketch class is only for use in a survey indicated by the form_element.
  
  """
  formElementId: Int!
}

"""All input for the `deleteSketchClassByNodeId` mutation."""
input DeleteSketchClassByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchClass` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSketchClass` mutation."""
input DeleteSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SketchClass` mutation."""
type DeleteSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSketchClassNodeId: ID

  """Reads a single `FormElement` that is related to this `SketchClass`."""
  formElement: FormElement

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchClass` that was deleted by this mutation."""
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the `deleteSketchFolderByNodeId` mutation."""
input DeleteSketchFolderByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchFolder` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSketchFolder` mutation."""
input DeleteSketchFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SketchFolder` mutation."""
type DeleteSketchFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSketchFolderNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchFolder` that was deleted by this mutation."""
  sketchFolder: SketchFolder

  """An edge for our `SketchFolder`. May be used by Relay 1."""
  sketchFolderEdge(
    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersEdge
}

"""All input for the `deleteSketch` mutation."""
input DeleteSketchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Sketch` mutation."""
type DeleteSketchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch
  deletedSketchNodeId: ID

  """Reads a single `FormElement` that is related to this `Sketch`."""
  formElement: FormElement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Sketch` that was deleted by this mutation."""
  sketch: Sketch

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass

  """Reads a single `User` that is related to this `Sketch`."""
  user: User
}

type DeleteSketchTocItemsResults {
  deletedItems: [String!]!
  updatedCollections: [Sketch]!
}

"""All input for the `deleteSurveyByNodeId` mutation."""
input DeleteSurveyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Survey` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSurvey` mutation."""
input DeleteSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSurveyInviteByEmailAndSurveyId` mutation."""
input DeleteSurveyInviteByEmailAndSurveyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: Email!
  surveyId: Int!
}

"""All input for the `deleteSurveyInviteByEmail` mutation."""
input DeleteSurveyInviteByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: Email!
}

"""All input for the `deleteSurveyInviteByNodeId` mutation."""
input DeleteSurveyInviteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SurveyInvite` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSurveyInvitedGroupBySurveyIdAndGroupId` mutation.
"""
input DeleteSurveyInvitedGroupBySurveyIdAndGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  surveyId: Int!
}

"""The output of our delete `SurveyInvitedGroup` mutation."""
type DeleteSurveyInvitedGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSurveyInvitedGroupNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyInvitedGroup`."""
  survey: Survey

  """The `SurveyInvitedGroup` that was deleted by this mutation."""
  surveyInvitedGroup: SurveyInvitedGroup
}

"""All input for the `deleteSurveyInvite` mutation."""
input DeleteSurveyInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SurveyInvite` mutation."""
type DeleteSurveyInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSurveyInviteNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyInvite`."""
  survey: Survey

  """The `SurveyInvite` that was deleted by this mutation."""
  surveyInvite: SurveyInvite

  """An edge for our `SurveyInvite`. May be used by Relay 1."""
  surveyInviteEdge(
    """The method to use when ordering `SurveyInvite`."""
    orderBy: [SurveyInvitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyInvitesEdge
}

"""The output of our delete `Survey` mutation."""
type DeleteSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSurveyNodeId: ID

  """Reads a single `Project` that is related to this `Survey`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Survey` that was deleted by this mutation."""
  survey: Survey
}

"""All input for the `deleteSurveyResponseByNodeId` mutation."""
input DeleteSurveyResponseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SurveyResponse` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSurveyResponse` mutation."""
input DeleteSurveyResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SurveyResponse` mutation."""
type DeleteSurveyResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSurveyResponseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey

  """The `SurveyResponse` that was deleted by this mutation."""
  surveyResponse: SurveyResponse

  """An edge for our `SurveyResponse`. May be used by Relay 1."""
  surveyResponseEdge(
    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesEdge
}

"""All input for the `deleteTableOfContentsBranch` mutation."""
input DeleteTableOfContentsBranchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tableOfContentsItemId: Int
}

"""The output of our `deleteTableOfContentsBranch` mutation."""
type DeleteTableOfContentsBranchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTopicByNodeId` mutation."""
input DeleteTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTopic` mutation."""
input DeleteTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Topic` mutation."""
type DeleteTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTopicNodeId: ID

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was deleted by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `denyParticipant` mutation."""
input DenyParticipantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `denyParticipant` mutation."""
type DenyParticipantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `disableDownloadForSharedLayers` mutation."""
input DisableDownloadForSharedLayersInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String
}

"""The output of our `disableDownloadForSharedLayers` mutation."""
type DisableDownloadForSharedLayersPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `disableForumPosting` mutation."""
input DisableForumPostingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `disableForumPosting` mutation."""
type DisableForumPostingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `dismissFailedJob` mutation."""
input DismissFailedJobInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID
}

"""The output of our `dismissFailedJob` mutation."""
type DismissFailedJobPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Project` that is related to this `ProjectBackgroundJob`.
  """
  project: Project
  projectBackgroundJob: ProjectBackgroundJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type DownloadOption {
  isOriginal: Boolean
  size: BigInt
  type: DataUploadOutputType
  url: String
}

"""All input for the `duplicateTableOfContentsItem` mutation."""
input DuplicateTableOfContentsItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  itemId: Int
}

"""The output of our `duplicateTableOfContentsItem` mutation."""
type DuplicateTableOfContentsItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItem: TableOfContentsItem

  """An edge for our `TableOfContentsItem`. May be used by Relay 1."""
  tableOfContentsItemEdge(
    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsEdge
}

scalar Email

"""
Email notification preferences can be read and set by the current user session.
These settings cannot be accessed by other users or SeaSketch project admins.

"""
type EmailNotificationPreference {
  """
  Email used when registering the account in Auth0. This email cannot be
  updated through the API, though it may be possible to do so manually by
  SeaSketch developers.
  
  This is the email by which users will recieve transactional emails like
  project and survey invites, and email notifications.
  """
  canonicalEmail: String

  """
  How often users should be notified of SeaSketch project activity.
  
  """
  frequency: EmailSummaryFrequency!

  """
  If set, users should receive realtime notifications of responses to discussion
  forum threads for which they are a participant.
  
  """
  notifyOnReply: Boolean!

  """
  If selected, users should receive absolutely no email from SeaSketch. Invite 
  emails should not be sent and their status should be set to UNSUBSCRIBED.
  
  """
  unsubscribeAll: Boolean!

  """
  Reads a single `User` that is related to this `EmailNotificationPreference`.
  """
  user: User
  userId: Int!
}

"""
A condition to be used against `EmailNotificationPreference` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input EmailNotificationPreferenceCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""
Represents an update to a `EmailNotificationPreference`. Fields that are set will be updated.
"""
input EmailNotificationPreferencePatch {
  """
  How often users should be notified of SeaSketch project activity.
  
  """
  frequency: EmailSummaryFrequency

  """
  If set, users should receive realtime notifications of responses to discussion
  forum threads for which they are a participant.
  
  """
  notifyOnReply: Boolean

  """
  If selected, users should receive absolutely no email from SeaSketch. Invite 
  emails should not be sent and their status should be set to UNSUBSCRIBED.
  
  """
  unsubscribeAll: Boolean
  userId: Int
}

"""A connection to a list of `EmailNotificationPreference` values."""
type EmailNotificationPreferencesConnection {
  """
  A list of edges which contains the `EmailNotificationPreference` and cursor to aid in pagination.
  """
  edges: [EmailNotificationPreferencesEdge!]!

  """A list of `EmailNotificationPreference` objects."""
  nodes: [EmailNotificationPreference!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmailNotificationPreference` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EmailNotificationPreference` edge in the connection."""
type EmailNotificationPreferencesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmailNotificationPreference` at the end of the edge."""
  node: EmailNotificationPreference!
}

"""Methods to use when ordering `EmailNotificationPreference`."""
enum EmailNotificationPreferencesOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
}

enum EmailStatus {
  BOUNCED
  COMPLAINT
  DELIVERED
  ERROR
  QUEUED
  SENT
  UNSUBSCRIBED
}

enum EmailSummaryFrequency {
  DAILY
  NEVER
  WEEKLY
}

enum EmailVerificationStatus {
  """An email was sent to the address"""
  EMAIL_SENT

  """The email address is already verified"""
  VERIFIED
}

"""All input for the `enableDownloadForEligibleLayers` mutation."""
input EnableDownloadForEligibleLayersInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slug: String
}

"""The output of our `enableDownloadForEligibleLayers` mutation."""
type EnableDownloadForEligibleLayersPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `enableForumPosting` mutation."""
input EnableForumPostingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `enableForumPosting` mutation."""
type EnableForumPostingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `enableOfflineSupport` mutation."""
input EnableOfflineSupportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  enable: Boolean
  projectId: Int
}

"""The output of our `enableOfflineSupport` mutation."""
type EnableOfflineSupportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type EsriFeatureLayerConversionTask implements Node {
  attribution: String
  location: String
  mapboxGlStyles: JSON
  metadata: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `ProjectBackgroundJob` that is related to this `EsriFeatureLayerConversionTask`.
  """
  projectBackgroundJob: ProjectBackgroundJob
  projectBackgroundJobId: UUID!

  """
  Reads a single `TableOfContentsItem` that is related to this `EsriFeatureLayerConversionTask`.
  """
  tableOfContentsItem: TableOfContentsItem
  tableOfContentsItemId: Int!
}

enum ExtendedGeostatsType {
  ARRAY
  BOOLEAN
  MIXED
  NULL
  NUMBER
  OBJECT
  STRING
}

"""All input for the `failDataUpload` mutation."""
input FailDataUploadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID
  msg: String
}

"""The output of our `failDataUpload` mutation."""
type FailDataUploadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  dataUploadTask: DataUploadTask

  """An edge for our `DataUploadTask`. May be used by Relay 1."""
  dataUploadTaskEdge(
    """The method to use when ordering `DataUploadTask`."""
    orderBy: [DataUploadTasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataUploadTasksEdge

  """
  Reads a single `ProjectBackgroundJob` that is related to this `DataUploadTask`.
  """
  projectBackgroundJob: ProjectBackgroundJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

enum FieldRuleOperator {
  CONTAINS
  EQUAL
  GREATER_THAN
  IS_BLANK
  LESS_THAN
  NOT_EQUAL
}

type FileUpload implements Node {
  cloudflareImagesId: String

  """
  Use a listed media type from https://www.iana.org/assignments/media-types/media-types.xhtml
  """
  contentType: String!
  createdAt: Datetime!

  """
  Includes a temporary token to enable download. Use
  rel="download nofollow" so that it is not indexed by search engines.
  """
  downloadUrl: String!
  filename: String!
  fileSizeBytes: BigInt!
  id: UUID!
  isSpatial: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Post` that is related to this `FileUpload`."""
  post: Post
  postId: Int

  """Use to upload to cloud storage (PUT)."""
  presignedUploadUrl: String
  projectId: Int!
  tilejsonEndpoint: String
  usage: FileUploadUsage!
  userId: Int!
}

"""
A condition to be used against `FileUpload` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FileUploadCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `postId` field."""
  postId: Int
}

"""A connection to a list of `FileUpload` values."""
type FileUploadsConnection {
  """
  A list of edges which contains the `FileUpload` and cursor to aid in pagination.
  """
  edges: [FileUploadsEdge!]!

  """A list of `FileUpload` objects."""
  nodes: [FileUpload!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FileUpload` you could get from the connection."""
  totalCount: Int!
}

"""A `FileUpload` edge in the connection."""
type FileUploadsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FileUpload` at the end of the edge."""
  node: FileUpload!
}

"""Methods to use when ordering `FileUpload`."""
enum FileUploadsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  POST_ID_ASC
  POST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum FileUploadUsage {
  ABOUT_PAGE
  FORUM_ATTACHMENT
  SURVEY_RESPONSE
}

enum FileUploadUsageInput {
  about_page
  forum_attachment
  survey_response
}

type FolderBreadcrumb {
  id: Int
  stableId: String
  title: String
}

"""
Custom user-input Forms are used in two places in SeaSketch. For SketchClasses,
Forms are used to add attributes to spatial features. In Surveys, Forms are used
in support of gathering response data.

Forms have any number of *FormElements* ordered by a `position` field, and form 
contents may be hidden depending on the evaluation of *FormConditionalRenderingRules*.

Forms typically belong to either a *Survey* or *SketchClass* exclusively. Some
Forms may be designated as a template, in which case they belong to neither. 
Only superusers can create form templates, and clients should provide templates
as an option when creating new forms.

"""
type Form implements Node {
  """
  Lists FormElements in order for rendering
  
  """
  formElements(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [FormElement!]
  id: Int!

  """
  SeaSetch superusers can create template forms than can be used when creating 
  SketchClasses or Surveys. These templates can be created using the 
  `createFormTemplateFromSketchClass` and `createFormTemplateFromSurvey` 
  mutations. Template forms can be listed with the root-level `templateForms` 
  query.
  
  """
  isTemplate: Boolean!

  """Reads and enables pagination through a set of `FormLogicRule`."""
  logicRules(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [FormLogicRule!]

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Related *SketchClass*"""
  sketchClassId: Int

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey

  """Related *Survey*"""
  surveyId: Int

  """Chosen by superusers upon template creation"""
  templateName: String

  """Indicates which features should use this form as a template"""
  templateType: FormTemplateType
}

"""
A condition to be used against `Form` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FormCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isTemplate` field."""
  isTemplate: Boolean

  """Checks for equality with the object’s `sketchClassId` field."""
  sketchClassId: Int

  """Checks for equality with the object’s `surveyId` field."""
  surveyId: Int
}

"""
*FormElements* represent input fields or read-only content in a form. Records contain fields to support
generic functionality like body, position, and isRequired. They 
also have a JSON `componentSettings` field that can have custom data to support
a particular input type, indicated by the `type` field.

Project administrators have full control over managing form elements through
graphile-generated CRUD mutations.

"""
type FormElement implements Node {
  alternateLanguageSettings: JSON!

  """
  Optional background color to transition the form to when this element is displayed.
  
  """
  backgroundColor: String
  backgroundHeight: Int

  """
  Optional background image to display when this form_element appears.
  
  """
  backgroundImage: String
  backgroundPalette: [String]
  backgroundWidth: Int

  """
  [prosemirror](https://prosemirror.net/) document representing a rich-text
  question or informational content. Level 1 headers can be assumed to be the
  question for input-type fields, though formatting is up to the project
  administrators. Clients should provide a template that encourages this
  convention when building forms.
  
  """
  body: JSON!

  """
  Type-specific configuration. For example, a Choice field might have a list of valid choices.
  """
  componentSettings: JSON!
  createdAt: Datetime!

  """
  Column name used in csv export, property name in reporting tools. Keep stable
  to avoid breaking reports. If null, this value will be dynamically generated
  from the first several characters of the text in FormElement.body.
  
  """
  exportId: String

  """Form this field belongs to."""
  formId: Int!
  generatedExportId: String!
  generatedLabel: String!
  id: Int!
  isInput: Boolean

  """Users must provide input for these fields before submission."""
  isRequired: Boolean!

  """
  Used only in surveys. If set, the survey will advance to the page of the
  specified form element. If null, the survey will simply advance to the next
  question in the list by `position`.
  
  """
  jumpToId: Int

  """
  Layout of image in relation to form_element content.
  
  """
  layout: FormElementLayout

  """
  IDs for basemaps that should be included in the map view if a map layout is selected
  """
  mapBasemaps: [Int]

  """
  If using a map-based layout, can be used to set the default starting point of the map
  
  See https://docs.mapbox.com/mapbox-gl-js/api/properties/#cameraoptions
  ```json
  {
    "center": [-73.5804, 45.53483],
    "pitch": 60,
    "bearing": -60,
    "zoom": 10
  }
  ```
  
  """
  mapCameraOptions: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Determines order of field display. Clients should display fields in ascending 
  order. Cannot be changed individually. Use `setFormElementOrder()` mutation to 
  update.
  
  """
  position: Int!

  """
  Color used to style navigation controls
  
  """
  secondaryColor: String

  """
  Sketch Class to be used in conjuction with a form element that supports spatial feature input.
  
  """
  sketchClass: SketchClass

  """Reads a single `SketchClass` that is related to this `FormElement`."""
  sketchClassFk: SketchClass

  """
  Used for special elements like SpatialAccessPriorityInput to create a sort of
  sub-form that the parent element controls the rendering of. Will not appear in
  the form unless the client implementation utilizes something like
  FormElement.shouldDisplaySubordinateElement to control visibility.
  
  """
  subordinateTo: Int

  """Reads and enables pagination through a set of `SurveyConsentDocument`."""
  surveyConsentDocumentsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyConsentDocumentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SurveyConsentDocument`."""
    orderBy: [SurveyConsentDocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyConsentDocumentsConnection!

  """
  Indicates whether the form element should be displayed with dark or light text
  variants to match the background color. Admin interface should automatically
  set this value based on `background_color`, though admins may wish to manually override.
  
  """
  textVariant: FormElementTextVariant!
  type: FormElementType
  typeId: String!
  unsplashAuthorName: String
  unsplashAuthorUrl: String
}

"""An input for mutations affecting `FormElement`"""
input FormElementInput {
  alternateLanguageSettings: JSON

  """
  Optional background color to transition the form to when this element is displayed.
  
  """
  backgroundColor: String
  backgroundHeight: Int
  backgroundPalette: [String]
  backgroundWidth: Int

  """
  [prosemirror](https://prosemirror.net/) document representing a rich-text
  question or informational content. Level 1 headers can be assumed to be the
  question for input-type fields, though formatting is up to the project
  administrators. Clients should provide a template that encourages this
  convention when building forms.
  
  """
  body: JSON!

  """
  Type-specific configuration. For example, a Choice field might have a list of valid choices.
  """
  componentSettings: JSON
  createdAt: Datetime

  """
  Column name used in csv export, property name in reporting tools. Keep stable
  to avoid breaking reports. If null, this value will be dynamically generated
  from the first several characters of the text in FormElement.body.
  
  """
  exportId: String

  """Form this field belongs to."""
  formId: Int!
  generatedExportId: String
  generatedLabel: String
  id: Int

  """Users must provide input for these fields before submission."""
  isRequired: Boolean

  """
  Used only in surveys. If set, the survey will advance to the page of the
  specified form element. If null, the survey will simply advance to the next
  question in the list by `position`.
  
  """
  jumpToId: Int

  """
  Layout of image in relation to form_element content.
  
  """
  layout: FormElementLayout

  """
  IDs for basemaps that should be included in the map view if a map layout is selected
  """
  mapBasemaps: [Int]

  """
  If using a map-based layout, can be used to set the default starting point of the map
  
  See https://docs.mapbox.com/mapbox-gl-js/api/properties/#cameraoptions
  ```json
  {
    "center": [-73.5804, 45.53483],
    "pitch": 60,
    "bearing": -60,
    "zoom": 10
  }
  ```
  
  """
  mapCameraOptions: JSON

  """
  Determines order of field display. Clients should display fields in ascending 
  order. Cannot be changed individually. Use `setFormElementOrder()` mutation to 
  update.
  
  """
  position: Int

  """
  Color used to style navigation controls
  
  """
  secondaryColor: String

  """
  Used for special elements like SpatialAccessPriorityInput to create a sort of
  sub-form that the parent element controls the rendering of. Will not appear in
  the form unless the client implementation utilizes something like
  FormElement.shouldDisplaySubordinateElement to control visibility.
  
  """
  subordinateTo: Int

  """
  Indicates whether the form element should be displayed with dark or light text
  variants to match the background color. Admin interface should automatically
  set this value based on `background_color`, though admins may wish to manually override.
  
  """
  textVariant: FormElementTextVariant
  typeId: String!
}

enum FormElementLayout {
  COVER
  LEFT
  MAP_FULLSCREEN
  MAP_SIDEBAR_LEFT
  MAP_SIDEBAR_RIGHT
  MAP_STACKED
  MAP_TOP
  RIGHT
  TOP
}

"""
Represents an update to a `FormElement`. Fields that are set will be updated.
"""
input FormElementPatch {
  alternateLanguageSettings: JSON

  """
  Optional background color to transition the form to when this element is displayed.
  
  """
  backgroundColor: String
  backgroundHeight: Int
  backgroundPalette: [String]
  backgroundWidth: Int

  """
  [prosemirror](https://prosemirror.net/) document representing a rich-text
  question or informational content. Level 1 headers can be assumed to be the
  question for input-type fields, though formatting is up to the project
  administrators. Clients should provide a template that encourages this
  convention when building forms.
  
  """
  body: JSON

  """
  Type-specific configuration. For example, a Choice field might have a list of valid choices.
  """
  componentSettings: JSON
  createdAt: Datetime

  """
  Column name used in csv export, property name in reporting tools. Keep stable
  to avoid breaking reports. If null, this value will be dynamically generated
  from the first several characters of the text in FormElement.body.
  
  """
  exportId: String

  """Form this field belongs to."""
  formId: Int
  generatedExportId: String
  generatedLabel: String
  id: Int

  """Users must provide input for these fields before submission."""
  isRequired: Boolean

  """
  Used only in surveys. If set, the survey will advance to the page of the
  specified form element. If null, the survey will simply advance to the next
  question in the list by `position`.
  
  """
  jumpToId: Int

  """
  Layout of image in relation to form_element content.
  
  """
  layout: FormElementLayout

  """
  IDs for basemaps that should be included in the map view if a map layout is selected
  """
  mapBasemaps: [Int]

  """
  If using a map-based layout, can be used to set the default starting point of the map
  
  See https://docs.mapbox.com/mapbox-gl-js/api/properties/#cameraoptions
  ```json
  {
    "center": [-73.5804, 45.53483],
    "pitch": 60,
    "bearing": -60,
    "zoom": 10
  }
  ```
  
  """
  mapCameraOptions: JSON

  """
  Determines order of field display. Clients should display fields in ascending 
  order. Cannot be changed individually. Use `setFormElementOrder()` mutation to 
  update.
  
  """
  position: Int

  """
  Color used to style navigation controls
  
  """
  secondaryColor: String

  """
  Used for special elements like SpatialAccessPriorityInput to create a sort of
  sub-form that the parent element controls the rendering of. Will not appear in
  the form unless the client implementation utilizes something like
  FormElement.shouldDisplaySubordinateElement to control visibility.
  
  """
  subordinateTo: Int

  """
  Indicates whether the form element should be displayed with dark or light text
  variants to match the background color. Admin interface should automatically
  set this value based on `background_color`, though admins may wish to manually override.
  
  """
  textVariant: FormElementTextVariant
  typeId: String
}

"""A `FormElement` edge in the connection."""
type FormElementsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormElement` at the end of the edge."""
  node: FormElement!
}

"""Methods to use when ordering `FormElement`."""
enum FormElementsOrderBy {
  FORM_ID_ASC
  FORM_ID_DESC
  ID_ASC
  ID_DESC
  MAP_BASEMAPS_ASC
  MAP_BASEMAPS_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum FormElementTextVariant {
  DARK
  DYNAMIC
  LIGHT
}

"""
Identifies the type of element in a form, including metadata about that element type.

"""
type FormElementType implements Node {
  allowAdminUpdates: Boolean!
  allowedLayouts: [FormElementLayout]
  componentName: String!
  geostatsArrayOf: ExtendedGeostatsType
  geostatsType: ExtendedGeostatsType
  isHidden: Boolean!

  """
  Whether the element is an input that collects information from users or
  contains presentational content like a Welcome Message component.
  """
  isInput: Boolean!
  isRequiredForSketchClasses: Boolean!
  isRequiredForSurveys: Boolean!

  """These elements can only be added to a form once."""
  isSingleUseOnly: Boolean!

  """
  Indicates if the element type is a spatial data input. Components that
  implement these types are expected to render their own map (in contrast with
  elements that simply have their layout set to MAP_SIDEBAR_RIGHT|LEFT, which
  expect the SurveyApp component to render a map for them.
  """
  isSpatial: Boolean!

  """
  If true, the element type should only be added to forms related to a survey.
  """
  isSurveysOnly: Boolean!

  """
  Control form element deployment with feature-flags. If this flag is enabled,
  the form element should only appear as an option for addition to superuser
  roles. Once added to a form however, it is visible to all users. No
  access-control is enforced other than hiding the option in the client.
  """
  label: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sketchClassTemplateId: Int
  supportedOperators: [FieldRuleOperator]!
}

"""
A condition to be used against `FormElementType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FormElementTypeCondition {
  """Checks for equality with the object’s `componentName` field."""
  componentName: String

  """Checks for equality with the object’s `label` field."""
  label: String
}

"""Methods to use when ordering `FormElementType`."""
enum FormElementTypesOrderBy {
  COMPONENT_NAME_ASC
  COMPONENT_NAME_DESC
  LABEL_ASC
  LABEL_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum FormLogicCommand {
  HIDE
  JUMP
  SHOW
}

"""
Conditions are nested within FormLogicRules. In many cases there may be
only a single condition, but in others the FormLogicRule.booleanOperator
property defines how they are applied.

"""
type FormLogicCondition implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  operator: FieldRuleOperator!
  ruleId: Int!
  subjectId: Int!
  value: JSON
}

"""An input for mutations affecting `FormLogicCondition`"""
input FormLogicConditionInput {
  id: Int
  operator: FieldRuleOperator
  ruleId: Int!
  subjectId: Int!
  value: JSON
}

"""
Represents an update to a `FormLogicCondition`. Fields that are set will be updated.
"""
input FormLogicConditionPatch {
  id: Int
  operator: FieldRuleOperator
  ruleId: Int
  subjectId: Int
  value: JSON
}

"""A `FormLogicCondition` edge in the connection."""
type FormLogicConditionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormLogicCondition` at the end of the edge."""
  node: FormLogicCondition!
}

"""Methods to use when ordering `FormLogicCondition`."""
enum FormLogicConditionsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum FormLogicOperator {
  AND
  OR
}

"""
Form logic rules can be used to hide or show FormElements based on the values of 
preceeding fields in a SketchClass. They can also define page jump logic within a Survey.

"""
type FormLogicRule implements Node {
  booleanOperator: FormLogicOperator!
  command: FormLogicCommand!

  """Reads and enables pagination through a set of `FormLogicCondition`."""
  conditions(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [FormLogicCondition!]
  formElementId: Int!
  id: Int!
  jumpToId: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  position: Int!
}

"""An input for mutations affecting `FormLogicRule`"""
input FormLogicRuleInput {
  booleanOperator: FormLogicOperator
  command: FormLogicCommand!
  formElementId: Int!
  id: Int
  jumpToId: Int
  position: Int!
}

"""
Represents an update to a `FormLogicRule`. Fields that are set will be updated.
"""
input FormLogicRulePatch {
  booleanOperator: FormLogicOperator
  command: FormLogicCommand
  formElementId: Int
  id: Int
  jumpToId: Int
  position: Int
}

"""A `FormLogicRule` edge in the connection."""
type FormLogicRulesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormLogicRule` at the end of the edge."""
  node: FormLogicRule!
}

"""Methods to use when ordering `FormLogicRule`."""
enum FormLogicRulesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Represents an update to a `Form`. Fields that are set will be updated."""
input FormPatch {
  id: Int

  """
  SeaSetch superusers can create template forms than can be used when creating 
  SketchClasses or Surveys. These templates can be created using the 
  `createFormTemplateFromSketchClass` and `createFormTemplateFromSurvey` 
  mutations. Template forms can be listed with the root-level `templateForms` 
  query.
  
  """
  isTemplate: Boolean

  """Related *SketchClass*"""
  sketchClassId: Int

  """Related *Survey*"""
  surveyId: Int

  """Chosen by superusers upon template creation"""
  templateName: String

  """Indicates which features should use this form as a template"""
  templateType: FormTemplateType
}

"""A connection to a list of `Form` values."""
type FormsConnection {
  """
  A list of edges which contains the `Form` and cursor to aid in pagination.
  """
  edges: [FormsEdge!]!

  """A list of `Form` objects."""
  nodes: [Form!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection."""
type FormsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form!
}

"""Methods to use when ordering `Form`."""
enum FormsOrderBy {
  ID_ASC
  ID_DESC
  IS_TEMPLATE_ASC
  IS_TEMPLATE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SKETCH_CLASS_ID_ASC
  SKETCH_CLASS_ID_DESC
  SURVEY_ID_ASC
  SURVEY_ID_DESC
}

"""Indicates which features should use the form as a template"""
enum FormTemplateType {
  SKETCHES
  SURVEYS
  SURVEYS_AND_SKETCHES
}

"""
Discussion forums are the highest level organizing unit of the discussion forums
for a project. Each forum can have many topics (threads), which then contain
posts. Only project administrators can create and configure forums.

"""
type Forum implements Node {
  """
  Archived forums will only be accessible by project administrators from the
  admin dashboard. This is an alternative to deleting a forum.
  """
  archived: Boolean
  canPost: Boolean

  """Optional description of the forum to be displayed to project users."""
  description: String
  id: Int!
  lastPostDate: Datetime

  """Title displayed for the forum."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Sets position of this forum in the listing. Forums should be listed by
  position in ascending order. Set using `setForumOrder()`
  """
  position: Int
  postCount: Int

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project
  projectId: Int!
  readAcl: Acl
  topicCount: Int

  """Reads and enables pagination through a set of `Topic`."""
  topicsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection!
  translatedProps: JSON!
  writeAcl: Acl
}

type ForumActivityPayload {
  forum: Forum
  forumId: Int!
  post: Post
  postId: Int!
  project: Project
  projectId: Int!
  topic: Topic
  topicId: Int!
}

"""
A condition to be used against `Forum` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ForumCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""An input for mutations affecting `Forum`"""
input ForumInput {
  """
  Archived forums will only be accessible by project administrators from the
  admin dashboard. This is an alternative to deleting a forum.
  """
  archived: Boolean

  """Optional description of the forum to be displayed to project users."""
  description: String
  id: Int

  """Title displayed for the forum."""
  name: String!

  """
  Sets position of this forum in the listing. Forums should be listed by
  position in ascending order. Set using `setForumOrder()`
  """
  position: Int
  projectId: Int!
  translatedProps: JSON
}

"""
Represents an update to a `Forum`. Fields that are set will be updated.
"""
input ForumPatch {
  """
  Archived forums will only be accessible by project administrators from the
  admin dashboard. This is an alternative to deleting a forum.
  """
  archived: Boolean

  """Optional description of the forum to be displayed to project users."""
  description: String

  """Title displayed for the forum."""
  name: String

  """
  Sets position of this forum in the listing. Forums should be listed by
  position in ascending order. Set using `setForumOrder()`
  """
  position: Int
  translatedProps: JSON
}

"""A `Forum` edge in the connection."""
type ForumsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Forum` at the end of the edge."""
  node: Forum!
}

"""Methods to use when ordering `Forum`."""
enum ForumsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""All input for the `generateOfflineTilePackage` mutation."""
input GenerateOfflineTilePackageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dataSourceUrl: String
  maxShorelineZ: Int
  maxZ: Int
  originalUrlTemplate: String
  projectId: Int
  sourceType: OfflineTilePackageSourceType
}

"""The output of our `generateOfflineTilePackage` mutation."""
type GenerateOfflineTilePackagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  offlineTilePackage: OfflineTilePackage

  """An edge for our `OfflineTilePackage`. May be used by Relay 1."""
  offlineTilePackageEdge(
    """The method to use when ordering `OfflineTilePackage`."""
    orderBy: [OfflineTilePackagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OfflineTilePackagesEdge

  """Reads a single `Project` that is related to this `OfflineTilePackage`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Methods to use when ordering `Geography`."""
enum GeographiesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

type Geography implements Node {
  bounds: [Float!]
  clientTemplate: String

  """
  Reads and enables pagination through a set of `GeographyClippingLayer`.
  """
  clippingLayers(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [GeographyClippingLayer!]
  createdAt: Datetime

  """
  Reads and enables pagination through a set of `GeographyClippingLayer`.
  """
  geographyClippingLayersConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeographyClippingLayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GeographyClippingLayer`."""
    orderBy: [GeographyClippingLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeographyClippingLayersConnection!
  hash: String
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `Geography`."""
  project: Project
  projectId: Int!
  translatedProps: JSON
}

type GeographyClippingLayer implements Node {
  bounds: [Float!]
  cql2Query: JSON

  """
  Reads a single `DataLayer` that is related to this `GeographyClippingLayer`.
  """
  dataLayer: DataLayer
  dataLayerId: Int!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  objectKey: String
  operationType: GeographyLayerOperation!

  """
  Reads a single `Geography` that is related to this `GeographyClippingLayer`.
  """
  projectGeography: Geography
  projectGeographyId: Int!
  templateId: String
}

"""
A condition to be used against `GeographyClippingLayer` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input GeographyClippingLayerCondition {
  """Checks for equality with the object’s `dataLayerId` field."""
  dataLayerId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectGeographyId` field."""
  projectGeographyId: Int
}

"""An input for mutations affecting `GeographyClippingLayer`"""
input GeographyClippingLayerInput {
  cql2Query: JSON
  dataLayerId: Int!
  operationType: GeographyLayerOperation!
  projectGeographyId: Int!
  templateId: String
}

"""
Represents an update to a `GeographyClippingLayer`. Fields that are set will be updated.
"""
input GeographyClippingLayerPatch {
  cql2Query: JSON
  dataLayerId: Int
  operationType: GeographyLayerOperation
  projectGeographyId: Int
  templateId: String
}

"""A connection to a list of `GeographyClippingLayer` values."""
type GeographyClippingLayersConnection {
  """
  A list of edges which contains the `GeographyClippingLayer` and cursor to aid in pagination.
  """
  edges: [GeographyClippingLayersEdge!]!

  """A list of `GeographyClippingLayer` objects."""
  nodes: [GeographyClippingLayer!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GeographyClippingLayer` you could get from the connection.
  """
  totalCount: Int!
}

"""A `GeographyClippingLayer` edge in the connection."""
type GeographyClippingLayersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GeographyClippingLayer` at the end of the edge."""
  node: GeographyClippingLayer!
}

"""Methods to use when ordering `GeographyClippingLayer`."""
enum GeographyClippingLayersOrderBy {
  DATA_LAYER_ID_ASC
  DATA_LAYER_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_GEOGRAPHY_ID_ASC
  PROJECT_GEOGRAPHY_ID_DESC
}

"""
A condition to be used against `Geography` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GeographyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""All geography XY types implement this interface"""
interface GeographyGeometry {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

"""An input for mutations affecting `Geography`"""
input GeographyInput {
  clientTemplate: String
  createdAt: Datetime
  hash: String
  name: String!
  projectId: Int!
  translatedProps: JSON
}

"""All geography types implement this interface"""
interface GeographyInterface {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

enum GeographyLayerOperation {
  DIFFERENCE
  INTERSECT
}

type GeographyLineString implements GeographyGeometry & GeographyInterface {
  geojson: GeoJSON
  points: [GeographyPoint]
  srid: Int!
}

"""
Represents an update to a `Geography`. Fields that are set will be updated.
"""
input GeographyPatch {
  clientTemplate: String
  createdAt: Datetime
  hash: String
  name: String
  projectId: Int
  translatedProps: JSON
}

type GeographyPoint implements GeographyGeometry & GeographyInterface {
  geojson: GeoJSON
  latitude: Float!
  longitude: Float!
  srid: Int!
}

type GeographyPolygon implements GeographyGeometry & GeographyInterface {
  exterior: GeographyLineString
  geojson: GeoJSON
  interiors: [GeographyLineString]
  srid: Int!
}

type GeographyUpdatedPayload {
  geography: Geography!
}

"""
The `GeoJSON` scalar type represents GeoJSON values as specified by[RFC 7946](https://tools.ietf.org/html/rfc7946).
"""
scalar GeoJSON

"""All geometry XY types implement this interface"""
interface GeometryGeometry {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

type GeometryGeometryCollection implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryGeometry]
  srid: Int!
}

type GeometryGeometryCollectionM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryGeometryM]
  srid: Int!
}

type GeometryGeometryCollectionZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryGeometryZ]
  srid: Int!
}

type GeometryGeometryCollectionZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryGeometryZM]
  srid: Int!
}

"""All geometry XYM types implement this interface"""
interface GeometryGeometryM {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

"""All geometry XYZ types implement this interface"""
interface GeometryGeometryZ {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

"""All geometry XYZM types implement this interface"""
interface GeometryGeometryZM {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

"""All geometry types implement this interface"""
interface GeometryInterface {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

type GeometryLineString implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPoint]
  srid: Int!
}

type GeometryLineStringM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointM]
  srid: Int!
}

type GeometryLineStringZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZ]
  srid: Int!
}

type GeometryLineStringZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZM]
  srid: Int!
}

type GeometryMultiLineString implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLineString]
  srid: Int!
}

type GeometryMultiLineStringM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLineStringM]
  srid: Int!
}

type GeometryMultiLineStringZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLineStringZ]
  srid: Int!
}

type GeometryMultiLineStringZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLineStringZM]
  srid: Int!
}

type GeometryMultiPoint implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPoint]
  srid: Int!
}

type GeometryMultiPointM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointM]
  srid: Int!
}

type GeometryMultiPointZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZ]
  srid: Int!
}

type GeometryMultiPointZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZM]
  srid: Int!
}

type GeometryMultiPolygon implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygon]
  srid: Int!
}

type GeometryMultiPolygonM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygonM]
  srid: Int!
}

type GeometryMultiPolygonZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygonZ]
  srid: Int!
}

type GeometryMultiPolygonZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygonZM]
  srid: Int!
}

type GeometryPoint implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  srid: Int!
  x: Float!
  y: Float!
}

type GeometryPointM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  srid: Int!
  x: Float!
  y: Float!
}

type GeometryPointZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  srid: Int!
  x: Float!
  y: Float!
}

type GeometryPointZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  srid: Int!
  x: Float!
  y: Float!
}

type GeometryPolygon implements GeometryGeometry & GeometryInterface {
  exterior: GeometryLineString
  geojson: GeoJSON
  interiors: [GeometryLineString]
  srid: Int!
}

type GeometryPolygonM implements GeometryGeometryM & GeometryInterface {
  exterior: GeometryLineStringM
  geojson: GeoJSON
  interiors: [GeometryLineStringM]
  srid: Int!
}

type GeometryPolygonZ implements GeometryGeometryZ & GeometryInterface {
  exterior: GeometryLineStringZ
  geojson: GeoJSON
  interiors: [GeometryLineStringZ]
  srid: Int!
}

type GeometryPolygonZM implements GeometryGeometryZM & GeometryInterface {
  exterior: GeometryLineStringZM
  geojson: GeoJSON
  interiors: [GeometryLineStringZM]
  srid: Int!
}

"""All input for the `getChildFoldersRecursive` mutation."""
input GetChildFoldersRecursiveInput {
  childType: SketchChildType

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int
}

"""The output of our `getChildFoldersRecursive` mutation."""
type GetChildFoldersRecursivePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integers: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type GoogleMapsTileApiSession implements Node {
  expiresAt: Datetime!
  id: Int!
  imageFormat: String!
  language: String!
  mapType: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  region: String!
  session: String!
  tileHeight: Int!
  tileWidth: Int!
}

"""All input for the `grantAdminAccess` mutation."""
input GrantAdminAccessInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `grantAdminAccess` mutation."""
type GrantAdminAccessPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
User groups designated by the project administrators. User groups can be used to
assign access control privileges to users. 

Note that only admins have access to groups, or direct knowlege of what groups a
user belongs to. If an admin wanted to create an *Assholes* group they are 
free to do so.

"""
type Group implements Node {
  id: Int!
  memberCount: Int

  """Reads and enables pagination through a set of `User`."""
  members(
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    orderBy: ParticipantSortBy
  ): [User!]

  """Label for the group."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `Group`."""
  project: Project
  projectId: Int!

  """Reads and enables pagination through a set of `ProjectInviteGroup`."""
  projectInviteGroupsByGroupIdConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInviteGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectInviteGroup`."""
    orderBy: [ProjectInviteGroupsOrderBy!] = [NATURAL]
  ): ProjectInviteGroupsConnection!
}

"""An input for mutations affecting `Group`"""
input GroupInput {
  id: Int

  """Label for the group."""
  name: String!
  projectId: Int!
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  id: Int

  """Label for the group."""
  name: String
  projectId: Int
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""All input for the `importArcgisServices` mutation."""
input ImportArcgisServicesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  items: [ArcgisImportItemInput]
  projectId: Int
  sources: [ArcgisImportSourceInput]
}

"""The output of our `importArcgisServices` mutation."""
type ImportArcgisServicesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItems: [TableOfContentsItem!]
}

type InteractivitySetting implements Node {
  """Reads and enables pagination through a set of `Basemap`."""
  basemapsByInteractivitySettingsIdConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasemapCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsConnection!
  cursor: CursorType!

  """
  Reads a single `DataLayer` that is related to this `InteractivitySetting`.
  """
  dataLayerByInteractivitySettingsId: DataLayer

  """Reads and enables pagination through a set of `DataLayer`."""
  dataLayersByInteractivitySettingsIdConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataLayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataLayer`."""
    orderBy: [DataLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataLayersConnection! @deprecated(reason: "Please use dataLayerByInteractivitySettingsId instead")
  id: Int!

  """
  Used only for basemap interactivity settings. Optional list of layer ids that this setting applies to.
  
  """
  layers: [String]
  longTemplate: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  shortTemplate: String
  title: String!
  type: InteractivityType!
}

"""An input for mutations affecting `InteractivitySetting`"""
input InteractivitySettingInput {
  cursor: CursorType
  id: Int

  """
  Used only for basemap interactivity settings. Optional list of layer ids that this setting applies to.
  
  """
  layers: [String]
  longTemplate: String
  shortTemplate: String
  title: String
  type: InteractivityType
}

"""
Represents an update to a `InteractivitySetting`. Fields that are set will be updated.
"""
input InteractivitySettingPatch {
  cursor: CursorType
  id: Int

  """
  Used only for basemap interactivity settings. Optional list of layer ids that this setting applies to.
  
  """
  layers: [String]
  longTemplate: String
  shortTemplate: String
  title: String
  type: InteractivityType
}

enum InteractivityType {
  ALL_PROPERTIES_POPUP
  BANNER
  FIXED_BLOCK
  NONE
  POPUP
  SIDEBAR_OVERLAY
  TOOLTIP
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
type Interval {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
input IntervalInput {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""
Invite emails can be associated with either a project or survey invitation. 
Project invite emails are sent by direct admin action, going into a QUEUED state
and eventually sent out by a backend emailing process. Survey invites are 
automatically created whenever a survey is published.

[More details on the mailing process can be found on the
wiki](https://github.com/seasketch/next/wiki/User-and-Survey-Invite-Management).

"""
type InviteEmail implements Node {
  createdAt: Datetime!
  error: String
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `ProjectInvite` that is related to this `InviteEmail`."""
  projectInvite: ProjectInvite
  projectInviteId: Int

  """
  Updated by the mailer processes and SES notifications.
  
  """
  status: EmailStatus!

  """Reads a single `SurveyInvite` that is related to this `InviteEmail`."""
  surveyInvite: SurveyInvite
  surveyInviteId: Int
  toAddress: Email!

  """
  Emails contain a link with an embedded JSON Web Token that is used to authorize 
  access. These tokens have an expiration that is both embedded in the token and 
  tracked in the database. Each email has its own token and expiration.
  
  """
  tokenExpiresAt: Datetime
  updatedAt: Datetime
}

"""
A condition to be used against `InviteEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input InviteEmailCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectInviteId` field."""
  projectInviteId: Int

  """Checks for equality with the object’s `status` field."""
  status: EmailStatus

  """Checks for equality with the object’s `surveyInviteId` field."""
  surveyInviteId: Int
}

"""Methods to use when ordering `InviteEmail`."""
enum InviteEmailsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_INVITE_ID_ASC
  PROJECT_INVITE_ID_DESC
  STATUS_ASC
  STATUS_DESC
  SURVEY_INVITE_ID_ASC
  SURVEY_INVITE_ID_DESC
}

enum InviteOrderBy {
  EMAIL
  NAME
}

type InviteStat {
  count: Int
  status: InviteStatus
}

"""
Invite status is derived from feedback notifications coming from the AWS SES
email service and token expiration date. See the inviteEmails relation for more details.
"""
enum InviteStatus {
  BOUNCED
  COMPLAINT
  CONFIRMED
  DELIVERED
  ERROR
  QUEUED
  SENT
  SURVEY_INVITE_QUEUED
  SURVEY_INVITE_SENT
  TOKEN_EXPIRED
  UNCONFIRMED
  UNSENT
  UNSUBSCRIBED
}

"""All input for the `joinProject` mutation."""
input JoinProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `joinProject` mutation."""
type JoinProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""All input for the `labelForFormElementValue` mutation."""
input LabelForFormElementValueInput {
  attrValue: JSON

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  componentSettings: JSON
}

"""The output of our `labelForFormElementValue` mutation."""
type LabelForFormElementValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `leaveProject` mutation."""
input LeaveProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `leaveProject` mutation."""
type LeaveProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `makeResponseDraft` mutation."""
input MakeResponseDraftInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  responseId: Int
}

"""The output of our `makeResponseDraft` mutation."""
type MakeResponseDraftPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey
  surveyResponse: SurveyResponse

  """An edge for our `SurveyResponse`. May be used by Relay 1."""
  surveyResponseEdge(
    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesEdge
}

"""All input for the `makeResponsesNotPractice` mutation."""
input MakeResponsesNotPracticeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ids: [Int]
}

"""The output of our `makeResponsesNotPractice` mutation."""
type MakeResponsesNotPracticePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  surveyResponses: [SurveyResponse!]
}

"""All input for the `makeResponsesPractice` mutation."""
input MakeResponsesPracticeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ids: [Int]
}

"""The output of our `makeResponsesPractice` mutation."""
type MakeResponsesPracticePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey
  surveyResponse: SurveyResponse

  """An edge for our `SurveyResponse`. May be used by Relay 1."""
  surveyResponseEdge(
    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesEdge
}

"""All input for the `makeSketchClass` mutation."""
input MakeSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String
  projectId: Int
  templateId: Int
}

"""The output of our `makeSketchClass` mutation."""
type MakeSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormElement` that is related to this `SketchClass`."""
  formElement: FormElement

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the `makeSurvey` mutation."""
input MakeSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String
  projectId: Int
  templateId: Int
}

"""The output of our `makeSurvey` mutation."""
type MakeSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `Survey`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  survey: Survey
}

type MapBookmark {
  """Reads a single `Basemap` that is related to this `MapBookmark`."""
  basemapBySelectedBasemap: Basemap
  basemapName: String
  basemapOptionalLayerStates: JSON
  cameraOptions: JSON!

  """
  Generated by clients. Should not be used if authorative thumbnail (image_id) is available.
  """
  clientGeneratedThumbnail: String
  createdAt: Datetime!
  id: UUID!
  imageId: String
  isPublic: Boolean!
  job: WorkerJob
  layerNames: JSON
  mapDimensions: [Int]!
  postId: Int
  projectId: Int
  screenshotJobStatus: WorkerJobStatus!
  selectedBasemap: Int!
  sidebarState: JSON
  sketchNames: JSON
  sprites: Sprite
  style: JSON!
  userId: Int!
  visibleDataLayers: [String]!
  visibleSketches: [Int]
}

"""
A condition to be used against `MapBookmark` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MapBookmarkCondition {
  """Checks for equality with the object’s `postId` field."""
  postId: Int

  """Checks for equality with the object’s `selectedBasemap` field."""
  selectedBasemap: Int

  """Checks for equality with the object’s `visibleDataLayers` field."""
  visibleDataLayers: [String]
}

"""A connection to a list of `MapBookmark` values."""
type MapBookmarksConnection {
  """
  A list of edges which contains the `MapBookmark` and cursor to aid in pagination.
  """
  edges: [MapBookmarksEdge!]!

  """A list of `MapBookmark` objects."""
  nodes: [MapBookmark!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MapBookmark` you could get from the connection."""
  totalCount: Int!
}

"""A `MapBookmark` edge in the connection."""
type MapBookmarksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MapBookmark` at the end of the edge."""
  node: MapBookmark!
}

"""Methods to use when ordering `MapBookmark`."""
enum MapBookmarksOrderBy {
  NATURAL
  POST_ID_ASC
  POST_ID_DESC
  SELECTED_BASEMAP_ASC
  SELECTED_BASEMAP_DESC
  VISIBLE_DATA_LAYERS_ASC
  VISIBLE_DATA_LAYERS_DESC
}

type MapDataRequest implements Node {
  cacheHitRatio: Float!
  count: Int!
  interval: Interval!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  timestamp: Datetime!
}

"""All input for the `markTopicAsRead` mutation."""
input MarkTopicAsReadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  topicId: Int
}

"""The output of our `markTopicAsRead` mutation."""
type MarkTopicAsReadPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `mergeTranslatedProps` mutation."""
input MergeTranslatedPropsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  existing: JSON
  propName: String
  propTranslations: JSON
}

"""The output of our `mergeTranslatedProps` mutation."""
type MergeTranslatedPropsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `modifySurveyAnswers` mutation."""
input ModifySurveyAnswersInput {
  answers: JSON

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  responseIds: [Int]
}

"""The output of our `modifySurveyAnswers` mutation."""
type ModifySurveyAnswersPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  surveyResponses: [SurveyResponse!]
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Add a group to a given access control list. Must be an administrator."""
  addGroupToAcl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddGroupToAclInput!
  ): AddGroupToAclPayload
  addImageToSprite(height: Int!, image: Upload!, pixelRatio: Int!, spriteId: Int!, width: Int!): Sprite

  """
  Add the given user to a group. Must be an administrator of the project.
  """
  addUserToGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddUserToGroupInput!
  ): AddUserToGroupPayload

  """
  Add a SketchClass to the list of valid children for a Collection-type SketchClass.
  
  """
  addValidChildSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddValidChildSketchClassInput!
  ): AddValidChildSketchClassPayload
  alternateLanguageLabelsForFormElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AlternateLanguageLabelsForFormElementInput!
  ): AlternateLanguageLabelsForFormElementPayload
  approveParticipant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ApproveParticipantInput!
  ): ApproveParticipantPayload
  archiveResponses(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ArchiveResponsesInput!
  ): ArchiveResponsesPayload
  cancelBackgroundJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CancelBackgroundJobInput!
  ): CancelBackgroundJobPayload
  clearFormElementStyle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ClearFormElementStyleInput!
  ): ClearFormElementStylePayload
  computeProjectGeographyHash(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ComputeProjectGeographyHashInput!
  ): ComputeProjectGeographyHashPayload

  """
  Confirm that a new user has seen any onboarding materials. Updates User.onboarded date.
  
  """
  confirmOnboarded(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmOnboardedInput!
  ): ConfirmOnboardedPayload

  """
  Accept a project invite using a token (distributed via email). When
  confirming a token, the current session will be assigned any group
  membership or admin privileges assigned to the invite. The act of
  accepting a token that was sent via email will also verify the user's
  email if it wasn't already.
  
  More details on how to handle invites can be found
  [on the wiki](https://github.com/seasketch/next/wiki/User-Ingress#project-invites)
  """
  confirmProjectInvite(
    """JWT string"""
    token: String!
  ): ProjectInviteTokenClaims

  """
  Project invites can be paired with survey invites so that users can be sent an
  email inviting them to a survey, then use that survey invite to confirm a 
  project invitation. This way there are no duplicative emails sent.
  
  Clients must set x-ss-survey-invite-token header before calling this mutation.
  
  """
  confirmProjectInviteWithSurveyToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmProjectInviteWithSurveyTokenInput!
  ): ConfirmProjectInviteWithSurveyTokenPayload

  """
  Users can confirm project invites without clicking thru an email if they are 
  registered for SeaSketch and their verified email matches that of a project 
  invite. Outstanding (or confirmed) invites can be accessed via the 
  `currentProject.invite` query.
  
  More details on how to handle invites can be found [on the
  wiki](https://github.com/seasketch/next/wiki/User-Ingress#project-invites).
  
  """
  confirmProjectInviteWithVerifiedEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmProjectInviteWithVerifiedEmailInput!
  ): ConfirmProjectInviteWithVerifiedEmailPayload
  convertEsriFeatureLayerToSeasketchHosted(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConvertEsriFeatureLayerToSeasketchHostedInput!
  ): ConvertEsriFeatureLayerToSeasketchHostedPayload

  """
  Copies appearance settings like layout and background_image from one form
  element to another. Useful when initializing custom appearance on an element
  from the defaults set by a previous question.
  """
  copyAppearance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CopyAppearanceInput!
  ): CopyAppearancePayload
  copyDataLibraryTemplateItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CopyDataLibraryTemplateItemInput!
  ): CopyDataLibraryTemplateItemPayload
  copySketchTocItem(forForum: Boolean, id: Int!, type: SketchChildType!): CopySketchTocItemResults
  createApiKey(label: String!, projectId: Int!, ttlMs: Int): CreateApiKeyResponse!

  """Creates a single `Basemap`."""
  createBasemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBasemapInput!
  ): CreateBasemapPayload

  """Creates a single `CommunityGuideline`."""
  createCommunityGuideline(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCommunityGuidelineInput!
  ): CreateCommunityGuidelinePayload

  """Creates a single `DataLayer`."""
  createDataLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDataLayerInput!
  ): CreateDataLayerPayload

  """Creates a single `DataSource`."""
  createDataSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDataSourceInput!
  ): CreateDataSourcePayload
  createDataUpload(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDataUploadInput!
  ): CreateDataUploadPayload
  createFileUpload(contentType: String!, filename: String!, fileSizeBytes: Int!, projectId: Int!, usage: FileUploadUsageInput!): UploaderResponse!

  """Creates a single `FormElement`."""
  createFormElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormElementInput!
  ): CreateFormElementPayload

  """Creates a single `FormLogicCondition`."""
  createFormLogicCondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormLogicConditionInput!
  ): CreateFormLogicConditionPayload

  """Creates a single `FormLogicRule`."""
  createFormLogicRule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormLogicRuleInput!
  ): CreateFormLogicRulePayload
  createFormTemplateFromSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormTemplateFromSketchClassInput!
  ): CreateFormTemplateFromSketchClassPayload
  createFormTemplateFromSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormTemplateFromSurveyInput!
  ): CreateFormTemplateFromSurveyPayload

  """Creates a single `Forum`."""
  createForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateForumInput!
  ): CreateForumPayload

  """Create a new geography with associated clipping layers"""
  createGeographies(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: [CreateGeographyArgs!]!
  ): CreateGeographiesPayload

  """Creates a single `Geography`."""
  createGeography(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGeographyInput!
  ): CreateGeographyPayload

  """Creates a single `GeographyClippingLayer`."""
  createGeographyClippingLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGeographyClippingLayerInput!
  ): CreateGeographyClippingLayerPayload

  """Creates a single `Group`."""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """Creates a single `InteractivitySetting`."""
  createInteractivitySetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInteractivitySettingInput!
  ): CreateInteractivitySettingPayload
  createMapBookmark(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMapBookmarkInput!
  ): CreateMapBookmarkPayload

  """Creates a single `OfflineTileSetting`."""
  createOfflineTileSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOfflineTileSettingInput!
  ): CreateOfflineTileSettingPayload

  """Creates a single `OptionalBasemapLayer`."""
  createOptionalBasemapLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOptionalBasemapLayerInput!
  ): CreateOptionalBasemapLayerPayload
  createPost(message: JSON!, topicId: Int!): Post!

  """
  Users with verified emails can create new projects by choosing a unique name
  and url slug. This project will be unlisted with admin_only access and the
  user will be automatically added to the list of admins.
  """
  createProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """Creates a single `ProjectInviteGroup`."""
  createProjectInviteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInviteGroupInput!
  ): CreateProjectInviteGroupPayload

  """
  Create a set of project invites from a set of emails and optional names. Clients
  should implement this feature as a simple textarea where admins can copy and 
  paste a set of names and emails from a spreadsheet.#
  
  Invites can be assigned to a list of groups and optional admin permission. The
  function can either send these invite emails immediately or they can be manually
  sent later.
  
  More details on project invite management [can be found in the wiki](https://github.com/seasketch/next/wiki/User-and-Survey-Invite-Management).
  
  """
  createProjectInvites(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInvitesInput!
  ): CreateProjectInvitesPayload

  """Creates a single `ProjectsSharedBasemap`."""
  createProjectsSharedBasemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectsSharedBasemapInput!
  ): CreateProjectsSharedBasemapPayload
  createRemoteGeojsonSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRemoteGeojsonSourceInput!
  ): CreateRemoteGeojsonSourcePayload
  createRemoteMvtSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRemoteMvtSourceInput!
  ): CreateRemoteMvtSourcePayload

  """
  Create a new sketch in the user's account. If preprocessing is enabled,
  the sketch's final geometry will be set by running the proprocessing
  function again on userGeom. This ensures the value conforms to the
  project's rules, and also benefits the user in that they need not submit
  a huge geometry to the server.
  
  In the case of collections, the userGeom can be omitted.
  """
  createSketch(
    """Sketches can be assigned directly to a collection on creation."""
    collectionId: Int

    """Sketches can be assigned directly to a folder on creation."""
    folderId: Int

    """Name for the sketch. Required."""
    name: String!

    """Form element data"""
    properties: JSON!
    sketchClassId: Int!

    """Sketch as drawn by the user."""
    userGeom: GeoJSON
  ): Sketch
  createSketchClassFromTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSketchClassFromTemplateInput!
  ): CreateSketchClassFromTemplatePayload
  createSketchFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSketchFolderInput!
  ): CreateSketchFolderPayload

  """Creates a single `SurveyInvitedGroup`."""
  createSurveyInvitedGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurveyInvitedGroupInput!
  ): CreateSurveyInvitedGroupPayload
  createSurveyInvites(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurveyInvitesInput!
  ): CreateSurveyInvitesPayload

  """
  Initializes a new FormLogicRule with a single condition and command=JUMP.
  
  """
  createSurveyJumpRule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurveyJumpRuleInput!
  ): CreateSurveyJumpRulePayload
  createSurveyResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurveyResponseInput!
  ): CreateSurveyResponsePayload
  createSurveyResponseV2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurveyResponseV2Input!
  ): CreateSurveyResponseV2Payload

  """Creates a single `TableOfContentsItem`."""
  createTableOfContentsItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTableOfContentsItemInput!
  ): CreateTableOfContentsItemPayload
  createTopic(forumId: Int!, message: JSON!, title: String!): Topic!
  createVisibilityLogicRule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVisibilityLogicRuleInput!
  ): CreateVisibilityLogicRulePayload
  deleteArchivedSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArchivedSourceInput!
  ): DeleteArchivedSourcePayload

  """Deletes a single `Basemap` using a unique key."""
  deleteBasemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBasemapInput!
  ): DeleteBasemapPayload

  """Deletes a single `Basemap` using its globally unique id."""
  deleteBasemapByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBasemapByNodeIdInput!
  ): DeleteBasemapPayload

  """Deletes a single `CommunityGuideline` using a unique key."""
  deleteCommunityGuideline(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommunityGuidelineInput!
  ): DeleteCommunityGuidelinePayload

  """Deletes a single `CommunityGuideline` using its globally unique id."""
  deleteCommunityGuidelineByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommunityGuidelineByNodeIdInput!
  ): DeleteCommunityGuidelinePayload

  """Deletes a single `DataLayer` using a unique key."""
  deleteDataLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDataLayerInput!
  ): DeleteDataLayerPayload

  """Deletes a single `DataLayer` using a unique key."""
  deleteDataLayerByInteractivitySettingsId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDataLayerByInteractivitySettingsIdInput!
  ): DeleteDataLayerPayload

  """Deletes a single `DataLayer` using its globally unique id."""
  deleteDataLayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDataLayerByNodeIdInput!
  ): DeleteDataLayerPayload

  """Deletes a single `DataSource` using a unique key."""
  deleteDataSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDataSourceInput!
  ): DeleteDataSourcePayload

  """Deletes a single `DataSource` using its globally unique id."""
  deleteDataSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDataSourceByNodeIdInput!
  ): DeleteDataSourcePayload

  """Deletes a single `Form` using a unique key."""
  deleteForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using its globally unique id."""
  deleteFormByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormByNodeIdInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteFormBySketchClassId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormBySketchClassIdInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteFormBySurveyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormBySurveyIdInput!
  ): DeleteFormPayload

  """Deletes a single `FormElement` using a unique key."""
  deleteFormElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormElementInput!
  ): DeleteFormElementPayload

  """Deletes a single `FormElement` using its globally unique id."""
  deleteFormElementByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormElementByNodeIdInput!
  ): DeleteFormElementPayload

  """Deletes a single `FormLogicCondition` using a unique key."""
  deleteFormLogicCondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormLogicConditionInput!
  ): DeleteFormLogicConditionPayload

  """Deletes a single `FormLogicCondition` using its globally unique id."""
  deleteFormLogicConditionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormLogicConditionByNodeIdInput!
  ): DeleteFormLogicConditionPayload

  """Deletes a single `FormLogicRule` using a unique key."""
  deleteFormLogicRule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormLogicRuleInput!
  ): DeleteFormLogicRulePayload

  """Deletes a single `FormLogicRule` using its globally unique id."""
  deleteFormLogicRuleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormLogicRuleByNodeIdInput!
  ): DeleteFormLogicRulePayload

  """Deletes a single `Forum` using a unique key."""
  deleteForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteForumInput!
  ): DeleteForumPayload

  """Deletes a single `Forum` using its globally unique id."""
  deleteForumByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteForumByNodeIdInput!
  ): DeleteForumPayload

  """Deletes a single `Geography` using a unique key."""
  deleteGeography(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeographyInput!
  ): DeleteGeographyPayload
  deleteGeographyAndTableOfContentsItems(deleteRelatedTableOfContentsItems: Boolean, id: Int!): Geography!

  """Deletes a single `Geography` using its globally unique id."""
  deleteGeographyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeographyByNodeIdInput!
  ): DeleteGeographyPayload

  """Deletes a single `GeographyClippingLayer` using a unique key."""
  deleteGeographyClippingLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeographyClippingLayerInput!
  ): DeleteGeographyClippingLayerPayload

  """
  Deletes a single `GeographyClippingLayer` using its globally unique id.
  """
  deleteGeographyClippingLayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGeographyClippingLayerByNodeIdInput!
  ): DeleteGeographyClippingLayerPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using its globally unique id."""
  deleteGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByNodeIdInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroupByProjectIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByProjectIdAndNameInput!
  ): DeleteGroupPayload
  deleteOfflineTilePackage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOfflineTilePackageInput!
  ): DeleteOfflineTilePackagePayload

  """Deletes a single `OfflineTileSetting` using a unique key."""
  deleteOfflineTileSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOfflineTileSettingInput!
  ): DeleteOfflineTileSettingPayload

  """Deletes a single `OfflineTileSetting` using its globally unique id."""
  deleteOfflineTileSettingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOfflineTileSettingByNodeIdInput!
  ): DeleteOfflineTileSettingPayload

  """Deletes a single `OfflineTileSetting` using a unique key."""
  deleteOfflineTileSettingByProjectIdAndBasemapId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOfflineTileSettingByProjectIdAndBasemapIdInput!
  ): DeleteOfflineTileSettingPayload

  """Deletes a single `OptionalBasemapLayer` using a unique key."""
  deleteOptionalBasemapLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOptionalBasemapLayerInput!
  ): DeleteOptionalBasemapLayerPayload

  """Deletes a single `OptionalBasemapLayer` using its globally unique id."""
  deleteOptionalBasemapLayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOptionalBasemapLayerByNodeIdInput!
  ): DeleteOptionalBasemapLayerPayload

  """Deletes a single `Post` using a unique key."""
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """Deletes a single `Post` using its globally unique id."""
  deletePostByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByNodeIdInput!
  ): DeletePostPayload

  """
  Marks project as deleted. Will remain in database but not accessible to
  anyone. Function can only be accessed by project administrators.
  """
  deleteProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInput!
  ): DeleteProjectPayload

  """Deletes a single `ProjectInvite` using a unique key."""
  deleteProjectInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInviteInput!
  ): DeleteProjectInvitePayload

  """Deletes a single `ProjectInvite` using a unique key."""
  deleteProjectInviteByEmailAndProjectId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInviteByEmailAndProjectIdInput!
  ): DeleteProjectInvitePayload

  """Deletes a single `ProjectInvite` using its globally unique id."""
  deleteProjectInviteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInviteByNodeIdInput!
  ): DeleteProjectInvitePayload

  """Deletes a single `ProjectInviteGroup` using a unique key."""
  deleteProjectInviteGroupByInviteIdAndGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInviteGroupByInviteIdAndGroupIdInput!
  ): DeleteProjectInviteGroupPayload

  """Deletes a single `ProjectsSharedBasemap` using a unique key."""
  deleteProjectsSharedBasemapByBasemapIdAndProjectId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectsSharedBasemapByBasemapIdAndProjectIdInput!
  ): DeleteProjectsSharedBasemapPayload

  """Deletes a single `Sketch` using a unique key."""
  deleteSketch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchInput!
  ): DeleteSketchPayload

  """Deletes a single `Sketch` using its globally unique id."""
  deleteSketchByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchByNodeIdInput!
  ): DeleteSketchPayload

  """Deletes a single `SketchClass` using a unique key."""
  deleteSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchClassInput!
  ): DeleteSketchClassPayload

  """Deletes a single `SketchClass` using a unique key."""
  deleteSketchClassByFormElementId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchClassByFormElementIdInput!
  ): DeleteSketchClassPayload

  """Deletes a single `SketchClass` using its globally unique id."""
  deleteSketchClassByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchClassByNodeIdInput!
  ): DeleteSketchClassPayload

  """Deletes a single `SketchFolder` using a unique key."""
  deleteSketchFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchFolderInput!
  ): DeleteSketchFolderPayload

  """Deletes a single `SketchFolder` using its globally unique id."""
  deleteSketchFolderByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchFolderByNodeIdInput!
  ): DeleteSketchFolderPayload

  """
  Deletes one or more Sketch or SketchFolders
  
  Returns an updatedCollections property which should be used to update the
  updatedAt property on related collections so that correct cache keys are
  used when requesting reports.
  """
  deleteSketchTocItems(items: [UpdateTocItemParentInput]!): DeleteSketchTocItemsResults

  """Deletes a single `Survey` using a unique key."""
  deleteSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInput!
  ): DeleteSurveyPayload

  """Deletes a single `Survey` using its globally unique id."""
  deleteSurveyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyByNodeIdInput!
  ): DeleteSurveyPayload

  """Deletes a single `SurveyInvite` using a unique key."""
  deleteSurveyInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInviteInput!
  ): DeleteSurveyInvitePayload

  """Deletes a single `SurveyInvite` using a unique key."""
  deleteSurveyInviteByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInviteByEmailInput!
  ): DeleteSurveyInvitePayload

  """Deletes a single `SurveyInvite` using a unique key."""
  deleteSurveyInviteByEmailAndSurveyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInviteByEmailAndSurveyIdInput!
  ): DeleteSurveyInvitePayload

  """Deletes a single `SurveyInvite` using its globally unique id."""
  deleteSurveyInviteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInviteByNodeIdInput!
  ): DeleteSurveyInvitePayload

  """Deletes a single `SurveyInvitedGroup` using a unique key."""
  deleteSurveyInvitedGroupBySurveyIdAndGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInvitedGroupBySurveyIdAndGroupIdInput!
  ): DeleteSurveyInvitedGroupPayload

  """Deletes a single `SurveyResponse` using a unique key."""
  deleteSurveyResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyResponseInput!
  ): DeleteSurveyResponsePayload

  """Deletes a single `SurveyResponse` using its globally unique id."""
  deleteSurveyResponseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyResponseByNodeIdInput!
  ): DeleteSurveyResponsePayload

  """
  Deletes an item from the draft table of contents, as well as all child items
  if it is a folder. This action will also delete all related layers and sources
  (if no other layers reference the source).
  """
  deleteTableOfContentsBranch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTableOfContentsBranchInput!
  ): DeleteTableOfContentsBranchPayload

  """Deletes a single `Topic` using a unique key."""
  deleteTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicInput!
  ): DeleteTopicPayload

  """Deletes a single `Topic` using its globally unique id."""
  deleteTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicByNodeIdInput!
  ): DeleteTopicPayload
  denyParticipant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DenyParticipantInput!
  ): DenyParticipantPayload
  disableDownloadForSharedLayers(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DisableDownloadForSharedLayersInput!
  ): DisableDownloadForSharedLayersPayload

  """Ban a user from posting in the discussion forum"""
  disableForumPosting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DisableForumPostingInput!
  ): DisableForumPostingPayload
  dismissFailedJob(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DismissFailedJobInput!
  ): DismissFailedJobPayload
  duplicateTableOfContentsItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DuplicateTableOfContentsItemInput!
  ): DuplicateTableOfContentsItemPayload
  enableDownloadForEligibleLayers(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: EnableDownloadForEligibleLayersInput!
  ): EnableDownloadForEligibleLayersPayload

  """
  Re-enable discussion forum posting for a user that was previously banned.
  """
  enableForumPosting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: EnableForumPostingInput!
  ): EnableForumPostingPayload
  enableOfflineSupport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: EnableOfflineSupportInput!
  ): EnableOfflineSupportPayload
  failDataUpload(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: FailDataUploadInput!
  ): FailDataUploadPayload
  generateOfflineTilePackage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GenerateOfflineTilePackageInput!
  ): GenerateOfflineTilePackagePayload
  getChildFoldersRecursive(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetChildFoldersRecursiveInput!
  ): GetChildFoldersRecursivePayload

  """
  Use to create new sprites. If an existing sprite in the database for this
  project has a matching md5 hash no new Sprite will be created.
  """
  getOrCreateSprite(
    height: Int!
    pixelRatio: Int!
    projectId: Int!

    """Provide the lowest-dpi version of the sprite"""
    smallestImage: Upload!
    type: String
    width: Int!
  ): Sprite
  getPresignedPMTilesUploadUrl(bytes: Int!, filename: String!): PresignedUrl!

  """
  Give a user admin access to a project. User must have already joined the project and shared their user profile.
  """
  grantAdminAccess(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GrantAdminAccessInput!
  ): GrantAdminAccessPayload
  importArcgisServices(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportArcgisServicesInput!
  ): ImportArcgisServicesPayload

  """
  Adds current user to the list of participants for a project, sharing their 
  profile with administrators in user listings. Their profile will also be shared 
  in public or group discussion forum posts.
  
  Clients will need to determine when/how to show prompts to join a project based
  on activity that minimizes annoyance when browsing among projects but also makes
  sure users are visible to admins so that they may gain user group permissions.
  
  """
  joinProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: JoinProjectInput!
  ): JoinProjectPayload
  labelForFormElementValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LabelForFormElementValueInput!
  ): LabelForFormElementValuePayload

  """
  Turns off profile sharing in this project. User privacy choices should be 
  respected, and profile information should disappear from the admin users lists,
  forum posts, and any other shared content. In the forum a balance will need to 
  be made to hide their posts entirely since anonymous content could be malicious, 
  and maintain a historical record of discussions.
  
  """
  leaveProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LeaveProjectInput!
  ): LeaveProjectPayload

  """
  Project administrators cannot edit survey responses and survey respondants 
  cannot edit responses after they have been submitted. Admins can use this 
  mutation to put a response into draft mode so that they can be updated and 
  resubmitted by the respondant.
  
  """
  makeResponseDraft(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeResponseDraftInput!
  ): MakeResponseDraftPayload
  makeResponsesNotPractice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeResponsesNotPracticeInput!
  ): MakeResponsesNotPracticePayload
  makeResponsesPractice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeResponsesPracticeInput!
  ): MakeResponsesPracticePayload
  makeSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeSketchClassInput!
  ): MakeSketchClassPayload
  makeSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeSurveyInput!
  ): MakeSurveyPayload

  """
  Mark the topic as read by the current session user. Used to avoid sending email
  notifications to users who have already read a topic. Call when loading a topic, 
  and whenever new posts are shown.
  
  """
  markTopicAsRead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MarkTopicAsReadInput!
  ): MarkTopicAsReadPayload
  mergeTranslatedProps(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MergeTranslatedPropsInput!
  ): MergeTranslatedPropsPayload
  modifySurveyAnswers(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ModifySurveyAnswersInput!
  ): ModifySurveyAnswersPayload

  """
  Copies all table of contents items, related layers, sources, and access
  control lists to create a new table of contents that will be displayed to project users.
  """
  publishTableOfContents(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PublishTableOfContentsInput!
  ): PublishTableOfContentsPayload

  """
  Remove a group from a given access control list. Must be an administrator.
  """
  removeGroupFromAcl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveGroupFromAclInput!
  ): RemoveGroupFromAclPayload

  """
  Remove the given user from a group. Must be an administrator of the project.
  """
  removeUserFromGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveUserFromGroupInput!
  ): RemoveUserFromGroupPayload

  """
  Remove a SketchClass from the list of valid children for a Collection.
  
  """
  removeValidChildSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveValidChildSketchClassInput!
  ): RemoveValidChildSketchClassPayload

  """Replace the tileset for an existing data source"""
  replacePMTiles(dataSourceId: Int!, pmtilesKey: String!): DataLayer!

  """
  Re-sends an email verification link to the canonical email for the
  current user session
  """
  resendVerificationEmail: SendVerificationEmailResults!

  """
  Remove participant admin privileges.
  
  """
  revokeAdminAccess(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RevokeAdminAccessInput!
  ): RevokeAdminAccessPayload
  revokeApiKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RevokeApiKeyInput!
  ): RevokeApiKeyPayload
  rollbackToArchivedSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RollbackToArchivedSourceInput!
  ): RollbackToArchivedSourcePayload

  """
  Send all UNSENT invites in the current project.
  
  """
  sendAllProjectInvites(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendAllProjectInvitesInput!
  ): SendAllProjectInvitesPayload

  """
  Send an email to the user with a link to verify their email address.
  If the user's email is already verified, no email will be sent.
  """
  sendEmailVerification(redirectUrl: String): EmailVerificationStatus!

  """
  Send a list of project invites identified by their id.
  
  """
  sendProjectInvites(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendProjectInvitesInput!
  ): SendProjectInvitesPayload

  """
  Send a reminder email for a survey invite that has already been sent.
  Returns the same inviteId if successful.
  """
  sendSurveyInviteReminder(
    """ID of survey invite"""
    inviteId: Int!
  ): Int
  setDataUploadTaskChangelog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetDataUploadTaskChangelogInput!
  ): SetDataUploadTaskChangelogPayload

  """
  Sets the enable_download flag for all overlays in a project. Note this is only
  applied to draft items, so will require a publish to impact project users.
  """
  setEnableDownloadForAllOverlays(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetEnableDownloadForAllOverlaysInput!
  ): SetEnableDownloadForAllOverlaysPayload
  setFormElementBackground(backgroundColor: String!, backgroundHeight: Int!, backgroundPalette: [String]!, backgroundUrl: String!, backgroundWidth: Int!, downloadUrl: String!, id: Int!, secondaryColor: String!, unsplashAuthorName: String!, unsplashAuthorUrl: String!): FormElement!

  """
  Sets the positions of all elements in a form at once. Any missing element ids from
  the input will be positioned at the end of the form.
  
  Use this instead of trying to manage the position of form elements individually.
  
  """
  setFormElementOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetFormElementOrderInput!
  ): SetFormElementOrderPayload
  setFormLogicRuleOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetFormLogicRuleOrderInput!
  ): SetFormLogicRuleOrderPayload

  """
  Set the order in which discussion forums will be displayed. Provide a list of
  forum IDs in the correct order. Missing ids will be added to the end of the list.
  
  """
  setForumOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetForumOrderInput!
  ): SetForumOrderPayload

  """
  Admins can use this function to hide the contents of a message. Message will
  still appear in the client with the missing content, and should link to the
  Community Guidelines for why the post may have been hidden. If admins want all
  evidence of the post removed they must delete it.
  
  """
  setPostHiddenByModerator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetPostHiddenByModeratorInput!
  ): SetPostHiddenByModeratorPayload

  """
  Lock a topic so that it can no longer be responded to. Past discussion will
  still be visible. This mutation is only available to project admins.
  """
  setTopicLocked(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetTopicLockedInput!
  ): SetTopicLockedPayload

  """
  Admins can use this mutation to place topics at the top of the forum listing.
  
  """
  setTopicSticky(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetTopicStickyInput!
  ): SetTopicStickyPayload
  setTranslatedProp(id: Int!, propName: String!, translations: [TranslatedPropInput!]!, typeName: String!): setTranslatedPropResult!

  """
  Sets the list of groups that the given user belongs to. Will clear all other
  group memberships in the project. Available only to admins.
  
  """
  setUserGroups(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetUserGroupsInput!
  ): SetUserGroupsPayload

  """Superusers only. Promote a sprite to be globally available."""
  shareSprite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ShareSpriteInput!
  ): ShareSpritePayload

  """
  Superusers only. "Deletes" a sprite but keeps it in the DB in case layers are already referencing it.
  """
  softDeleteSprite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SoftDeleteSpriteInput!
  ): SoftDeleteSpritePayload
  submitDataUpload(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SubmitDataUploadInput!
  ): SubmitDataUploadPayload

  """
  Toggle admin access for the given project and user. User must have already
  joined the project and shared their user profile.
  """
  toggleAdminAccess(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ToggleAdminAccessInput!
  ): ToggleAdminAccessPayload

  """Ban a user from posting in the discussion forum"""
  toggleForumPostingBan(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ToggleForumPostingBanInput!
  ): ToggleForumPostingBanPayload
  toggleLanguageSupport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ToggleLanguageSupportInput!
  ): ToggleLanguageSupportPayload
  toggleResponsesPractice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ToggleResponsesPracticeInput!
  ): ToggleResponsesPracticePayload
  updateAboutPageContent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAboutPageContentInput!
  ): UpdateAboutPageContentPayload
  updateAboutPageEnabled(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAboutPageEnabledInput!
  ): UpdateAboutPageEnabledPayload

  """Updates a single `Acl` using a unique key and a patch."""
  updateAcl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclInput!
  ): UpdateAclPayload

  """Updates a single `Acl` using a unique key and a patch."""
  updateAclByBasemapId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclByBasemapIdInput!
  ): UpdateAclPayload

  """Updates a single `Acl` using its globally unique id and a patch."""
  updateAclByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclByNodeIdInput!
  ): UpdateAclPayload

  """Updates a single `Acl` using a unique key and a patch."""
  updateAclBySketchClassId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclBySketchClassIdInput!
  ): UpdateAclPayload

  """Updates a single `Acl` using a unique key and a patch."""
  updateAclByTableOfContentsItemId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclByTableOfContentsItemIdInput!
  ): UpdateAclPayload

  """Updates a single `Basemap` using a unique key and a patch."""
  updateBasemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasemapInput!
  ): UpdateBasemapPayload

  """Updates a single `Basemap` using its globally unique id and a patch."""
  updateBasemapByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasemapByNodeIdInput!
  ): UpdateBasemapPayload
  updateBasemapOfflineTileSettings(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasemapOfflineTileSettingsInput!
  ): UpdateBasemapOfflineTileSettingsPayload

  """Updates a single `CommunityGuideline` using a unique key and a patch."""
  updateCommunityGuideline(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommunityGuidelineInput!
  ): UpdateCommunityGuidelinePayload

  """
  Updates a single `CommunityGuideline` using its globally unique id and a patch.
  """
  updateCommunityGuidelineByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommunityGuidelineByNodeIdInput!
  ): UpdateCommunityGuidelinePayload
  updateDataHostingQuota(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataHostingQuotaInput!
  ): UpdateDataHostingQuotaPayload

  """Updates a single `DataLayer` using a unique key and a patch."""
  updateDataLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataLayerInput!
  ): UpdateDataLayerPayload

  """Updates a single `DataLayer` using a unique key and a patch."""
  updateDataLayerByInteractivitySettingsId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataLayerByInteractivitySettingsIdInput!
  ): UpdateDataLayerPayload

  """Updates a single `DataLayer` using its globally unique id and a patch."""
  updateDataLayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataLayerByNodeIdInput!
  ): UpdateDataLayerPayload

  """Updates a single `DataSource` using a unique key and a patch."""
  updateDataSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataSourceInput!
  ): UpdateDataSourcePayload

  """
  Updates a single `DataSource` using its globally unique id and a patch.
  """
  updateDataSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataSourceByNodeIdInput!
  ): UpdateDataSourcePayload

  """
  Updates a single `EmailNotificationPreference` using a unique key and a patch.
  """
  updateEmailNotificationPreferenceByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmailNotificationPreferenceByUserIdInput!
  ): UpdateEmailNotificationPreferencePayload

  """Updates a single `Form` using a unique key and a patch."""
  updateForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormInput!
  ): UpdateFormPayload

  """Updates a single `Form` using its globally unique id and a patch."""
  updateFormByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormByNodeIdInput!
  ): UpdateFormPayload

  """Updates a single `Form` using a unique key and a patch."""
  updateFormBySketchClassId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormBySketchClassIdInput!
  ): UpdateFormPayload

  """Updates a single `Form` using a unique key and a patch."""
  updateFormBySurveyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormBySurveyIdInput!
  ): UpdateFormPayload

  """Updates a single `FormElement` using a unique key and a patch."""
  updateFormElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormElementInput!
  ): UpdateFormElementPayload

  """
  Updates a single `FormElement` using its globally unique id and a patch.
  """
  updateFormElementByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormElementByNodeIdInput!
  ): UpdateFormElementPayload

  """Updates a single `FormLogicCondition` using a unique key and a patch."""
  updateFormLogicCondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormLogicConditionInput!
  ): UpdateFormLogicConditionPayload

  """
  Updates a single `FormLogicCondition` using its globally unique id and a patch.
  """
  updateFormLogicConditionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormLogicConditionByNodeIdInput!
  ): UpdateFormLogicConditionPayload

  """Updates a single `FormLogicRule` using a unique key and a patch."""
  updateFormLogicRule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormLogicRuleInput!
  ): UpdateFormLogicRulePayload

  """
  Updates a single `FormLogicRule` using its globally unique id and a patch.
  """
  updateFormLogicRuleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormLogicRuleByNodeIdInput!
  ): UpdateFormLogicRulePayload

  """Updates a single `Forum` using a unique key and a patch."""
  updateForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateForumInput!
  ): UpdateForumPayload

  """Updates a single `Forum` using its globally unique id and a patch."""
  updateForumByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateForumByNodeIdInput!
  ): UpdateForumPayload

  """Updates a single `Geography` using a unique key and a patch."""
  updateGeography(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeographyInput!
  ): UpdateGeographyPayload

  """Updates a single `Geography` using its globally unique id and a patch."""
  updateGeographyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeographyByNodeIdInput!
  ): UpdateGeographyPayload

  """
  Updates a single `GeographyClippingLayer` using a unique key and a patch.
  """
  updateGeographyClippingLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeographyClippingLayerInput!
  ): UpdateGeographyClippingLayerPayload

  """
  Updates a single `GeographyClippingLayer` using its globally unique id and a patch.
  """
  updateGeographyClippingLayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGeographyClippingLayerByNodeIdInput!
  ): UpdateGeographyClippingLayerPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByNodeIdInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroupByProjectIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByProjectIdAndNameInput!
  ): UpdateGroupPayload

  """
  Updates a single `InteractivitySetting` using a unique key and a patch.
  """
  updateInteractivitySetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInteractivitySettingInput!
  ): UpdateInteractivitySettingPayload

  """
  Updates a single `InteractivitySetting` using its globally unique id and a patch.
  """
  updateInteractivitySettingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInteractivitySettingByNodeIdInput!
  ): UpdateInteractivitySettingPayload
  updateMapboxSecretKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapboxSecretKeyInput!
  ): UpdateMapboxSecretKeyPayload

  """Updates a single `OfflineTileSetting` using a unique key and a patch."""
  updateOfflineTileSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOfflineTileSettingInput!
  ): UpdateOfflineTileSettingPayload

  """
  Updates a single `OfflineTileSetting` using its globally unique id and a patch.
  """
  updateOfflineTileSettingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOfflineTileSettingByNodeIdInput!
  ): UpdateOfflineTileSettingPayload

  """Updates a single `OfflineTileSetting` using a unique key and a patch."""
  updateOfflineTileSettingByProjectIdAndBasemapId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOfflineTileSettingByProjectIdAndBasemapIdInput!
  ): UpdateOfflineTileSettingPayload

  """
  Updates a single `OptionalBasemapLayer` using a unique key and a patch.
  """
  updateOptionalBasemapLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOptionalBasemapLayerInput!
  ): UpdateOptionalBasemapLayerPayload

  """
  Updates a single `OptionalBasemapLayer` using its globally unique id and a patch.
  """
  updateOptionalBasemapLayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOptionalBasemapLayerByNodeIdInput!
  ): UpdateOptionalBasemapLayerPayload

  """
  Updates the contents of the post. Can only be used by the author for 5 minutes after posting.
  
  """
  updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """Updates a single `Profile` using a unique key and a patch."""
  updateProfileByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileByUserIdInput!
  ): UpdateProfilePayload

  """Updates a single `Project` using a unique key and a patch."""
  updateProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInput!
  ): UpdateProjectPayload

  """Updates a single `Project` using its globally unique id and a patch."""
  updateProjectByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectByNodeIdInput!
  ): UpdateProjectPayload

  """Updates a single `Project` using a unique key and a patch."""
  updateProjectBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectBySlugInput!
  ): UpdateProjectPayload
  updateProjectGeography(
    id: Int!

    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectGeographyPayload!
  ): GeographyUpdatedPayload!
  updateProjectInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInviteInput!
  ): UpdateProjectInvitePayload

  """Updates a single `ProjectInviteGroup` using a unique key and a patch."""
  updateProjectInviteGroupByInviteIdAndGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInviteGroupByInviteIdAndGroupIdInput!
  ): UpdateProjectInviteGroupPayload

  """
  Updates a single `ProjectsSharedBasemap` using a unique key and a patch.
  """
  updateProjectsSharedBasemapByBasemapIdAndProjectId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectsSharedBasemapByBasemapIdAndProjectIdInput!
  ): UpdateProjectsSharedBasemapPayload

  """
  If preprocessing is enabled,
  the sketch's final geometry will be set by running the proprocessing
  function again on userGeom. This ensures the value conforms to the
  project's rules, and also benefits the user in that they need not submit
  a huge geometry to the server.
  
  When updating a sketch, be sure to use the Sketch.parentCollection
  association to update the client graphql cache with an up to date
  updatedAt timestamp. This will ensure a correct cache key is used when
  requesting collection reports.
  """
  updateSketch(
    id: Int!

    """Name for the sketch. Required."""
    name: String!

    """Form element data"""
    properties: JSON!

    """Sketch as drawn by the user. If unchanged this can be omitted"""
    userGeom: GeoJSON
  ): Sketch

  """Updates a single `SketchClass` using a unique key and a patch."""
  updateSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchClassInput!
  ): UpdateSketchClassPayload

  """Updates a single `SketchClass` using a unique key and a patch."""
  updateSketchClassByFormElementId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchClassByFormElementIdInput!
  ): UpdateSketchClassPayload

  """
  Updates a single `SketchClass` using its globally unique id and a patch.
  """
  updateSketchClassByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchClassByNodeIdInput!
  ): UpdateSketchClassPayload
  updateSketchClassGeographies(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchClassGeographiesInput!
  ): UpdateSketchClassGeographiesPayload

  """Admin mutation for updating the mapbox gl style for a sketch class"""
  updateSketchClassMapboxGLStyle(sketchClassId: Int!, style: JSON): SketchClass!

  """Updates a single `SketchFolder` using a unique key and a patch."""
  updateSketchFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchFolderInput!
  ): UpdateSketchFolderPayload

  """
  Updates a single `SketchFolder` using its globally unique id and a patch.
  """
  updateSketchFolderByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchFolderByNodeIdInput!
  ): UpdateSketchFolderPayload
  updateSketchParent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchParentInput!
  ): UpdateSketchParentPayload

  """
  Create to respond to drag & drop actions in the sketch table of contents.
  Can assign a folder_id or collection_id to one or multiple Sketches or
  SketchFolders.
  
  Returns an updatedCollections property which should be used to update the
  updatedAt property on related collections so that correct cache keys are
  used when requesting reports.
  """
  updateSketchTocItemParent(collectionId: Int, folderId: Int, tocItems: [UpdateTocItemParentInput]!): UpdateSketchTocItemParentResults

  """Updates a single `Survey` using a unique key and a patch."""
  updateSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInput!
  ): UpdateSurveyPayload

  """Updates a single `Survey` using its globally unique id and a patch."""
  updateSurveyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyByNodeIdInput!
  ): UpdateSurveyPayload

  """Updates a single `SurveyInvite` using a unique key and a patch."""
  updateSurveyInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInviteInput!
  ): UpdateSurveyInvitePayload

  """Updates a single `SurveyInvite` using a unique key and a patch."""
  updateSurveyInviteByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInviteByEmailInput!
  ): UpdateSurveyInvitePayload

  """Updates a single `SurveyInvite` using a unique key and a patch."""
  updateSurveyInviteByEmailAndSurveyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInviteByEmailAndSurveyIdInput!
  ): UpdateSurveyInvitePayload

  """
  Updates a single `SurveyInvite` using its globally unique id and a patch.
  """
  updateSurveyInviteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInviteByNodeIdInput!
  ): UpdateSurveyInvitePayload

  """
  Updates the list of groups that should have access to the given survey. Users
  in any added groups will get an invite, and the system will create an invite for
  any users that are added to the group. When removing a group, the system will
  delete invites for any user that is no longer in an invited group. *Clients
  should warn admins of this behavior when removing groups for an active survey*.
  
  The list of invited groups can be accessed via `Survey.invitedGroups`.
  
  """
  updateSurveyInvitedGroups(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInvitedGroupsInput!
  ): UpdateSurveyInvitedGroupsPayload

  """Updates a single `SurveyResponse` using a unique key and a patch."""
  updateSurveyResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyResponseInput!
  ): UpdateSurveyResponsePayload

  """
  Updates a single `SurveyResponse` using its globally unique id and a patch.
  """
  updateSurveyResponseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyResponseByNodeIdInput!
  ): UpdateSurveyResponsePayload

  """Updates a single `TableOfContentsItem` using a unique key and a patch."""
  updateTableOfContentsItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTableOfContentsItemInput!
  ): UpdateTableOfContentsItemPayload

  """Updates a single `TableOfContentsItem` using a unique key and a patch."""
  updateTableOfContentsItemByDataLayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTableOfContentsItemByDataLayerIdInput!
  ): UpdateTableOfContentsItemPayload

  """
  Updates a single `TableOfContentsItem` using its globally unique id and a patch.
  """
  updateTableOfContentsItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTableOfContentsItemByNodeIdInput!
  ): UpdateTableOfContentsItemPayload
  updateTableOfContentsItemChildren(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTableOfContentsItemChildrenInput!
  ): UpdateTableOfContentsItemChildrenPayload
  updateTocMetadataFromXML(filename: String, id: Int!, xmlMetadata: String!): TableOfContentsItem!

  """Updates a single `Topic` using a unique key and a patch."""
  updateTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicInput!
  ): UpdateTopicPayload

  """Updates a single `Topic` using its globally unique id and a patch."""
  updateTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicByNodeIdInput!
  ): UpdateTopicPayload
  updateZIndexes(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateZIndexesInput!
  ): UpdateZIndexesPayload

  """Use to upload pdf documents for use with the Consent FormElement"""
  uploadConsentDocument(document: Upload!, formElementId: Int!, version: Int!): FormElement!

  """Upload mapbox-gl-style documents for use as basemaps"""
  uploadStyle(
    """Existing basemap ID, if updating"""
    id: Int

    """Name for the basemap"""
    name: String!
    projectId: Int!

    """Style json file"""
    style: JSON!
    surveysOnly: Boolean
    thumb: Upload!
  ): Basemap!
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type OfflineSourceDetails {
  dataSourceUrl: String!
  templateUrl: String!

  """Whether a tile packages is available for download"""
  tilePackages: [OfflineTilePackage!]!
  type: OfflineTilePackageSourceType!
}

"""Provides information on resources necessary to use a basemap offline"""
type OfflineSupportInformation {
  hasUncacheableSources: Boolean!
  id: ID!
  sources: [OfflineSourceDetails!]!
  staticAssets: [CacheableOfflineAsset!]!
  styleLastModified: Date
}

type OfflineTilePackage implements Node {
  bytes: Int!
  createdAt: Datetime!
  dataSourceUrl: String!
  error: String @deprecated(reason: "Use jobErrors instead")
  id: UUID!
  isMapboxHosted: Boolean!
  jobErrors: String
  jobStatus: OfflineTilePackageStatus
  maxShorelineZ: Int
  maxZ: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  originalUrlTemplate: String!

  """Can be used to download a tilepackage (if permitted)"""
  presignedUrl: String!

  """Reads a single `Project` that is related to this `OfflineTilePackage`."""
  project: Project
  projectId: Int!
  region: GeometryPolygon!
  sourceType: OfflineTilePackageSourceType!
  status: OfflineTilePackageStatus! @deprecated(reason: "Use jobStatus instead")
  tilesFetched: Int!
  totalTiles: Int!
}

"""
A condition to be used against `OfflineTilePackage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OfflineTilePackageCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""A connection to a list of `OfflineTilePackage` values."""
type OfflineTilePackagesConnection {
  """
  A list of edges which contains the `OfflineTilePackage` and cursor to aid in pagination.
  """
  edges: [OfflineTilePackagesEdge!]!

  """A list of `OfflineTilePackage` objects."""
  nodes: [OfflineTilePackage!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OfflineTilePackage` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OfflineTilePackage` edge in the connection."""
type OfflineTilePackagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OfflineTilePackage` at the end of the edge."""
  node: OfflineTilePackage!
}

"""Methods to use when ordering `OfflineTilePackage`."""
enum OfflineTilePackagesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

enum OfflineTilePackageSourceType {
  RASTER
  RASTER_DEM
  VECTOR
}

enum OfflineTilePackageStatus {
  COMPLETE
  FAILED
  GENERATING
  QUEUED
  UPLOADING
}

type OfflineTileSetting implements Node {
  """Reads a single `Basemap` that is related to this `OfflineTileSetting`."""
  basemap: Basemap
  basemapId: Int
  id: Int!
  maxShorelineZ: Int
  maxZ: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `OfflineTileSetting`."""
  project: Project
  projectId: Int!
  region: GeometryPolygon!
}

"""
A condition to be used against `OfflineTileSetting` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OfflineTileSettingCondition {
  """Checks for equality with the object’s `basemapId` field."""
  basemapId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""An input for mutations affecting `OfflineTileSetting`"""
input OfflineTileSettingInput {
  basemapId: Int
  id: Int
  maxShorelineZ: Int
  maxZ: Int
  projectId: Int!
  region: GeoJSON!
}

"""
Represents an update to a `OfflineTileSetting`. Fields that are set will be updated.
"""
input OfflineTileSettingPatch {
  basemapId: Int
  id: Int
  maxShorelineZ: Int
  maxZ: Int
  projectId: Int
  region: GeoJSON
}

"""Methods to use when ordering `OfflineTileSetting`."""
enum OfflineTileSettingsOrderBy {
  BASEMAP_ID_ASC
  BASEMAP_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""
Available only for MapBox GL Style-based basemaps. Specifies optional components of the basemap that can be shown or hidden.

"""
type OptionalBasemapLayer implements Node {
  """
  Reads a single `Basemap` that is related to this `OptionalBasemapLayer`.
  """
  basemap: Basemap
  basemapId: Int!
  defaultVisibility: Boolean!
  description: String

  """
  Specify RADIO or SELECT if this option should be presented as a group of
  options. Useful for mutually exclusive views like different years for the same
  dataset, or a heatmap display of density for multiple species where a single
  species must be chosen from a list. If left null, the option will be treated as standalone.
  """
  groupType: OptionalBasemapLayersGroupType!
  id: Int!

  """IDs for layers in the gl style that will be toggled by this option."""
  layers: [String]!

  """JSON representation of a ProseMirror document with layer metadata."""
  metadata: JSON

  """Label that will be given in the UI"""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  options: JSON
}

"""
A condition to be used against `OptionalBasemapLayer` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OptionalBasemapLayerCondition {
  """Checks for equality with the object’s `basemapId` field."""
  basemapId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `OptionalBasemapLayer`"""
input OptionalBasemapLayerInput {
  basemapId: Int!
  defaultVisibility: Boolean
  description: String

  """
  Specify RADIO or SELECT if this option should be presented as a group of
  options. Useful for mutually exclusive views like different years for the same
  dataset, or a heatmap display of density for multiple species where a single
  species must be chosen from a list. If left null, the option will be treated as standalone.
  """
  groupType: OptionalBasemapLayersGroupType
  id: Int

  """IDs for layers in the gl style that will be toggled by this option."""
  layers: [String]

  """JSON representation of a ProseMirror document with layer metadata."""
  metadata: JSON

  """Label that will be given in the UI"""
  name: String!
  options: JSON
}

"""
Represents an update to a `OptionalBasemapLayer`. Fields that are set will be updated.
"""
input OptionalBasemapLayerPatch {
  basemapId: Int
  defaultVisibility: Boolean
  description: String

  """
  Specify RADIO or SELECT if this option should be presented as a group of
  options. Useful for mutually exclusive views like different years for the same
  dataset, or a heatmap display of density for multiple species where a single
  species must be chosen from a list. If left null, the option will be treated as standalone.
  """
  groupType: OptionalBasemapLayersGroupType
  id: Int

  """IDs for layers in the gl style that will be toggled by this option."""
  layers: [String]

  """JSON representation of a ProseMirror document with layer metadata."""
  metadata: JSON

  """Label that will be given in the UI"""
  name: String
  options: JSON
}

enum OptionalBasemapLayersGroupType {
  NONE
  RADIO
  SELECT
}

"""Methods to use when ordering `OptionalBasemapLayer`."""
enum OptionalBasemapLayersOrderBy {
  BASEMAP_ID_ASC
  BASEMAP_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type OutstandingSurveyInvites {
  projectId: Int!
  surveyId: Int!
  token: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

enum ParticipantSortBy {
  EMAIL
  NAME
}

enum ParticipationStatus {
  NONE
  PARTICIPANT_HIDDEN_PROFILE
  PARTICIPANT_SHARED_PROFILE
  PENDING_APPROVAL
}

type Post implements Node {
  authorId: Int!

  """
  User Profile of the author. If a user has not shared their profile the post message will be hidden.
  
  """
  authorProfile: Profile
  blurb: String
  bookmarkAttachmentIds: [UUID]!
  createdAt: Datetime!

  """Reads and enables pagination through a set of `FileUpload`."""
  fileUploads(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [FileUpload!]

  """Reads and enables pagination through a set of `FileUpload`."""
  fileUploadsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileUploadCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FileUpload`."""
    orderBy: [FileUploadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FileUploadsConnection!

  """
  If set, the post has been hidden by a project admin. Contents of the post will
  not be available to the client. Admins should update this field using
  `setPostHiddenByModerator()`.
  """
  hiddenByModerator: Boolean!
  html: String!
  id: Int!

  """Reads and enables pagination through a set of `MapBookmark`."""
  mapBookmarks(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [MapBookmark!]

  """
  Message contents of the post as JSON for use with DraftJS. 
  
  Message may be null if user is not currently sharing their profile, in which 
  case the client should explain such. 
  
  Message could also be null if `hiddenByModerator` is set. In that case the 
  client should explain that the post violated the `CommunityGuidelines`, if set.
  
  """
  message: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  orderedAttachmentIds: [String]
  sketchIds: [Int]

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic
  topicId: Int!
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `topicId` field."""
  topicId: Int
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """A list of `Post` objects."""
  nodes: [Post!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post!
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
}

type PresignedUrl {
  key: String!
  url: String!
}

"""
Personal information that users have contributed. This information is only 
accessible directly to admins on projects where the user has chosen to share the
information (via the `joinProject()` mutation).

Regular SeaSketch users can access user profiles thru accessor fields on shared
content like forum posts if they have been shared, but regular users have no 
means of listing out all profiles in bulk.

"""
type Profile {
  affiliations: String
  email: Email
  fullname: String
  nickname: String
  picture: String

  """Reads a single `User` that is related to this `Profile`."""
  user: User
  userId: Int!
}

"""
Represents an update to a `Profile`. Fields that are set will be updated.
"""
input ProfilePatch {
  affiliations: String
  email: Email
  fullname: String
  nickname: String
  picture: Upload
  userId: Int
}

"""A connection to a list of `Profile` values."""
type ProfilesConnection {
  """
  A list of edges which contains the `Profile` and cursor to aid in pagination.
  """
  edges: [ProfilesEdge!]!

  """A list of `Profile` objects."""
  nodes: [Profile!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Profile` you could get from the connection."""
  totalCount: Int!
}

"""A `Profile` edge in the connection."""
type ProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Profile` at the end of the edge."""
  node: Profile!
}

"""Methods to use when ordering `Profile`."""
enum ProfilesOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
}

"""
SeaSketch Project type. This root type contains most of the fields and queries
needed to drive the application.

"""
type Project implements Node {
  aboutPageContents: JSON!
  aboutPageEnabled: Boolean!

  """
  Metadata will be returned as directly stored in the SeaSketch
  database or computed by fetching from a 3rd party service,
  depending on the data source type.
  """
  aboutPageRenderedContent: [RenderedAboutPageContent]

  """
  Admins can control whether a project is public, invite-only, or admins-only.
  """
  accessControl: ProjectAccessControlSetting!

  """Reads and enables pagination through a set of `User`."""
  accessRequestsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    orderBy: ParticipantSortBy
  ): UsersConnection!

  """Reads and enables pagination through a set of `DataUploadTask`."""
  activeDataUploads(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [DataUploadTask!]
  activity(period: ActivityStatsPeriod): ProjectActivityStat
  adminCount: Int

  """Reads and enables pagination through a set of `User`."""
  admins(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [User!]

  """Reads and enables pagination through a set of `ApiKey`."""
  apiKeysConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApiKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApiKey`."""
    orderBy: [ApiKeysOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApiKeysConnection!

  """Reads and enables pagination through a set of `Basemap`."""
  basemaps(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Basemap!]

  """Reads and enables pagination through a set of `Basemap`."""
  basemapsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasemapCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsConnection!

  """Reads a single `CommunityGuideline` that is related to this `Project`."""
  communityGuidelines: CommunityGuideline
  createdAt: Datetime
  creatorId: Int!
  customDocLink: String
  dataHostingQuota: BigInt
  dataHostingQuotaUsed: BigInt
  dataHostingRetentionPeriod: Interval

  """
  Retrieve DataLayers for a given set of TableOfContentsItem IDs. Should be used
  in conjuction with `dataSourcesForItems` to progressively load layer information
  when users request layers be displayed on the map.
  
  """
  dataLayersForItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    tableOfContentsItemIds: [Int]
  ): [DataLayer!]

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  dataSourcesBucketId: String

  """
  Retrieve DataSources for a given set of TableOfContentsItem IDs. Should be used
  in conjuction with `dataLayersForItems` to progressively load layer information
  when users request layers be displayed on the map.
  
  """
  dataSourcesForItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    tableOfContentsItemIds: [Int]
  ): [DataSource!]

  """Should be a short length in order to fit in the project header."""
  description: String
  downloadableLayersCount: Int
  draftTableOfContentsHasChanges: Boolean!

  """
  Draft layer lists, accessible only to admins. Make edits to the layer list and
  then use the `publishTableOfContents` mutation when it is ready for end-users.
  
  """
  draftTableOfContentsItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [TableOfContentsItem!]
  eligableDownloadableLayersCount: Int

  """
  When true, overlay layers will be available for download by end-users if they
  have access to the layer and the data source supports it. This can be
  controlled on a per-layer basis.
  """
  enableDownloadByDefault: Boolean!
  enableReportBuilder: Boolean
  estimateDeletedDataForRetentionChange(newRetentionPeriod: IntervalInput): RetentionChangeEstimate

  """Reads and enables pagination through a set of `Forum`."""
  forums(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ForumCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!]
  ): [Forum!]!

  """Reads and enables pagination through a set of `Geography`."""
  geographies(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeographyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Geography`."""
    orderBy: [GeographiesOrderBy!]
  ): [Geography!]!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]!
  hideForums: Boolean!
  hideOverlays: Boolean!
  hideSketches: Boolean!
  id: Int!
  importedArcgisServices: [String]

  """
  Returns the project invitation for the current user session, if any. Will not
  appear until the invite has been sent. The system determines the relevant
  invite using the `canonical_email` claim in the user access token.
  
  If the invite status is unconfirmed the client should accept it using the
  `confirmProjectInviteWithVerifiedEmail()` mutation. Details on how to work
  with user ingress and project invites [can be found on the
  wiki](https://github.com/seasketch/next/wiki/User-Ingress).
  
  """
  invite: ProjectInvite

  """
  Breakdown of number of invites per status. Used to display counts in overview
  listing of users, groups, and invites in the user administration dashboard.
  
  """
  inviteCounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [InviteStat!]
  inviteEmailSubject: String!

  """List project invites by status"""
  invitesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    orderBy: InviteOrderBy
    statuses: [InviteStatus]
  ): ProjectInvitesConnection!

  """
  Returns true if the given user is an administrator of the project. Informaiton
  is only available administrators of the project and will otherwise always return false.
  
  """
  isAdmin(userId: Int): Boolean

  """
  Featured projects may be given prominent placement on the homepage. This property can only be modified by superusers.
  """
  isFeatured: Boolean!

  """
  Project admins can decide whether their project will be displayed on the
  public project listing via Query.projectsConnection.
  """
  isListed: Boolean!
  isOfflineEnabled: Boolean

  """Reads and enables pagination through a set of `Post`."""
  latestPostsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): PostsConnection!

  """
  If a logoUrl is provided, it will link to this url in a new window if provided.
  """
  logoLink: String

  """
  URL referencing an image that will be used to represent the project. Will be
  displayed at 48x48 pixels and must be a public url.
  """
  logoUrl: String
  mapboxPublicKey: String
  mapboxSecretKey: String

  """Reads and enables pagination through a set of `ProjectMapDataRequest`."""
  mapDataRequests(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    period: ActivityStatsPeriod
  ): [ProjectMapDataRequest!]

  """Reads and enables pagination through a set of `TableOfContentsItem`."""
  mostUsedLayers(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    period: ActivityStatsPeriod
  ): [TableOfContentsItem!]

  """
  List of all folders created by this user.
  
  """
  myFolders(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SketchFolder!]

  """
  A list of all sketches for this project and the current user session
  
  """
  mySketches(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Sketch!]
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `OfflineTilePackage`."""
  offlineTilePackagesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfflineTilePackageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OfflineTilePackage`."""
    orderBy: [OfflineTilePackagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OfflineTilePackagesConnection!

  """Reads and enables pagination through a set of `OfflineTileSetting`."""
  offlineTileSettings(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfflineTileSettingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `OfflineTileSetting`."""
    orderBy: [OfflineTileSettingsOrderBy!]
  ): [OfflineTileSetting!]!

  """
  Count of all users who have opted into participating in the project, sharing their profile with project administrators.
  """
  participantCount: Int

  """
  All users who have opted into participating in the project, sharing 
  their profile with project administrators.
  
  If the project is invite-only, users who have not been approved will not appear
  in this list. Those users can be accessed via `unapprovedParticipants()`
  
  """
  participants(
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    orderBy: ParticipantSortBy
  ): [User!]

  """Reads and enables pagination through a set of `ProjectBackgroundJob`."""
  projectBackgroundJobs(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectBackgroundJobCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ProjectBackgroundJob`."""
    orderBy: [ProjectBackgroundJobsOrderBy!]
  ): [ProjectBackgroundJob!]!
  region: GeometryPolygon!

  """
  Whether the current user has any discussion forum posts in this project. Use
  this to determine whether `project.communityGuidelines` should be shown to the
  user before their first post.
  """
  sessionHasPosts: Boolean

  """
  Indicates whether current session should have special access or group
  privileges. These grants will not be active if the user does not have a
  verified email address.
  
  Clients should check for situations where a user access token has a false
  `email_verified` cliam paired with privileged access. If that is the case they
  should prompt users to confirm their email address.
  
  """
  sessionHasPrivilegedAccess: Boolean

  """
  Returns true if the user has admin privileges on this project. Will return
  true even if the session email is not verified, but permissions will not work until it is.
  """
  sessionIsAdmin: Boolean

  """
  Invites (and related tokens) for surveys which this user has not yet responded
  to. Details on how to handle survey invites [can be found on the
  wiki](https://github.com/seasketch/next/wiki/User-Ingress#survey-invites).
  
  """
  sessionOutstandingSurveyInvites(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SurveyTokenInfo!]
  sessionParticipationStatus: ParticipationStatus
  showLegendByDefault: Boolean
  showScalebarByDefault: Boolean

  """Reads and enables pagination through a set of `SketchClass`."""
  sketchClasses(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SketchClassCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!]
  ): [SketchClass!]!

  """
  This token can be used to access this user's sketches from the geojson endpoint.
  For example, `/sketches/123.geojson.json?access_token=xxx`
  Returns null if user is not singed in. Can be used only for a single
  project. Must be refreshed occasionally.
  """
  sketchGeometryToken: String

  """
  Short identifier for the project used in the url. This property cannot be changed after project creation.
  """
  slug: String!

  """Reads and enables pagination through a set of `Sprite`."""
  sprites(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Sprite!]
  supportedLanguages: [String]!
  supportEmail: String!

  """Reads and enables pagination through a set of `Basemap`."""
  surveyBasemaps(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Basemap!]

  """Reads and enables pagination through a set of `Survey`."""
  surveys(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Survey`."""
    orderBy: [SurveysOrderBy!]
  ): [Survey!]!

  """
  Public layer list. Cannot be edited directly.
  
  """
  tableOfContentsItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [TableOfContentsItem!]
  tableOfContentsLastPublished: Datetime
  translatedProps: JSON!

  """
  Number of users who have outstanding access requests. Only relevant for invite-only projects.
  
  """
  unapprovedParticipantCount: Int

  """
  For invite-only projects. List all pending participation requests.
  
  Users can be approved using the `approveParticipant()` mutation.
  
  """
  unapprovedParticipants(
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    orderBy: ParticipantSortBy
  ): [User!]

  """Reads and enables pagination through a set of `DataSource`."""
  uploadedDraftDataSources(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [DataSource!]

  """Project url will resolve to `https://seasketch.org/{slug}/`"""
  url: String

  """
  List of all banned users. Listing only accessible to admins.
  
  """
  usersBannedFromForums(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [User!]

  """Reads and enables pagination through a set of `ProjectVisitorMetric`."""
  visitorMetrics(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    period: ActivityStatsPeriod
  ): [ProjectVisitorMetric!]

  """Reads and enables pagination through a set of `Visitor`."""
  visitors(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    period: ActivityStatsPeriod
  ): [Visitor!]
}

enum ProjectAccessControlSetting {
  ADMINS_ONLY
  INVITE_ONLY
  PUBLIC
}

enum ProjectAccessStatus {
  DENIED_ADMINS_ONLY
  DENIED_ANON
  DENIED_EMAIL_NOT_VERIFIED
  DENIED_NOT_APPROVED
  DENIED_NOT_REQUESTED
  GRANTED
  PROJECT_DOES_NOT_EXIST
}

type ProjectActivityStat {
  dataSources: Int
  forumPosts: Int
  newDataSources: Int
  newForumPosts: Int
  newSketches: Int
  newSurveyResponses: Int
  newUploadedBytes: BigInt
  newUploadedLayers: Int
  newUsers: Int
  registeredUsers: Int
  sketches: Int
  surveyResponses: Int
  uploadedLayers: Int
  uploadsStorageUsed: BigInt
}

type ProjectBackgroundJob implements Node {
  createdAt: Datetime!
  dataUploadTask: DataUploadTask

  """Reads and enables pagination through a set of `DataUploadTask`."""
  dataUploadTasksConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataUploadTaskCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataUploadTask`."""
    orderBy: [DataUploadTasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataUploadTasksConnection!
  errorMessage: String
  esriFeatureLayerConversionTask: EsriFeatureLayerConversionTask
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  progress: BigFloat
  progressMessage: String!

  """
  Reads a single `Project` that is related to this `ProjectBackgroundJob`.
  """
  project: Project
  projectId: Int!
  startedAt: Datetime
  state: ProjectBackgroundJobState!
  timeoutAt: Datetime!
  title: String!
  type: ProjectBackgroundJobType!
  userId: Int!
}

"""
A condition to be used against `ProjectBackgroundJob` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProjectBackgroundJobCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""Methods to use when ordering `ProjectBackgroundJob`."""
enum ProjectBackgroundJobsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

enum ProjectBackgroundJobState {
  COMPLETE
  FAILED
  QUEUED
  RUNNING
}

type ProjectBackgroundJobSubscriptionPayload {
  id: UUID!
  job: ProjectBackgroundJob
  previousState: ProjectBackgroundJobState
  project: Project!
  projectId: Int!
}

enum ProjectBackgroundJobType {
  ARCGIS_IMPORT
  CONSOLIDATE_DATA_SOURCES
  DATA_UPLOAD
  REPLACEMENT_UPLOAD
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """Checks for equality with the object’s `accessControl` field."""
  accessControl: ProjectAccessControlSetting

  """Checks for equality with the object’s `dataSourcesBucketId` field."""
  dataSourcesBucketId: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isFeatured` field."""
  isFeatured: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

type ProjectDraftTableOfContentsStatusPayload {
  hasChanges: Boolean!
  project: Project
  projectId: Int!
}

"""
Admins can invite users to their project, adding them to user groups and 
distributing admin privileges as needed. Invitations can be immediately sent via
email or they can be sent out later in batches. 

Use the `createProjectInvites()`
mutation to create one or more invitations and then use graphile generated 
mutations to update and delete them.

Details on [handling user ingress with invitation
tokens](https://github.com/seasketch/next/wiki/User-Ingress#project-invites) and [the mailer subsystem](https://github.com/seasketch/next/wiki/User-and-Survey-Invite-Management)
can be found on the wiki.

"""
type ProjectInvite implements Node {
  createdAt: Datetime!

  """Specified by admin when invite was created."""
  email: Email!

  """Specified by admin when invite was created."""
  fullname: String

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Group!]
  id: Int!

  """Reads and enables pagination through a set of `InviteEmail`."""
  inviteEmails(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteEmailCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `InviteEmail`."""
    orderBy: [InviteEmailsOrderBy!]
  ): [InviteEmail!]!

  """
  User will be made an admin of the project if true. They will not be given special access until their email is verified.
  """
  makeAdmin: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  participationStatus: ParticipationStatus
  projectId: Int!

  """Reads and enables pagination through a set of `ProjectInviteGroup`."""
  projectInviteGroupsByInviteIdConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInviteGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectInviteGroup`."""
    orderBy: [ProjectInviteGroupsOrderBy!] = [NATURAL]
  ): ProjectInviteGroupsConnection!
  status: InviteStatus

  """Is set upon invite acceptance."""
  userId: Int

  """Project invite has already been accepted."""
  wasUsed: Boolean!
}

type ProjectInviteGroup {
  """Reads a single `Group` that is related to this `ProjectInviteGroup`."""
  group: Group
  groupId: Int!

  """
  Reads a single `ProjectInvite` that is related to this `ProjectInviteGroup`.
  """
  invite: ProjectInvite
  inviteId: Int!
}

"""
A condition to be used against `ProjectInviteGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectInviteGroupCondition {
  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `inviteId` field."""
  inviteId: Int
}

"""An input for mutations affecting `ProjectInviteGroup`"""
input ProjectInviteGroupInput {
  groupId: Int!
  inviteId: Int!
}

"""
Represents an update to a `ProjectInviteGroup`. Fields that are set will be updated.
"""
input ProjectInviteGroupPatch {
  groupId: Int
  inviteId: Int
}

"""A connection to a list of `ProjectInviteGroup` values."""
type ProjectInviteGroupsConnection {
  """
  A list of edges which contains the `ProjectInviteGroup` and cursor to aid in pagination.
  """
  edges: [ProjectInviteGroupsEdge!]!

  """A list of `ProjectInviteGroup` objects."""
  nodes: [ProjectInviteGroup!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectInviteGroup` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProjectInviteGroup` edge in the connection."""
type ProjectInviteGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectInviteGroup` at the end of the edge."""
  node: ProjectInviteGroup!
}

"""Methods to use when ordering `ProjectInviteGroup`."""
enum ProjectInviteGroupsOrderBy {
  GROUP_ID_ASC
  GROUP_ID_DESC
  INVITE_ID_ASC
  INVITE_ID_DESC
  NATURAL
}

"""An input for mutations affecting `ProjectInviteOption`"""
input ProjectInviteOptionInput {
  email: Email
  fullname: String
}

"""A connection to a list of `ProjectInvite` values."""
type ProjectInvitesConnection {
  """
  A list of edges which contains the `ProjectInvite` and cursor to aid in pagination.
  """
  edges: [ProjectInvitesEdge!]!

  """A list of `ProjectInvite` objects."""
  nodes: [ProjectInvite!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectInvite` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectInvite` edge in the connection."""
type ProjectInvitesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectInvite` at the end of the edge."""
  node: ProjectInvite!
}

type ProjectInviteStateSubscriptionPayload {
  invite: ProjectInvite
}

type ProjectInviteTokenClaims {
  admin: Boolean!
  email: String!
  fullname: String
  inviteId: Int!
  projectId: Int!
  projectName: String!
  projectSlug: String!
  wasUsed: Boolean!
}

type ProjectInviteTokenVerificationResults {
  claims: ProjectInviteTokenClaims
  error: String

  """
  Indicates whether there is an existing account that matches the email address on the invite
  """
  existingAccount: Boolean
}

type ProjectMapDataRequest implements Node {
  cacheHitRatio: Float!
  count: Int!
  interval: Interval!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Project` that is related to this `ProjectMapDataRequest`.
  """
  project: Project
  projectId: Int!
  timestamp: Datetime!
}

"""
Represents an update to a `Project`. Fields that are set will be updated.
"""
input ProjectPatch {
  """
  Admins can control whether a project is public, invite-only, or admins-only.
  """
  accessControl: ProjectAccessControlSetting
  customDocLink: String
  dataHostingRetentionPeriod: IntervalInput
  dataSourcesBucketId: String

  """Should be a short length in order to fit in the project header."""
  description: String

  """
  When true, overlay layers will be available for download by end-users if they
  have access to the layer and the data source supports it. This can be
  controlled on a per-layer basis.
  """
  enableDownloadByDefault: Boolean
  enableReportBuilder: Boolean
  hideForums: Boolean
  hideOverlays: Boolean
  hideSketches: Boolean
  inviteEmailSubject: String

  """
  Featured projects may be given prominent placement on the homepage. This property can only be modified by superusers.
  """
  isFeatured: Boolean

  """
  Project admins can decide whether their project will be displayed on the
  public project listing via Query.projectsConnection.
  """
  isListed: Boolean

  """
  If a logoUrl is provided, it will link to this url in a new window if provided.
  """
  logoLink: String

  """
  URL referencing an image that will be used to represent the project. Will be
  displayed at 48x48 pixels and must be a public url.
  """
  logoUrl: Upload
  mapboxPublicKey: String
  name: String
  region: GeoJSON
  showLegendByDefault: Boolean
  showScalebarByDefault: Boolean
  translatedProps: JSON
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """A list of `Project` objects."""
  nodes: [Project!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project!
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  ACCESS_CONTROL_ASC
  ACCESS_CONTROL_DESC
  DATA_SOURCES_BUCKET_ID_ASC
  DATA_SOURCES_BUCKET_ID_DESC
  ID_ASC
  ID_DESC
  IS_FEATURED_ASC
  IS_FEATURED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

type ProjectsSharedBasemap {
  """
  Reads a single `Basemap` that is related to this `ProjectsSharedBasemap`.
  """
  basemap: Basemap
  basemapId: Int!
  projectId: Int!
}

"""
A condition to be used against `ProjectsSharedBasemap` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProjectsSharedBasemapCondition {
  """Checks for equality with the object’s `basemapId` field."""
  basemapId: Int
}

"""An input for mutations affecting `ProjectsSharedBasemap`"""
input ProjectsSharedBasemapInput {
  basemapId: Int!
  projectId: Int!
}

"""
Represents an update to a `ProjectsSharedBasemap`. Fields that are set will be updated.
"""
input ProjectsSharedBasemapPatch {
  basemapId: Int
  projectId: Int
}

"""A connection to a list of `ProjectsSharedBasemap` values."""
type ProjectsSharedBasemapsConnection {
  """
  A list of edges which contains the `ProjectsSharedBasemap` and cursor to aid in pagination.
  """
  edges: [ProjectsSharedBasemapsEdge!]!

  """A list of `ProjectsSharedBasemap` objects."""
  nodes: [ProjectsSharedBasemap!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectsSharedBasemap` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProjectsSharedBasemap` edge in the connection."""
type ProjectsSharedBasemapsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectsSharedBasemap` at the end of the edge."""
  node: ProjectsSharedBasemap!
}

"""Methods to use when ordering `ProjectsSharedBasemap`."""
enum ProjectsSharedBasemapsOrderBy {
  BASEMAP_ID_ASC
  BASEMAP_ID_DESC
  NATURAL
}

type ProjectVisitorMetric implements Node {
  interval: Interval!
  month: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Project` that is related to this `ProjectVisitorMetric`.
  """
  project: Project
  projectId: Int!
  timestamp: Datetime!
  topBrowsers: JSON!
  topCountries: JSON!
  topDeviceTypes: JSON!
  topOperatingSystems: JSON!
  topReferrers: JSON!
}

type PublicProjectDetail {
  accessControl: ProjectAccessControlSetting
  accessStatus: ProjectAccessStatus
  id: Int
  logoUrl: String
  name: String
  slug: String
  supportEmail: String
}

"""All input for the `publishTableOfContents` mutation."""
input PublishTableOfContentsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `publishTableOfContents` mutation."""
type PublishTableOfContentsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItems: [TableOfContentsItem!]
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  acl(id: Int!): Acl
  aclByBasemapId(basemapId: Int!): Acl

  """Reads a single `Acl` using its globally unique `ID`."""
  aclByNodeId(
    """The globally unique `ID` to be used in selecting a single `Acl`."""
    nodeId: ID!
  ): Acl
  aclBySketchClassId(sketchClassId: Int!): Acl
  aclByTableOfContentsItemId(tableOfContentsItemId: Int!): Acl

  """Reads and enables pagination through a set of `Project`."""
  activeProjects(
    """Only read the first `n` values of the set."""
    first: Int
    limit: Int

    """Skip the first `n` values."""
    offset: Int
    period: ActivityStatsPeriod
  ): [Project!]
  apiKey(id: UUID!): ApiKey

  """Reads a single `ApiKey` using its globally unique `ID`."""
  apiKeyByNodeId(
    """The globally unique `ID` to be used in selecting a single `ApiKey`."""
    nodeId: ID!
  ): ApiKey

  """Reads and enables pagination through a set of `ApiKey`."""
  apiKeysConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApiKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApiKey`."""
    orderBy: [ApiKeysOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApiKeysConnection
  archivedDataSource(dataLayerId: Int!, dataSourceId: Int!, version: Int!): ArchivedDataSource

  """Reads a single `ArchivedDataSource` using its globally unique `ID`."""
  archivedDataSourceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ArchivedDataSource`.
    """
    nodeId: ID!
  ): ArchivedDataSource

  """Reads and enables pagination through a set of `ArchivedDataSource`."""
  archivedDataSourcesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArchivedDataSourceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArchivedDataSource`."""
    orderBy: [ArchivedDataSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArchivedDataSourcesConnection
  basemap(id: Int!): Basemap

  """Reads a single `Basemap` using its globally unique `ID`."""
  basemapByNodeId(
    """The globally unique `ID` to be used in selecting a single `Basemap`."""
    nodeId: ID!
  ): Basemap

  """Reads and enables pagination through a set of `Basemap`."""
  basemapsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasemapCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsConnection
  bookmarkById(id: UUID): MapBookmark

  """
  GraphQL server software build identifier. During a deployment, if changes are
  not detected in software modules some may be skipped. So, client and server
  version could differ.
  
  We return "dev" if build cannot be determined from deployment environment.
  """
  build: String!
  camelCase(snakeCase: String): String
  collectAttachmentIdsFromProsemirrorBody(body: JSON, type: String): [String]
  collectTextFromProsemirrorBodyForLabel(body: JSON): String
  communityGuideline(projectId: Int!): CommunityGuideline

  """Reads a single `CommunityGuideline` using its globally unique `ID`."""
  communityGuidelineByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CommunityGuideline`.
    """
    nodeId: ID!
  ): CommunityGuideline
  currentProject: Project @deprecated(reason: "Use projectBySlug() instead")
  currentProjectAccessStatus: ProjectAccessStatus @deprecated(reason: "Use project_access_status(slug) instead")
  currentUserIsSuperuser: Boolean!
  dashboardStats: DashboardStat
  dataLayer(id: Int!): DataLayer
  dataLayerByInteractivitySettingsId(interactivitySettingsId: Int!): DataLayer

  """Reads a single `DataLayer` using its globally unique `ID`."""
  dataLayerByNodeId(
    """The globally unique `ID` to be used in selecting a single `DataLayer`."""
    nodeId: ID!
  ): DataLayer
  dataSource(id: Int!): DataSource

  """Reads a single `DataSource` using its globally unique `ID`."""
  dataSourceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `DataSource`.
    """
    nodeId: ID!
  ): DataSource
  dataSourcesBucket(url: String!): DataSourcesBucket

  """Reads a single `DataSourcesBucket` using its globally unique `ID`."""
  dataSourcesBucketByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `DataSourcesBucket`.
    """
    nodeId: ID!
  ): DataSourcesBucket

  """Reads and enables pagination through a set of `DataSourcesBucket`."""
  dataSourcesBucketsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataSourcesBucketCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataSourcesBucket`."""
    orderBy: [DataSourcesBucketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesBucketsConnection
  dataUploadTask(id: UUID!): DataUploadTask

  """Reads a single `DataUploadTask` using its globally unique `ID`."""
  dataUploadTaskByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `DataUploadTask`.
    """
    nodeId: ID!
  ): DataUploadTask

  """Reads and enables pagination through a set of `DataUploadTask`."""
  dataUploadTasksConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataUploadTaskCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataUploadTask`."""
    orderBy: [DataUploadTasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataUploadTasksConnection
  eezlayer: TableOfContentsItem
  emailNotificationPreferenceByUserId(userId: Int!): EmailNotificationPreference

  """
  Reads and enables pagination through a set of `EmailNotificationPreference`.
  """
  emailNotificationPreferencesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailNotificationPreferenceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmailNotificationPreference`."""
    orderBy: [EmailNotificationPreferencesOrderBy!] = [NATURAL]
  ): EmailNotificationPreferencesConnection
  extractSpriteIds(t: String): [Int]
  fileUpload(id: UUID!): FileUpload

  """Reads a single `FileUpload` using its globally unique `ID`."""
  fileUploadByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FileUpload`.
    """
    nodeId: ID!
  ): FileUpload

  """Reads and enables pagination through a set of `FileUpload`."""
  fileUploadsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileUploadCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FileUpload`."""
    orderBy: [FileUploadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FileUploadsConnection
  form(id: Int!): Form

  """Reads a single `Form` using its globally unique `ID`."""
  formByNodeId(
    """The globally unique `ID` to be used in selecting a single `Form`."""
    nodeId: ID!
  ): Form
  formBySketchClassId(sketchClassId: Int!): Form
  formBySurveyId(surveyId: Int!): Form
  formElement(id: Int!): FormElement

  """Reads a single `FormElement` using its globally unique `ID`."""
  formElementByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FormElement`.
    """
    nodeId: ID!
  ): FormElement
  formElementType(componentName: String!): FormElementType
  formElementTypeByLabel(label: String!): FormElementType

  """Reads a single `FormElementType` using its globally unique `ID`."""
  formElementTypeByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FormElementType`.
    """
    nodeId: ID!
  ): FormElementType

  """Reads a set of `FormElementType`."""
  formElementTypes(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormElementTypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `FormElementType`."""
    orderBy: [FormElementTypesOrderBy!]
  ): [FormElementType!]
  formLogicCondition(id: Int!): FormLogicCondition

  """Reads a single `FormLogicCondition` using its globally unique `ID`."""
  formLogicConditionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FormLogicCondition`.
    """
    nodeId: ID!
  ): FormLogicCondition
  formLogicRule(id: Int!): FormLogicRule

  """Reads a single `FormLogicRule` using its globally unique `ID`."""
  formLogicRuleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FormLogicRule`.
    """
    nodeId: ID!
  ): FormLogicRule
  forum(id: Int!): Forum

  """Reads a single `Forum` using its globally unique `ID`."""
  forumByNodeId(
    """The globally unique `ID` to be used in selecting a single `Forum`."""
    nodeId: ID!
  ): Forum
  generateExportId(body: JSON, exportId: String, id: Int): String
  generateLabel(body: JSON, id: Int): String

  """Reads a set of `Geography`."""
  geographies(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeographyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Geography`."""
    orderBy: [GeographiesOrderBy!]
  ): [Geography!]
  geography(id: Int!): Geography

  """Reads a single `Geography` using its globally unique `ID`."""
  geographyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Geography`."""
    nodeId: ID!
  ): Geography
  geographyClippingLayer(id: Int!): GeographyClippingLayer

  """
  Reads a single `GeographyClippingLayer` using its globally unique `ID`.
  """
  geographyClippingLayerByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GeographyClippingLayer`.
    """
    nodeId: ID!
  ): GeographyClippingLayer

  """Reads and enables pagination through a set of `DataLayer`."""
  geographyClippingLayers(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [DataLayer!]

  """
  Reads and enables pagination through a set of `GeographyClippingLayer`.
  """
  geographyClippingLayersConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GeographyClippingLayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GeographyClippingLayer`."""
    orderBy: [GeographyClippingLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeographyClippingLayersConnection
  getDefaultDataSourcesBucket: String
  getFirstBandOffset(geostats: JSON): Float
  getFirstBandScale(geostats: JSON): Float
  getRepresentativeColors(geostats: JSON): JSON

  """Reads and enables pagination through a set of `Survey`."""
  getSurveys(
    """Only read the first `n` values of the set."""
    first: Int
    ids: [Int]

    """Skip the first `n` values."""
    offset: Int
  ): [Survey!]
  getUnsplashPhotos(query: String!): UnsplashSearchResult!
  gmapssatellitesession: GoogleMapsTileApiSession
  group(id: Int!): Group

  """Reads a single `Group` using its globally unique `ID`."""
  groupByNodeId(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group
  groupByProjectIdAndName(name: String!, projectId: Int!): Group
  interactivitySetting(id: Int!): InteractivitySetting

  """Reads a single `InteractivitySetting` using its globally unique `ID`."""
  interactivitySettingByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `InteractivitySetting`.
    """
    nodeId: ID!
  ): InteractivitySetting
  inviteEmail(id: Int!): InviteEmail

  """Reads a single `InviteEmail` using its globally unique `ID`."""
  inviteEmailByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `InviteEmail`.
    """
    nodeId: ID!
  ): InviteEmail
  isMyEmailVerified: Boolean!
  lcfirst(word: String): String

  """Reads and enables pagination through a set of `MapBookmark`."""
  mapBookmarksConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapBookmarkCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MapBookmark`."""
    orderBy: [MapBookmarksOrderBy!] = [NATURAL]
  ): MapBookmarksConnection

  """Reads and enables pagination through a set of `MapDataRequest`."""
  mapDataRequests(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    period: ActivityStatsPeriod
  ): [MapDataRequest!]

  """
  Access the current session's User. The user is determined by the access token embedded in the `Authorization` header.
  """
  me: User

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  offlineTilePackage(id: UUID!): OfflineTilePackage

  """Reads a single `OfflineTilePackage` using its globally unique `ID`."""
  offlineTilePackageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OfflineTilePackage`.
    """
    nodeId: ID!
  ): OfflineTilePackage

  """Reads and enables pagination through a set of `OfflineTilePackage`."""
  offlineTilePackagesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfflineTilePackageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OfflineTilePackage`."""
    orderBy: [OfflineTilePackagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OfflineTilePackagesConnection
  offlineTileSetting(id: Int!): OfflineTileSetting

  """Reads a single `OfflineTileSetting` using its globally unique `ID`."""
  offlineTileSettingByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OfflineTileSetting`.
    """
    nodeId: ID!
  ): OfflineTileSetting
  offlineTileSettingByProjectIdAndBasemapId(basemapId: Int!, projectId: Int!): OfflineTileSetting

  """Reads a set of `OfflineTileSetting`."""
  offlineTileSettings(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OfflineTileSettingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `OfflineTileSetting`."""
    orderBy: [OfflineTileSettingsOrderBy!]
  ): [OfflineTileSetting!]
  optionalBasemapLayer(id: Int!): OptionalBasemapLayer

  """Reads a single `OptionalBasemapLayer` using its globally unique `ID`."""
  optionalBasemapLayerByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OptionalBasemapLayer`.
    """
    nodeId: ID!
  ): OptionalBasemapLayer
  post(id: Int!): Post

  """Reads a single `Post` using its globally unique `ID`."""
  postByNodeId(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    nodeId: ID!
  ): Post

  """Reads and enables pagination through a set of `Post`."""
  postsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection
  profileByUserId(userId: Int!): Profile
  project(id: Int!): Project
  projectAccessStatus(pid: Int): ProjectAccessStatus
  projectBackgroundJob(id: UUID!): ProjectBackgroundJob

  """Reads a single `ProjectBackgroundJob` using its globally unique `ID`."""
  projectBackgroundJobByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProjectBackgroundJob`.
    """
    nodeId: ID!
  ): ProjectBackgroundJob

  """Reads a set of `ProjectBackgroundJob`."""
  projectBackgroundJobs(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectBackgroundJobCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ProjectBackgroundJob`."""
    orderBy: [ProjectBackgroundJobsOrderBy!]
  ): [ProjectBackgroundJob!]

  """Reads a single `Project` using its globally unique `ID`."""
  projectByNodeId(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    nodeId: ID!
  ): Project
  projectBySlug(slug: String!): Project
  projectInvite(id: Int!): ProjectInvite
  projectInviteByEmailAndProjectId(email: Email!, projectId: Int!): ProjectInvite

  """Reads a single `ProjectInvite` using its globally unique `ID`."""
  projectInviteByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProjectInvite`.
    """
    nodeId: ID!
  ): ProjectInvite
  projectInviteGroupByInviteIdAndGroupId(groupId: Int!, inviteId: Int!): ProjectInviteGroup

  """Reads and enables pagination through a set of `ProjectInviteGroup`."""
  projectInviteGroupsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInviteGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectInviteGroup`."""
    orderBy: [ProjectInviteGroupsOrderBy!] = [NATURAL]
  ): ProjectInviteGroupsConnection
  projectPublicDetails(slug: String): PublicProjectDetail

  """Reads and enables pagination through a set of `Project`."""
  projectsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection
  projectsSharedBasemapByBasemapIdAndProjectId(basemapId: Int!, projectId: Int!): ProjectsSharedBasemap

  """Reads and enables pagination through a set of `ProjectsSharedBasemap`."""
  projectsSharedBasemapsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectsSharedBasemapCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectsSharedBasemap`."""
    orderBy: [ProjectsSharedBasemapsOrderBy!] = [NATURAL]
  ): ProjectsSharedBasemapsConnection

  """
  Used by project administrators to access a list of public sprites promoted by the SeaSketch development team.
  
  """
  publicSprites(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Sprite!]

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads and enables pagination through a set of `SearchResult`."""
  searchOverlays(
    draft: Boolean

    """Only read the first `n` values of the set."""
    first: Int
    lang: String
    limit: Int

    """Skip the first `n` values."""
    offset: Int
    projectId: Int
    query: String
  ): [SearchResult!]
  sessionIsBannedFromPosting(pid: Int): Boolean
  sharedBasemaps: Basemap
  sketch(id: Int!): Sketch

  """Reads a single `Sketch` using its globally unique `ID`."""
  sketchByNodeId(
    """The globally unique `ID` to be used in selecting a single `Sketch`."""
    nodeId: ID!
  ): Sketch
  sketchClass(id: Int!): SketchClass
  sketchClassByFormElementId(formElementId: Int!): SketchClass

  """Reads a single `SketchClass` using its globally unique `ID`."""
  sketchClassByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SketchClass`.
    """
    nodeId: ID!
  ): SketchClass
  sketchFolder(id: Int!): SketchFolder

  """Reads a single `SketchFolder` using its globally unique `ID`."""
  sketchFolderByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SketchFolder`.
    """
    nodeId: ID!
  ): SketchFolder

  """Reads and enables pagination through a set of `SketchFolder`."""
  sketchFoldersConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SketchFolderCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersConnection
  sprite(id: Int!): Sprite

  """Reads a single `Sprite` using its globally unique `ID`."""
  spriteByNodeId(
    """The globally unique `ID` to be used in selecting a single `Sprite`."""
    nodeId: ID!
  ): Sprite
  spriteImageBySpriteIdAndPixelRatio(pixelRatio: Int!, spriteId: Int!): SpriteImage
  survey(id: Int!): Survey

  """Reads a single `Survey` using its globally unique `ID`."""
  surveyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Survey`."""
    nodeId: ID!
  ): Survey
  surveyConsentDocument(id: Int!): SurveyConsentDocument
  surveyConsentDocumentByFormElementIdAndVersion(formElementId: Int!, version: Int!): SurveyConsentDocument

  """Reads a single `SurveyConsentDocument` using its globally unique `ID`."""
  surveyConsentDocumentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SurveyConsentDocument`.
    """
    nodeId: ID!
  ): SurveyConsentDocument

  """Reads and enables pagination through a set of `SurveyConsentDocument`."""
  surveyConsentDocumentsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyConsentDocumentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SurveyConsentDocument`."""
    orderBy: [SurveyConsentDocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyConsentDocumentsConnection
  surveyInvite(id: Int!): SurveyInvite
  surveyInviteByEmail(email: Email!): SurveyInvite
  surveyInviteByEmailAndSurveyId(email: Email!, surveyId: Int!): SurveyInvite

  """Reads a single `SurveyInvite` using its globally unique `ID`."""
  surveyInviteByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SurveyInvite`.
    """
    nodeId: ID!
  ): SurveyInvite
  surveyInvitedGroupBySurveyIdAndGroupId(groupId: Int!, surveyId: Int!): SurveyInvitedGroup
  surveyResponse(id: Int!): SurveyResponse

  """Reads a single `SurveyResponse` using its globally unique `ID`."""
  surveyResponseByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SurveyResponse`.
    """
    nodeId: ID!
  ): SurveyResponse

  """Reads and enables pagination through a set of `SurveyResponse`."""
  surveyResponsesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyResponseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesConnection
  tableOfContentsItem(id: Int!): TableOfContentsItem
  tableOfContentsItemByDataLayerId(dataLayerId: Int!): TableOfContentsItem
  tableOfContentsItemByIdentifier(id: Int, stableId: String): TableOfContentsItem

  """Reads a single `TableOfContentsItem` using its globally unique `ID`."""
  tableOfContentsItemByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TableOfContentsItem`.
    """
    nodeId: ID!
  ): TableOfContentsItem
  tableOfContentsItemByStableId(stableId: String): TableOfContentsItem

  """Reads and enables pagination through a set of `Form`."""
  templateForms(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Form!]

  """
  List of template sketch classes such as "Marine Protected Area", "MPA Network", etc.
  
  """
  templateSketchClasses(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SketchClass!]
  tilebbox(srid: Int, x: Int, y: Int, z: Int): GeometryInterface
  toGraphqlId(id: Int, type: String): String
  topic(id: Int!): Topic

  """Reads a single `Topic` using its globally unique `ID`."""
  topicByNodeId(
    """The globally unique `ID` to be used in selecting a single `Topic`."""
    nodeId: ID!
  ): Topic

  """Reads and enables pagination through a set of `Topic`."""
  topicsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection
  user(id: Int!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """
  Verify whether the an invite token has a valid signature and has not yet
  expired.
  
  Use before attempting the confirmProjectInvite() mutation.
  More details on how to handle invites can be found
  [on the wiki](https://github.com/seasketch/next/wiki/User-Ingress#project-invites)
  """
  verifyProjectInvite(
    """JWT string"""
    token: String!
  ): ProjectInviteTokenVerificationResults

  """
  Verify whether the an invite token has a valid signature and has not yet
  expired or been used.
  
  Use before starting an invite-only survey. For info on invite handling
  [see the wiki](https://github.com/seasketch/next/wiki/User-Ingress#survey-invites)
  """
  verifySurveyInvite(
    """JWT string"""
    token: String!
  ): SurveyInviteTokenVerificationResults
  visitorByIntervalAndTimestamp(interval: IntervalInput!, timestamp: Datetime!): Visitor

  """Reads and enables pagination through a set of `VisitorMetric`."""
  visitorMetrics(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    period: ActivityStatsPeriod
  ): [VisitorMetric!]

  """Reads and enables pagination through a set of `Visitor`."""
  visitors(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    period: ActivityStatsPeriod
  ): [Visitor!]

  """Reads and enables pagination through a set of `Visitor`."""
  visitorsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VisitorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Visitor`."""
    orderBy: [VisitorsOrderBy!] = [NATURAL]
  ): VisitorsConnection
}

type QuotaDetail {
  bytes: BigInt
  id: Int
  isArchived: Boolean
  isOriginal: Boolean
  type: DataUploadOutputType
}

enum RasterDemEncoding {
  MAPBOX
  TERRARIUM
}

"""All input for the `removeGroupFromAcl` mutation."""
input RemoveGroupFromAclInput {
  aclId: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
}

"""The output of our `removeGroupFromAcl` mutation."""
type RemoveGroupFromAclPayload {
  acl: Acl

  """Reads a single `Basemap` that is related to this `Acl`."""
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Acl`."""
  sketchClass: SketchClass

  """Reads a single `TableOfContentsItem` that is related to this `Acl`."""
  tableOfContentsItem: TableOfContentsItem
}

"""All input for the `removeUserFromGroup` mutation."""
input RemoveUserFromGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
  userId: Int
}

"""The output of our `removeUserFromGroup` mutation."""
type RemoveUserFromGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `removeValidChildSketchClass` mutation."""
input RemoveValidChildSketchClassInput {
  child: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parent: Int
}

"""The output of our `removeValidChildSketchClass` mutation."""
type RemoveValidChildSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type RenderedAboutPageContent {
  html: String
  lang: String
}

enum RenderUnderType {
  LABELS
  LAND
  NONE
}

type RetentionChangeEstimate {
  bytes: BigInt
  numSources: Int
}

"""All input for the `revokeAdminAccess` mutation."""
input RevokeAdminAccessInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `revokeAdminAccess` mutation."""
type RevokeAdminAccessPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `revokeApiKey` mutation."""
input RevokeApiKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID
}

"""The output of our `revokeApiKey` mutation."""
type RevokeApiKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `rollbackToArchivedSource` mutation."""
input RollbackToArchivedSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rollbackGlStyle: Boolean
  sourceId: Int
}

"""The output of our `rollbackToArchivedSource` mutation."""
type RollbackToArchivedSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItem: TableOfContentsItem

  """An edge for our `TableOfContentsItem`. May be used by Relay 1."""
  tableOfContentsItemEdge(
    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsEdge
}

type SearchResult {
  id: Int
  isFolder: Boolean
  metadataHeadline: String
  stableId: String
  titleHeadline: String
}

"""All input for the `sendAllProjectInvites` mutation."""
input SendAllProjectInvitesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `sendAllProjectInvites` mutation."""
type SendAllProjectInvitesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  inviteEmails: [InviteEmail!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `sendProjectInvites` mutation."""
input SendProjectInvitesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  inviteIds: [Int]
}

"""The output of our `sendProjectInvites` mutation."""
type SendProjectInvitesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  inviteEmails: [InviteEmail!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type SendVerificationEmailResults {
  error: String
  success: Boolean!
}

"""All input for the `setDataUploadTaskChangelog` mutation."""
input SetDataUploadTaskChangelogInput {
  changelog: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dataUploadTaskId: UUID
}

"""The output of our `setDataUploadTaskChangelog` mutation."""
type SetDataUploadTaskChangelogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  dataUploadTask: DataUploadTask

  """An edge for our `DataUploadTask`. May be used by Relay 1."""
  dataUploadTaskEdge(
    """The method to use when ordering `DataUploadTask`."""
    orderBy: [DataUploadTasksOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataUploadTasksEdge

  """
  Reads a single `ProjectBackgroundJob` that is related to this `DataUploadTask`.
  """
  projectBackgroundJob: ProjectBackgroundJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `setEnableDownloadForAllOverlays` mutation."""
input SetEnableDownloadForAllOverlaysInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  enable: Boolean
  slug: String
}

"""The output of our `setEnableDownloadForAllOverlays` mutation."""
type SetEnableDownloadForAllOverlaysPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItems: [TableOfContentsItem!]
}

"""All input for the `setFormElementOrder` mutation."""
input SetFormElementOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  elementIds: [Int]
}

"""The output of our `setFormElementOrder` mutation."""
type SetFormElementOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formElements: [FormElement!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `setFormLogicRuleOrder` mutation."""
input SetFormLogicRuleOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ruleIds: [Int]
}

"""The output of our `setFormLogicRuleOrder` mutation."""
type SetFormLogicRuleOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formLogicRules: [FormLogicRule!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `setForumOrder` mutation."""
input SetForumOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  forumIds: [Int]
}

"""The output of our `setForumOrder` mutation."""
type SetForumOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  forums: [Forum!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `setPostHiddenByModerator` mutation."""
input SetPostHiddenByModeratorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  postId: Int
  value: Boolean
}

"""The output of our `setPostHiddenByModerator` mutation."""
type SetPostHiddenByModeratorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic
}

"""All input for the `setTopicLocked` mutation."""
input SetTopicLockedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  topicId: Int
  value: Boolean
}

"""The output of our `setTopicLocked` mutation."""
type SetTopicLockedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `setTopicSticky` mutation."""
input SetTopicStickyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  topicId: Int
  value: Boolean
}

"""The output of our `setTopicSticky` mutation."""
type SetTopicStickyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

type setTranslatedPropResult {
  id: Int!
  translatedProps: JSON!
  typeName: String!
}

"""All input for the `setUserGroups` mutation."""
input SetUserGroupsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groups: [Int]
  projectId: Int
  userId: Int
}

"""The output of our `setUserGroups` mutation."""
type SetUserGroupsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integers: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `shareSprite` mutation."""
input ShareSpriteInput {
  category: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  spriteId: Int
}

"""The output of our `shareSprite` mutation."""
type ShareSpritePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  sprite: Sprite
}

"""
A *Sketch* is a spatial feature that matches the schema defined by the related 
*SketchClass*. User *Sketches* appears in the user's "My Plans" tab and can be
shared in the discussion forum. They are also the gateway to analytical reports.

Sketches are completely owned by individual users, so access control rules 
ensure that only the owner of a sketch can perform CRUD operations on them. 
Admins have no special access. Use the graphile-generated mutations to manage 
these records.

"""
type Sketch implements Node {
  bbox: [Float]

  """
  If the sketch is a collection, includes an array of properties for all
  sketches that belong to it. These objects will match the `properties` member
  of the GeoJSON Feature representation of each sketch. This can be passed to
  report clients in the initialization message.
  """
  childProperties: JSON

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch

  """
  If the sketch is not a collection, it can belong to a collection (collections cannot be nested).
  """
  collectionId: Int

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch

  """
  If this Sketch started as a copy of another it is tracked here. Eventually
  SeaSketch may have a means of visualizing how plans are iterated on over time.
  """
  copyOf: Int
  createdAt: Datetime!
  filterMvtUrl: String

  """
  Parent folder. Both regular sketches and collections may be nested within folders for organization purposes.
  """
  folderId: Int

  """Reads a single `FormElement` that is related to this `Sketch`."""
  formElement: FormElement
  formElementId: Int

  """
  Use this to get a copy of the sketch with properties populated exactly as they
  would in the geojson or mvt endpoint. Useful for seeding a client-side cache.
  """
  geojsonFeature: JSON
  geojsonProperties: JSON

  """
  The geometry of the Sketch **after** it has been preprocessed. This is the
  geometry that is used for reporting. Preprocessed geometries may be extremely
  large and complex, so it may be necessary to access them through a vector tile
  service or some other optimization.
  """
  geom: GeometryGeometry
  id: Int!
  isCollection: Boolean
  mercatorGeometry: GeometryGeometry

  """User provided name for the sketch."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  numVertices: Int
  parentCollection: Sketch
  postId: Int
  properties: JSON!
  responseId: Int
  sharedInForum: Boolean!

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass

  """SketchClass that defines the behavior of this type of sketch."""
  sketchClassId: Int!

  """
  Greater of updatedAt, createdAt, as stringified epoch timestamp.
  Useful for requesting the latest geometry
  """
  timestamp: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Sketch`."""
  user: User
  userAttributes: JSON

  """
  Spatial feature the user directly digitized, without preprocessing. This is
  the feature that should be used if the Sketch is later edited.
  """
  userGeom: GeometryGeometry

  """Owner of the sketch."""
  userId: Int
}

enum SketchChildType {
  SKETCH
  SKETCH_FOLDER
}

"""
Sketch Classes act as a schema for sketches drawn by users.

"""
type SketchClass implements Node {
  """Reads a single `Acl` that is related to this `SketchClass`."""
  acl: Acl

  """
  If set to true, a geometry_type of POLYGON would allow for both POLYGONs and 
  MULTIPOLYGONs after preprocessing or on spatial file upload. Users will still 
  digitize single features. 
  
  Note that this feature should be used seldomly, since for planning purposes it 
  is unlikely to have non-contiguous zones.
  
  For CHOOSE_FEATURE geometry types, this field will enable the selction of 
  multiple features.
  
  """
  allowMulti: Boolean!

  """
  Whether the current user session is allowed to digitize sketches of this type.
  Digitizing is controlled by admins via access control lists, and archived
  sketch classes can only be digitized by admins.
  """
  canDigitize: Boolean
  clippingGeographies: [Geography]!
  filterApiServerLocation: String
  filterApiVersion: Int!

  """Reads a single `Form` that is related to this `SketchClass`."""
  form: Form

  """Reads a single `FormElement` that is related to this `SketchClass`."""
  formElement: FormElement

  """
  If set, this sketch class is only for use in a survey indicated by the form_element.
  
  """
  formElementId: Int

  """
  Geometry type users digitize. COLLECTION types act as a feature collection and have no drawn geometry.
  
  """
  geometryType: SketchGeometryType!

  """
  Name of the report to be displayed.
  
  """
  geoprocessingClientName: String

  """
  Endpoint for the client javascript bundle.
  
  """
  geoprocessingClientUrl: String

  """
  Root endpoint of a
  [@seasketch/geoprocessing](https://github.com/seasketch/geoprocessing) project
  that should be used for reporting.
  
  """
  geoprocessingProjectUrl: String
  id: Int!

  """
  If set to true, (non-admin) users should not be able to digitize new features
  using this sketch class, but they should still be able to access the sketch
  class in order to render existing sketches of this type.
  
  """
  isArchived: Boolean!
  isGeographyClippingEnabled: Boolean!
  isTemplate: Boolean!

  """
  [Mapbox GL Style](https://docs.mapbox.com/mapbox-gl-js/style-spec/) used to 
  render features. Sketches can be styled based on attribute data by using 
  [Expressions](https://docs.mapbox.com/help/glossary/expression/).
  
  """
  mapboxGlStyle: JSON

  """Label chosen by project admins that is shown to users."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  preprocessingEndpoint: String
  preprocessingProjectUrl: String

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """SketchClasses belong to a single project."""
  projectId: Int!

  """Number of sketches created with this sketch class"""
  sketchCount: BigInt
  templateDescription: String
  translatedProps: JSON!

  """Reads and enables pagination through a set of `SketchClass`."""
  validChildren(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SketchClass!]
}

"""
A condition to be used against `SketchClass` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SketchClassCondition {
  """Checks for equality with the object’s `formElementId` field."""
  formElementId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""A `SketchClass` edge in the connection."""
type SketchClassesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SketchClass` at the end of the edge."""
  node: SketchClass!
}

"""Methods to use when ordering `SketchClass`."""
enum SketchClassesOrderBy {
  FORM_ELEMENT_ID_ASC
  FORM_ELEMENT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""
Represents an update to a `SketchClass`. Fields that are set will be updated.
"""
input SketchClassPatch {
  """
  If set to true, a geometry_type of POLYGON would allow for both POLYGONs and 
  MULTIPOLYGONs after preprocessing or on spatial file upload. Users will still 
  digitize single features. 
  
  Note that this feature should be used seldomly, since for planning purposes it 
  is unlikely to have non-contiguous zones.
  
  For CHOOSE_FEATURE geometry types, this field will enable the selction of 
  multiple features.
  
  """
  allowMulti: Boolean
  filterApiServerLocation: String
  filterApiVersion: Int

  """
  Geometry type users digitize. COLLECTION types act as a feature collection and have no drawn geometry.
  
  """
  geometryType: SketchGeometryType

  """
  Name of the report to be displayed.
  
  """
  geoprocessingClientName: String

  """
  Endpoint for the client javascript bundle.
  
  """
  geoprocessingClientUrl: String

  """
  Root endpoint of a
  [@seasketch/geoprocessing](https://github.com/seasketch/geoprocessing) project
  that should be used for reporting.
  
  """
  geoprocessingProjectUrl: String

  """
  If set to true, (non-admin) users should not be able to digitize new features
  using this sketch class, but they should still be able to access the sketch
  class in order to render existing sketches of this type.
  
  """
  isArchived: Boolean
  isGeographyClippingEnabled: Boolean

  """Label chosen by project admins that is shown to users."""
  name: String
  preprocessingEndpoint: String
  preprocessingProjectUrl: String
  templateDescription: String
  translatedProps: JSON
}

type SketchFolder implements Node {
  """
  The parent sketch collection, if any. Folders can only have a single parent entity.
  """
  collectionId: Int

  """The parent folder, if any."""
  folderId: Int
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  postId: Int
  projectId: Int!
  sharedInForum: Boolean!
  userId: Int!
}

"""
A condition to be used against `SketchFolder` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SketchFolderCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""
Represents an update to a `SketchFolder`. Fields that are set will be updated.
"""
input SketchFolderPatch {
  """
  The parent sketch collection, if any. Folders can only have a single parent entity.
  """
  collectionId: Int

  """The parent folder, if any."""
  folderId: Int
  id: Int
  name: String
  postId: Int
  projectId: Int
  sharedInForum: Boolean
  userId: Int
}

"""A connection to a list of `SketchFolder` values."""
type SketchFoldersConnection {
  """
  A list of edges which contains the `SketchFolder` and cursor to aid in pagination.
  """
  edges: [SketchFoldersEdge!]!

  """A list of `SketchFolder` objects."""
  nodes: [SketchFolder!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SketchFolder` you could get from the connection."""
  totalCount: Int!
}

"""A `SketchFolder` edge in the connection."""
type SketchFoldersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SketchFolder` at the end of the edge."""
  node: SketchFolder!
}

"""Methods to use when ordering `SketchFolder`."""
enum SketchFoldersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

enum SketchGeometryType {
  CHOOSE_FEATURE
  COLLECTION
  FILTERED_PLANNING_UNITS
  LINESTRING
  POINT
  POLYGON
}

"""All input for the `softDeleteSprite` mutation."""
input SoftDeleteSpriteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int
}

"""The output of our `softDeleteSprite` mutation."""
type SoftDeleteSpritePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  sprite: Sprite
}

enum SortByDirection {
  ASC
  DESC
}

"""
Image sprites for use in Mapbox GL Styles. The database holds metadata about the
sprite, the actual images are in cloud storage referenced by the URL parameter. 

"""
type Sprite implements Node {
  category: String
  deleted: Boolean
  id: Int!

  """
  Hash of lowest-dpi image in the set (pixelRatio=1). Useful for de-duplicating
  symbols that have been imported multiple times
  """
  md5: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """If unset, sprite will be available for use in all projects"""
  projectId: Int

  """Reads and enables pagination through a set of `SpriteImage`."""
  spriteImages(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpriteImageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SpriteImage`."""
    orderBy: [SpriteImagesOrderBy!]
  ): [SpriteImage!]!

  """
  Optional. Indicates whether the image is intended for use with particular GL Styles
  """
  type: SpriteType
}

type SpriteImage {
  """Must be <= 1024"""
  height: Int!

  """
  Device pixel ratio a copy of this image supports. 2x would be for "retina"
  devices. Multiple records may point to the same sprite id, but each must have
  a unique combination of id, pixel_ratio, and data_layer_id.
  """
  pixelRatio: Int!

  """Reads a single `Sprite` that is related to this `SpriteImage`."""
  sprite: Sprite
  spriteId: Int!

  """Supports multipart Upload operations"""
  url: String!

  """Must be <= 1024"""
  width: Int!
}

"""
A condition to be used against `SpriteImage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SpriteImageCondition {
  """Checks for equality with the object’s `spriteId` field."""
  spriteId: Int
}

"""Methods to use when ordering `SpriteImage`."""
enum SpriteImagesOrderBy {
  NATURAL
  SPRITE_ID_ASC
  SPRITE_ID_DESC
}

enum SpriteType {
  FILL
  ICON
  LINE
}

enum SublayerType {
  RASTER
  VECTOR
}

"""All input for the `submitDataUpload` mutation."""
input SubmitDataUploadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID
}

"""The output of our `submitDataUpload` mutation."""
type SubmitDataUploadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Project` that is related to this `ProjectBackgroundJob`.
  """
  project: Project
  projectBackgroundJob: ProjectBackgroundJob

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  """Triggered on all updates to DataUploadTasks in a project"""
  backgroundJobs(slug: String!): ProjectBackgroundJobSubscriptionPayload

  """Triggered when a new post is created in the subscribed topic"""
  forumActivity(slug: String!): ForumActivityPayload

  """
  Triggered when the status of a project invite changes, generally because
  of a change in the delivery status of a related InviteEmail. Uses 
  x-ss-slug to determine appropriate project.
  """
  projectInviteStateUpdated: ProjectInviteStateSubscriptionPayload

  """Triggered when a project's draft table of contents status changes"""
  updatedDraftTableOfContentsStatus(slug: String!): ProjectDraftTableOfContentsStatusPayload

  """Triggered when a map bookmark is updated"""
  updatedMapBookmark(id: UUID!): BookmarkPayload
}

type Survey implements Node {
  """
  PUBLIC or INVITE_ONLY
  
  """
  accessType: SurveyAccessType!
  archivedResponseCount: Int

  """Reads and enables pagination through a set of `Basemap`."""
  basemaps(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Basemap!]

  """Reads a single `Form` that is related to this `Survey`."""
  form: Form

  """Reads and enables pagination through a set of `Form`."""
  formsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection! @deprecated(reason: "Please use form instead")

  """
  If set, responses that originate from an IP address outside this fence will be flagged.
  """
  geofence: GeographyPolygon
  id: Int!

  """Reads and enables pagination through a set of `Group`."""
  invitedGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Group!]

  """
  Disabled surveys will not be accessible to non-admins. Invite email sending will
  be paused.
  
  """
  isDisabled: Boolean!
  isSpatial: Boolean
  isTemplate: Boolean

  """
  If set, there can only be one response with matching contact information. The
  app will also discourage multiple submissions from the same browser session.
  """
  limitToSingleResponse: Boolean!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  practiceResponseCount: Int

  """Reads a single `Project` that is related to this `Survey`."""
  project: Project
  projectId: Int!
  responsesSpatialExtent: String
  showFacilitationOption: Boolean!
  showProgress: Boolean!

  """
  Only applicable for public surveys. Show tools to respondants for sharing the 
  survey on social media to encourage responses.
  
  """
  showSocialMediaButtons: Boolean
  submittedResponseCount: Int
  supportedLanguages: [String]!

  """Reads and enables pagination through a set of `SurveyInvitedGroup`."""
  surveyInvitedGroups(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyInvitedGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SurveyInvitedGroup`."""
    orderBy: [SurveyInvitedGroupsOrderBy!]
  ): [SurveyInvitedGroup!]!

  """Reads and enables pagination through a set of `SurveyInvite`."""
  surveyInvites(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyInviteCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SurveyInvite`."""
    orderBy: [SurveyInvitesOrderBy!]
  ): [SurveyInvite!]!

  """Reads and enables pagination through a set of `SurveyResponse`."""
  surveyResponsesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyResponseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesConnection!
}

enum SurveyAccessType {
  INVITE_ONLY
  PUBLIC
}

"""
A condition to be used against `Survey` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SurveyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

type SurveyConsentDocument implements Node {
  createdAt: Datetime!

  """
  Reads a single `FormElement` that is related to this `SurveyConsentDocument`.
  """
  formElement: FormElement
  formElementId: Int!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  url: String!
  version: Int!
}

"""
A condition to be used against `SurveyConsentDocument` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SurveyConsentDocumentCondition {
  """Checks for equality with the object’s `formElementId` field."""
  formElementId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""A connection to a list of `SurveyConsentDocument` values."""
type SurveyConsentDocumentsConnection {
  """
  A list of edges which contains the `SurveyConsentDocument` and cursor to aid in pagination.
  """
  edges: [SurveyConsentDocumentsEdge!]!

  """A list of `SurveyConsentDocument` objects."""
  nodes: [SurveyConsentDocument!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SurveyConsentDocument` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SurveyConsentDocument` edge in the connection."""
type SurveyConsentDocumentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SurveyConsentDocument` at the end of the edge."""
  node: SurveyConsentDocument!
}

"""Methods to use when ordering `SurveyConsentDocument`."""
enum SurveyConsentDocumentsOrderBy {
  FORM_ELEMENT_ID_ASC
  FORM_ELEMENT_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SurveyInvite implements Node {
  createdAt: Datetime!
  email: Email
  fullname: String
  id: Int!

  """Reads and enables pagination through a set of `InviteEmail`."""
  inviteEmails(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteEmailCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `InviteEmail`."""
    orderBy: [InviteEmailsOrderBy!]
  ): [InviteEmail!]!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Indicates the status of the invite, e.g. whether an invite email has been
  sent, status of those emails, and whether a response has been submitted.
  """
  status: InviteStatus

  """Reads a single `Survey` that is related to this `SurveyInvite`."""
  survey: Survey
  surveyId: Int!
  userId: Int
  wasUsed: Boolean!
}

"""
A condition to be used against `SurveyInvite` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SurveyInviteCondition {
  """Checks for equality with the object’s `email` field."""
  email: Email

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `surveyId` field."""
  surveyId: Int
}

type SurveyInvitedGroup {
  groupId: Int!

  """Reads a single `Survey` that is related to this `SurveyInvitedGroup`."""
  survey: Survey
  surveyId: Int!
}

"""
A condition to be used against `SurveyInvitedGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SurveyInvitedGroupCondition {
  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `surveyId` field."""
  surveyId: Int
}

"""An input for mutations affecting `SurveyInvitedGroup`"""
input SurveyInvitedGroupInput {
  groupId: Int!
  surveyId: Int!
}

"""Methods to use when ordering `SurveyInvitedGroup`."""
enum SurveyInvitedGroupsOrderBy {
  GROUP_ID_ASC
  GROUP_ID_DESC
  NATURAL
  SURVEY_ID_ASC
  SURVEY_ID_DESC
}

input SurveyInviteOptionsInput {
  email: Email
  fullname: String
}

"""
Represents an update to a `SurveyInvite`. Fields that are set will be updated.
"""
input SurveyInvitePatch {
  fullname: String
}

"""A `SurveyInvite` edge in the connection."""
type SurveyInvitesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SurveyInvite` at the end of the edge."""
  node: SurveyInvite!
}

"""Methods to use when ordering `SurveyInvite`."""
enum SurveyInvitesOrderBy {
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SURVEY_ID_ASC
  SURVEY_ID_DESC
}

type SurveyInviteTokenClaims {
  email: String
  fullname: String
  inviteId: Int!
  projectId: Int!
  surveyId: Int!
  wasUsed: Boolean!
}

type SurveyInviteTokenVerificationResults {
  claims: SurveyInviteTokenClaims
  error: String
}

"""
Represents an update to a `Survey`. Fields that are set will be updated.
"""
input SurveyPatch {
  """
  PUBLIC or INVITE_ONLY
  
  """
  accessType: SurveyAccessType

  """
  If set, responses that originate from an IP address outside this fence will be flagged.
  """
  geofence: GeoJSON
  id: Int

  """
  Disabled surveys will not be accessible to non-admins. Invite email sending will
  be paused.
  
  """
  isDisabled: Boolean

  """
  If set, there can only be one response with matching contact information. The
  app will also discourage multiple submissions from the same browser session.
  """
  limitToSingleResponse: Boolean
  name: String
  projectId: Int
  showFacilitationOption: Boolean
  showProgress: Boolean

  """
  Only applicable for public surveys. Show tools to respondants for sharing the 
  survey on social media to encourage responses.
  
  """
  showSocialMediaButtons: Boolean
  supportedLanguages: [String]
}

type SurveyResponse implements Node {
  accountEmail: String
  archived: Boolean!

  """
  Should be set by the client on submission and tracked by cookies or
  localStorage. Surveys that permit only a single entry enable users to bypass
  the limit for legitimate purposes, like entering responses on a shared computer.
  
  """
  bypassedDuplicateSubmissionControl: Boolean!
  createdAt: Datetime!

  """JSON representation of responses, keyed by the form field export_id"""
  data: JSON!
  id: Int!

  """
  Users may save their responses for later editing before submission. After submission they can no longer edit them.
  """
  isDraft: Boolean!

  """
  Duplicate entries are detected by matching contact-information field values.
  
  """
  isDuplicateEntry: Boolean!

  """
  Detected by comparing ip hashes from previous entries. IP hashes are not tied
  to particular responses, so only the second and subsequent entries are flagged.
  
  """
  isDuplicateIp: Boolean!

  """
  If true, a logged-in user entered information on behalf of another person, so userId is not as relevant.
  """
  isFacilitated: Boolean!
  isPractice: Boolean!

  """
  Unusual or missing user-agent headers on submissions are flagged. May indicate
  scripting but does not necessarily imply malicious intent.
  
  """
  isUnrecognizedUserAgent: Boolean!
  lastUpdatedByEmail: String
  lastUpdatedById: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Should be used by clients to uniquely identify responses that are collected
  offline. Survey facilitators can download their responses to disk as json so
  that they may be recovered/submitted in the case of the client machine being
  damaged or stolen. Tracking an offline uuid ensures that these responses are
  not somehow submitted in duplicate.
  """
  offlineId: UUID

  """
  Checked on SUBMISSION, so adding or changing a survey geofence after responses
  have been submitted will not update values. GPS coordinates and IP addresses
  are not stored for privacy purposes.
  
  """
  outsideGeofence: Boolean!

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey
  surveyId: Int!
  updatedAt: Datetime

  """
  User account that submitted the survey. Note that if isFacilitated is set, the
  account may not be who is represented by the response content.
  """
  userId: Int
}

"""
A condition to be used against `SurveyResponse` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SurveyResponseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `surveyId` field."""
  surveyId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""
Represents an update to a `SurveyResponse`. Fields that are set will be updated.
"""
input SurveyResponsePatch {
  archived: Boolean

  """JSON representation of responses, keyed by the form field export_id"""
  data: JSON

  """
  Users may save their responses for later editing before submission. After submission they can no longer edit them.
  """
  isDraft: Boolean
  isPractice: Boolean
  updatedAt: Datetime
}

"""A connection to a list of `SurveyResponse` values."""
type SurveyResponsesConnection {
  """
  A list of edges which contains the `SurveyResponse` and cursor to aid in pagination.
  """
  edges: [SurveyResponsesEdge!]!

  """A list of `SurveyResponse` objects."""
  nodes: [SurveyResponse!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SurveyResponse` you could get from the connection."""
  totalCount: Int!
}

"""A `SurveyResponse` edge in the connection."""
type SurveyResponsesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SurveyResponse` at the end of the edge."""
  node: SurveyResponse!
}

"""Methods to use when ordering `SurveyResponse`."""
enum SurveyResponsesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SURVEY_ID_ASC
  SURVEY_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Methods to use when ordering `Survey`."""
enum SurveysOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

type SurveyTokenInfo {
  projectId: Int
  surveyId: Int
  token: String
}

"""
TableOfContentsItems represent a tree-view of folders and operational layers 
that can be added to the map. Both layers and folders may be nested into other 
folders for organization, and each folder has its own access control list.

Items that represent data layers have a `DataLayer` relation, which in turn has
a reference to a `DataSource`. Usually these relations should be fetched in 
batch only once the layer is turned on, using the 
`dataLayersAndSourcesByLayerId` query.

"""
type TableOfContentsItem implements Node {
  """Reads a single `Acl` that is related to this `TableOfContentsItem`."""
  acl: Acl

  """
  If set, users will be able to zoom to the bounds of this item. [minx, miny, maxx, maxy]
  """
  bounds: [BigFloat]

  """Reads and enables pagination through a set of `FolderBreadcrumb`."""
  breadcrumbs(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [FolderBreadcrumb!]

  """
  Metadata will be returned as directly stored in the SeaSketch
  database or computed by fetching from a 3rd party service,
  depending on the data source type.
  """
  computedMetadata: JSON
  containedBy: [TableOfContentsItem]
  copiedFromDataLibraryTemplateId: String

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  If is_folder=false, a DataLayers visibility will be controlled by this item
  """
  dataLayerId: Int
  dataSourceType: DataSourceTypes

  """Reads and enables pagination through a set of `DownloadOption`."""
  downloadOptions(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [DownloadOption!]
  enableDownload: Boolean!
  ftsAr: String
  ftsDa: String
  ftsDe: String
  ftsEn: String
  ftsEs: String
  ftsFr: String
  ftsId: String
  ftsIt: String
  ftsLt: String
  ftsNl: String
  ftsNo: String
  ftsPt: String
  ftsRo: String
  ftsRu: String
  ftsSimple: String
  ftsSv: String
  geoprocessingReferenceId: String
  hasArcgisVectorLayer: Boolean
  hasMetadata: Boolean
  hasOriginalSourceUpload: Boolean!
  hideChildren: Boolean!
  hostedSourceLastUpdated: Datetime
  id: Int!

  """
  If set, folders with this property cannot be toggled in order to activate all
  their children. Toggles can only be used to toggle children off
  """
  isClickOffOnly: Boolean!
  isCustomGlSource: Boolean
  isDownloadableSourceType: Boolean

  """
  Identifies whether this item is part of the draft table of contents edited by
  admin or the static public version. This property cannot be changed. Rather,
  use the `publishTableOfContents()` mutation
  """
  isDraft: Boolean!

  """
  If not a folder, the item is a layer-type and must have a data_layer_id
  """
  isFolder: Boolean!

  """
  DraftJS compatible representation of text content to display when a user requests layer metadata. Not valid for Folders
  """
  metadata: JSON
  metadataFormat: String
  metadataXml: DataUploadOutput

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  stable_id of the parent folder, if any. This property cannot be changed 
  directly. To rearrange items into folders, use the 
  `updateTableOfContentsItemParent` mutation.
  
  """
  parentStableId: String
  primaryDownloadUrl: String
  project: Project

  """Reads and enables pagination through a set of `ProjectBackgroundJob`."""
  projectBackgroundJobs(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [ProjectBackgroundJob!]
  projectId: Int!

  """Reads and enables pagination through a set of `QuotaDetail`."""
  quotaUsed(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [QuotaDetail!]

  """
  If set, children of this folder will appear as radio options so that only one may be toggle at a time
  """
  showRadioChildren: Boolean!

  """Position in the layer list"""
  sortIndex: Int!

  """
  The stable_id property must be set by clients when creating new items. [Nanoid](https://github.com/ai/nanoid#readme) 
  should be used with a custom alphabet that excludes dashes and has a lenght of 
  9. The purpose of the stable_id is to control the nesting arrangement of items
  and provide a stable reference for layer visibility settings and map bookmarks.
  When published, the id primary key property of the item will change but not the 
  stable_id.
  
  """
  stableId: String!

  """Name used in the table of contents rendering"""
  title: String!
  totalRequests(period: ActivityStatsPeriod): Int
  translatedProps: JSON!
  usesDynamicMetadata: Boolean
}

"""
A condition to be used against `TableOfContentsItem` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TableOfContentsItemCondition {
  """Checks for equality with the object’s `dataLayerId` field."""
  dataLayerId: Int

  """Checks for equality with the object’s `ftsAr` field."""
  ftsAr: String

  """Checks for equality with the object’s `ftsDa` field."""
  ftsDa: String

  """Checks for equality with the object’s `ftsDe` field."""
  ftsDe: String

  """Checks for equality with the object’s `ftsEn` field."""
  ftsEn: String

  """Checks for equality with the object’s `ftsEs` field."""
  ftsEs: String

  """Checks for equality with the object’s `ftsFr` field."""
  ftsFr: String

  """Checks for equality with the object’s `ftsId` field."""
  ftsId: String

  """Checks for equality with the object’s `ftsIt` field."""
  ftsIt: String

  """Checks for equality with the object’s `ftsLt` field."""
  ftsLt: String

  """Checks for equality with the object’s `ftsNl` field."""
  ftsNl: String

  """Checks for equality with the object’s `ftsNo` field."""
  ftsNo: String

  """Checks for equality with the object’s `ftsPt` field."""
  ftsPt: String

  """Checks for equality with the object’s `ftsRo` field."""
  ftsRo: String

  """Checks for equality with the object’s `ftsRu` field."""
  ftsRu: String

  """Checks for equality with the object’s `ftsSimple` field."""
  ftsSimple: String

  """Checks for equality with the object’s `ftsSv` field."""
  ftsSv: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isDraft` field."""
  isDraft: Boolean

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `stableId` field."""
  stableId: String
}

"""An input for mutations affecting `TableOfContentsItem`"""
input TableOfContentsItemInput {
  """
  If set, users will be able to zoom to the bounds of this item. [minx, miny, maxx, maxy]
  """
  bounds: [BigFloat]

  """
  If is_folder=false, a DataLayers visibility will be controlled by this item
  """
  dataLayerId: Int
  enableDownload: Boolean
  hideChildren: Boolean

  """
  If set, folders with this property cannot be toggled in order to activate all
  their children. Toggles can only be used to toggle children off
  """
  isClickOffOnly: Boolean

  """
  If not a folder, the item is a layer-type and must have a data_layer_id
  """
  isFolder: Boolean

  """
  DraftJS compatible representation of text content to display when a user requests layer metadata. Not valid for Folders
  """
  metadata: JSON

  """
  stable_id of the parent folder, if any. This property cannot be changed 
  directly. To rearrange items into folders, use the 
  `updateTableOfContentsItemParent` mutation.
  
  """
  parentStableId: String
  projectId: Int!

  """
  If set, children of this folder will appear as radio options so that only one may be toggle at a time
  """
  showRadioChildren: Boolean

  """
  The stable_id property must be set by clients when creating new items. [Nanoid](https://github.com/ai/nanoid#readme) 
  should be used with a custom alphabet that excludes dashes and has a lenght of 
  9. The purpose of the stable_id is to control the nesting arrangement of items
  and provide a stable reference for layer visibility settings and map bookmarks.
  When published, the id primary key property of the item will change but not the 
  stable_id.
  
  """
  stableId: String!

  """Name used in the table of contents rendering"""
  title: String!
}

"""
Represents an update to a `TableOfContentsItem`. Fields that are set will be updated.
"""
input TableOfContentsItemPatch {
  """
  If set, users will be able to zoom to the bounds of this item. [minx, miny, maxx, maxy]
  """
  bounds: [BigFloat]

  """
  If is_folder=false, a DataLayers visibility will be controlled by this item
  """
  dataLayerId: Int
  enableDownload: Boolean
  geoprocessingReferenceId: String
  hideChildren: Boolean

  """
  If set, folders with this property cannot be toggled in order to activate all
  their children. Toggles can only be used to toggle children off
  """
  isClickOffOnly: Boolean

  """
  DraftJS compatible representation of text content to display when a user requests layer metadata. Not valid for Folders
  """
  metadata: JSON

  """
  If set, children of this folder will appear as radio options so that only one may be toggle at a time
  """
  showRadioChildren: Boolean

  """Name used in the table of contents rendering"""
  title: String
  translatedProps: JSON
}

"""A connection to a list of `TableOfContentsItem` values."""
type TableOfContentsItemsConnection {
  """
  A list of edges which contains the `TableOfContentsItem` and cursor to aid in pagination.
  """
  edges: [TableOfContentsItemsEdge!]!

  """A list of `TableOfContentsItem` objects."""
  nodes: [TableOfContentsItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TableOfContentsItem` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TableOfContentsItem` edge in the connection."""
type TableOfContentsItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TableOfContentsItem` at the end of the edge."""
  node: TableOfContentsItem!
}

"""Methods to use when ordering `TableOfContentsItem`."""
enum TableOfContentsItemsOrderBy {
  DATA_LAYER_ID_ASC
  DATA_LAYER_ID_DESC
  FTS_AR_ASC
  FTS_AR_DESC
  FTS_DA_ASC
  FTS_DA_DESC
  FTS_DE_ASC
  FTS_DE_DESC
  FTS_EN_ASC
  FTS_EN_DESC
  FTS_ES_ASC
  FTS_ES_DESC
  FTS_FR_ASC
  FTS_FR_DESC
  FTS_ID_ASC
  FTS_ID_DESC
  FTS_IT_ASC
  FTS_IT_DESC
  FTS_LT_ASC
  FTS_LT_DESC
  FTS_NL_ASC
  FTS_NL_DESC
  FTS_NO_ASC
  FTS_NO_DESC
  FTS_PT_ASC
  FTS_PT_DESC
  FTS_RO_ASC
  FTS_RO_DESC
  FTS_RU_ASC
  FTS_RU_DESC
  FTS_SIMPLE_ASC
  FTS_SIMPLE_DESC
  FTS_SV_ASC
  FTS_SV_DESC
  ID_ASC
  ID_DESC
  IS_DRAFT_ASC
  IS_DRAFT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  STABLE_ID_ASC
  STABLE_ID_DESC
}

enum TileScheme {
  TMS
  XYZ
}

type TocItemDetails {
  id: Int!
  type: SketchChildType!
}

"""All input for the `toggleAdminAccess` mutation."""
input ToggleAdminAccessInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `toggleAdminAccess` mutation."""
type ToggleAdminAccessPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `toggleForumPostingBan` mutation."""
input ToggleForumPostingBanInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `toggleForumPostingBan` mutation."""
type ToggleForumPostingBanPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `toggleLanguageSupport` mutation."""
input ToggleLanguageSupportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String
  enable: Boolean
  slug: String
}

"""The output of our `toggleLanguageSupport` mutation."""
type ToggleLanguageSupportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `toggleResponsesPractice` mutation."""
input ToggleResponsesPracticeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  ids: [Int]
  isPractice: Boolean
}

"""The output of our `toggleResponsesPractice` mutation."""
type ToggleResponsesPracticePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  surveyResponses: [SurveyResponse!]
}

type Topic implements Node {
  authorId: Int!

  """
  User Profile of the author. If a user has not shared their profile the first post contents will be hidden.
  
  """
  authorProfile: Profile
  blurb: String
  createdAt: Datetime!

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum
  forumId: Int!
  id: Int!
  lastPostDate: Datetime

  """
  Locked topics can only be posted to by project admins and will display a lock symbol.
  
  Can be toggled by project admins using `setTopicLocked()` mutation.
  
  """
  locked: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  participantCount: Int

  """Reads and enables pagination through a set of `Profile`."""
  participantsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): ProfilesConnection!

  """Reads and enables pagination through a set of `Post`."""
  postsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection!
  postsCount: Int

  """
  Sticky topics will be listed at the topic of the forum.
  
  Can be toggled by project admins using `setTopicSticky()` mutation.
  
  """
  sticky: Boolean!

  """
  Title displayed in the topics listing. Can be updated in the first 5 minutes after creation.
  """
  title: String!
}

"""
A condition to be used against `Topic` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TopicCondition {
  """Checks for equality with the object’s `forumId` field."""
  forumId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""
Represents an update to a `Topic`. Fields that are set will be updated.
"""
input TopicPatch {
  """
  Locked topics can only be posted to by project admins and will display a lock symbol.
  
  Can be toggled by project admins using `setTopicLocked()` mutation.
  
  """
  locked: Boolean

  """
  Sticky topics will be listed at the topic of the forum.
  
  Can be toggled by project admins using `setTopicSticky()` mutation.
  
  """
  sticky: Boolean

  """
  Title displayed in the topics listing. Can be updated in the first 5 minutes after creation.
  """
  title: String
}

"""A connection to a list of `Topic` values."""
type TopicsConnection {
  """
  A list of edges which contains the `Topic` and cursor to aid in pagination.
  """
  edges: [TopicsEdge!]!

  """A list of `Topic` objects."""
  nodes: [Topic!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Topic` you could get from the connection."""
  totalCount: Int!
}

"""A `Topic` edge in the connection."""
type TopicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Topic` at the end of the edge."""
  node: Topic!
}

"""Methods to use when ordering `Topic`."""
enum TopicsOrderBy {
  FORUM_ID_ASC
  FORUM_ID_DESC
  ID_ASC
  ID_DESC
  LAST_POST_CREATED_AT_AND_STICKY
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

input TranslatedPropInput {
  languageCode: String!
  value: String
}

type UnsplashLinks {
  html: String!
}

type UnsplashPhoto {
  blur_hash: String
  color: String!
  description: String
  height: Int!
  id: String!
  links: UnsplashPhotoLinks!
  urls: UnsplashUrls!
  user: UnsplashUser!
  width: Int!
}

type UnsplashPhotoLinks {
  download_location: String!
}

type UnsplashSearchResult {
  results: [UnsplashPhoto!]!
  total: Int!
  total_pages: Int!
}

type UnsplashUrls {
  full: String!
  raw: String!
  regular: String!
  small: String!
  thumb: String!
}

type UnsplashUser {
  id: String!
  links: UnsplashLinks!
  name: String!
  username: String!
}

"""All input for the `updateAboutPageContent` mutation."""
input UpdateAboutPageContentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  content: JSON
  lang: String
  slug: String
}

"""The output of our `updateAboutPageContent` mutation."""
type UpdateAboutPageContentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateAboutPageEnabled` mutation."""
input UpdateAboutPageEnabledInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  enabled: Boolean
  slug: String
}

"""The output of our `updateAboutPageEnabled` mutation."""
type UpdateAboutPageEnabledPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateAclByBasemapId` mutation."""
input UpdateAclByBasemapIdInput {
  basemapId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
}

"""All input for the `updateAclByNodeId` mutation."""
input UpdateAclByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Acl` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
}

"""All input for the `updateAclBySketchClassId` mutation."""
input UpdateAclBySketchClassIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
  sketchClassId: Int!
}

"""All input for the `updateAclByTableOfContentsItemId` mutation."""
input UpdateAclByTableOfContentsItemIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
  tableOfContentsItemId: Int!
}

"""All input for the `updateAcl` mutation."""
input UpdateAclInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
}

"""The output of our update `Acl` mutation."""
type UpdateAclPayload {
  """The `Acl` that was updated by this mutation."""
  acl: Acl

  """Reads a single `Basemap` that is related to this `Acl`."""
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Acl`."""
  sketchClass: SketchClass

  """Reads a single `TableOfContentsItem` that is related to this `Acl`."""
  tableOfContentsItem: TableOfContentsItem
}

"""All input for the `updateBasemapByNodeId` mutation."""
input UpdateBasemapByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Basemap` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Basemap` being updated.
  """
  patch: BasemapPatch!
}

"""All input for the `updateBasemap` mutation."""
input UpdateBasemapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Basemap` being updated.
  """
  patch: BasemapPatch!
}

"""All input for the `updateBasemapOfflineTileSettings` mutation."""
input UpdateBasemapOfflineTileSettingsInput {
  basemapId: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  maxShorelineZ: Int
  maxZ: Int
  projectId: Int
  useDefault: Boolean
}

"""The output of our `updateBasemapOfflineTileSettings` mutation."""
type UpdateBasemapOfflineTileSettingsPayload {
  basemap: Basemap

  """An edge for our `Basemap`. May be used by Relay 1."""
  basemapEdge(
    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `InteractivitySetting` that is related to this `Basemap`.
  """
  interactivitySettings: InteractivitySetting

  """Reads a single `Project` that is related to this `Basemap`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `Basemap` mutation."""
type UpdateBasemapPayload {
  """The `Basemap` that was updated by this mutation."""
  basemap: Basemap

  """An edge for our `Basemap`. May be used by Relay 1."""
  basemapEdge(
    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `InteractivitySetting` that is related to this `Basemap`.
  """
  interactivitySettings: InteractivitySetting

  """Reads a single `Project` that is related to this `Basemap`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type UpdateClippingLayerPayload {
  cql2Query: JSON
  operationType: GeographyLayerOperation
}

"""All input for the `updateCommunityGuidelineByNodeId` mutation."""
input UpdateCommunityGuidelineByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CommunityGuideline` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CommunityGuideline` being updated.
  """
  patch: CommunityGuidelinePatch!
}

"""All input for the `updateCommunityGuideline` mutation."""
input UpdateCommunityGuidelineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CommunityGuideline` being updated.
  """
  patch: CommunityGuidelinePatch!
  projectId: Int!
}

"""The output of our update `CommunityGuideline` mutation."""
type UpdateCommunityGuidelinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CommunityGuideline` that was updated by this mutation."""
  communityGuideline: CommunityGuideline

  """Reads a single `Project` that is related to this `CommunityGuideline`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDataHostingQuota` mutation."""
input UpdateDataHostingQuotaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  quota: BigInt
}

"""The output of our `updateDataHostingQuota` mutation."""
type UpdateDataHostingQuotaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDataLayerByInteractivitySettingsId` mutation."""
input UpdateDataLayerByInteractivitySettingsIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  interactivitySettingsId: Int!

  """
  An object where the defined keys will be set on the `DataLayer` being updated.
  """
  patch: DataLayerPatch!
}

"""All input for the `updateDataLayerByNodeId` mutation."""
input UpdateDataLayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DataLayer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DataLayer` being updated.
  """
  patch: DataLayerPatch!
}

"""All input for the `updateDataLayer` mutation."""
input UpdateDataLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `DataLayer` being updated.
  """
  patch: DataLayerPatch!
}

"""The output of our update `DataLayer` mutation."""
type UpdateDataLayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataLayer` that was updated by this mutation."""
  dataLayer: DataLayer

  """An edge for our `DataLayer`. May be used by Relay 1."""
  dataLayerEdge(
    """The method to use when ordering `DataLayer`."""
    orderBy: [DataLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataLayersEdge

  """Reads a single `DataSource` that is related to this `DataLayer`."""
  dataSource: DataSource

  """
  Reads a single `InteractivitySetting` that is related to this `DataLayer`.
  """
  interactivitySettings: InteractivitySetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDataSourceByNodeId` mutation."""
input UpdateDataSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DataSource` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DataSource` being updated.
  """
  patch: DataSourcePatch!
}

"""All input for the `updateDataSource` mutation."""
input UpdateDataSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Should be used as sourceId in stylesheets."""
  id: Int!

  """
  An object where the defined keys will be set on the `DataSource` being updated.
  """
  patch: DataSourcePatch!
}

"""The output of our update `DataSource` mutation."""
type UpdateDataSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataSource` that was updated by this mutation."""
  dataSource: DataSource

  """An edge for our `DataSource`. May be used by Relay 1."""
  dataSourceEdge(
    """The method to use when ordering `DataSource`."""
    orderBy: [DataSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateEmailNotificationPreferenceByUserId` mutation.
"""
input UpdateEmailNotificationPreferenceByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmailNotificationPreference` being updated.
  """
  patch: EmailNotificationPreferencePatch!
  userId: Int!
}

"""The output of our update `EmailNotificationPreference` mutation."""
type UpdateEmailNotificationPreferencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailNotificationPreference` that was updated by this mutation."""
  emailNotificationPreference: EmailNotificationPreference

  """An edge for our `EmailNotificationPreference`. May be used by Relay 1."""
  emailNotificationPreferenceEdge(
    """The method to use when ordering `EmailNotificationPreference`."""
    orderBy: [EmailNotificationPreferencesOrderBy!] = [NATURAL]
  ): EmailNotificationPreferencesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `EmailNotificationPreference`.
  """
  user: User
}

"""All input for the `updateFormByNodeId` mutation."""
input UpdateFormByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  patch: FormPatch!
}

"""All input for the `updateFormBySketchClassId` mutation."""
input UpdateFormBySketchClassIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  patch: FormPatch!

  """Related *SketchClass*"""
  sketchClassId: Int!
}

"""All input for the `updateFormBySurveyId` mutation."""
input UpdateFormBySurveyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  patch: FormPatch!

  """Related *Survey*"""
  surveyId: Int!
}

"""All input for the `updateFormElementByNodeId` mutation."""
input UpdateFormElementByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormElement` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FormElement` being updated.
  """
  patch: FormElementPatch!
}

"""All input for the `updateFormElement` mutation."""
input UpdateFormElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `FormElement` being updated.
  """
  patch: FormElementPatch!
}

"""The output of our update `FormElement` mutation."""
type UpdateFormElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormElement` that was updated by this mutation."""
  formElement: FormElement

  """An edge for our `FormElement`. May be used by Relay 1."""
  formElementEdge(
    """The method to use when ordering `FormElement`."""
    orderBy: [FormElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormElementsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateForm` mutation."""
input UpdateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  patch: FormPatch!
}

"""All input for the `updateFormLogicConditionByNodeId` mutation."""
input UpdateFormLogicConditionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormLogicCondition` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FormLogicCondition` being updated.
  """
  patch: FormLogicConditionPatch!
}

"""All input for the `updateFormLogicCondition` mutation."""
input UpdateFormLogicConditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `FormLogicCondition` being updated.
  """
  patch: FormLogicConditionPatch!
}

"""The output of our update `FormLogicCondition` mutation."""
type UpdateFormLogicConditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormLogicCondition` that was updated by this mutation."""
  formLogicCondition: FormLogicCondition

  """An edge for our `FormLogicCondition`. May be used by Relay 1."""
  formLogicConditionEdge(
    """The method to use when ordering `FormLogicCondition`."""
    orderBy: [FormLogicConditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormLogicConditionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFormLogicRuleByNodeId` mutation."""
input UpdateFormLogicRuleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormLogicRule` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FormLogicRule` being updated.
  """
  patch: FormLogicRulePatch!
}

"""All input for the `updateFormLogicRule` mutation."""
input UpdateFormLogicRuleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `FormLogicRule` being updated.
  """
  patch: FormLogicRulePatch!
}

"""The output of our update `FormLogicRule` mutation."""
type UpdateFormLogicRulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormLogicRule` that was updated by this mutation."""
  formLogicRule: FormLogicRule

  """An edge for our `FormLogicRule`. May be used by Relay 1."""
  formLogicRuleEdge(
    """The method to use when ordering `FormLogicRule`."""
    orderBy: [FormLogicRulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormLogicRulesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `Form` mutation."""
type UpdateFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was updated by this mutation."""
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

"""All input for the `updateForumByNodeId` mutation."""
input UpdateForumByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Forum` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Forum` being updated.
  """
  patch: ForumPatch!
}

"""All input for the `updateForum` mutation."""
input UpdateForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Forum` being updated.
  """
  patch: ForumPatch!
}

"""The output of our update `Forum` mutation."""
type UpdateForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Forum` that was updated by this mutation."""
  forum: Forum

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGeographyByNodeId` mutation."""
input UpdateGeographyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Geography` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Geography` being updated.
  """
  patch: GeographyPatch!
}

"""All input for the `updateGeographyClippingLayerByNodeId` mutation."""
input UpdateGeographyClippingLayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GeographyClippingLayer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GeographyClippingLayer` being updated.
  """
  patch: GeographyClippingLayerPatch!
}

"""All input for the `updateGeographyClippingLayer` mutation."""
input UpdateGeographyClippingLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `GeographyClippingLayer` being updated.
  """
  patch: GeographyClippingLayerPatch!
}

"""The output of our update `GeographyClippingLayer` mutation."""
type UpdateGeographyClippingLayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `GeographyClippingLayer`.
  """
  dataLayer: DataLayer

  """The `GeographyClippingLayer` that was updated by this mutation."""
  geographyClippingLayer: GeographyClippingLayer

  """An edge for our `GeographyClippingLayer`. May be used by Relay 1."""
  geographyClippingLayerEdge(
    """The method to use when ordering `GeographyClippingLayer`."""
    orderBy: [GeographyClippingLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GeographyClippingLayersEdge

  """
  Reads a single `Geography` that is related to this `GeographyClippingLayer`.
  """
  projectGeography: Geography

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGeography` mutation."""
input UpdateGeographyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Geography` being updated.
  """
  patch: GeographyPatch!
}

"""The output of our update `Geography` mutation."""
type UpdateGeographyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Geography` that was updated by this mutation."""
  geography: Geography

  """Reads a single `Project` that is related to this `Geography`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGroupByNodeId` mutation."""
input UpdateGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""All input for the `updateGroupByProjectIdAndName` mutation."""
input UpdateGroupByProjectIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Label for the group."""
  name: String!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
  projectId: Int!
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """Reads a single `Project` that is related to this `Group`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateInteractivitySettingByNodeId` mutation."""
input UpdateInteractivitySettingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InteractivitySetting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `InteractivitySetting` being updated.
  """
  patch: InteractivitySettingPatch!
}

"""All input for the `updateInteractivitySetting` mutation."""
input UpdateInteractivitySettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `InteractivitySetting` being updated.
  """
  patch: InteractivitySettingPatch!
}

"""The output of our update `InteractivitySetting` mutation."""
type UpdateInteractivitySettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InteractivitySetting` that was updated by this mutation."""
  interactivitySetting: InteractivitySetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMapboxSecretKey` mutation."""
input UpdateMapboxSecretKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  secret: String
}

"""The output of our `updateMapboxSecretKey` mutation."""
type UpdateMapboxSecretKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOfflineTileSettingByNodeId` mutation."""
input UpdateOfflineTileSettingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OfflineTileSetting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OfflineTileSetting` being updated.
  """
  patch: OfflineTileSettingPatch!
}

"""
All input for the `updateOfflineTileSettingByProjectIdAndBasemapId` mutation.
"""
input UpdateOfflineTileSettingByProjectIdAndBasemapIdInput {
  basemapId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OfflineTileSetting` being updated.
  """
  patch: OfflineTileSettingPatch!
  projectId: Int!
}

"""All input for the `updateOfflineTileSetting` mutation."""
input UpdateOfflineTileSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `OfflineTileSetting` being updated.
  """
  patch: OfflineTileSettingPatch!
}

"""The output of our update `OfflineTileSetting` mutation."""
type UpdateOfflineTileSettingPayload {
  """Reads a single `Basemap` that is related to this `OfflineTileSetting`."""
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OfflineTileSetting` that was updated by this mutation."""
  offlineTileSetting: OfflineTileSetting

  """Reads a single `Project` that is related to this `OfflineTileSetting`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOptionalBasemapLayerByNodeId` mutation."""
input UpdateOptionalBasemapLayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OptionalBasemapLayer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OptionalBasemapLayer` being updated.
  """
  patch: OptionalBasemapLayerPatch!
}

"""All input for the `updateOptionalBasemapLayer` mutation."""
input UpdateOptionalBasemapLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `OptionalBasemapLayer` being updated.
  """
  patch: OptionalBasemapLayerPatch!
}

"""The output of our update `OptionalBasemapLayer` mutation."""
type UpdateOptionalBasemapLayerPayload {
  """
  Reads a single `Basemap` that is related to this `OptionalBasemapLayer`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OptionalBasemapLayer` that was updated by this mutation."""
  optionalBasemapLayer: OptionalBasemapLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePost` mutation."""
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  message: JSON
  postId: Int
}

"""The output of our `updatePost` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic
}

"""All input for the `updateProfileByUserId` mutation."""
input UpdateProfileByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  patch: ProfilePatch!
  userId: Int!
}

"""The output of our update `Profile` mutation."""
type UpdateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was updated by this mutation."""
  profile: Profile

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [NATURAL]
  ): ProfilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Profile`."""
  user: User
}

"""All input for the `updateProjectByNodeId` mutation."""
input UpdateProjectByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Project` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!
}

"""All input for the `updateProjectBySlug` mutation."""
input UpdateProjectBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!

  """
  Short identifier for the project used in the url. This property cannot be changed after project creation.
  """
  slug: String!
}

input UpdateProjectGeographyPayload {
  clippingLayers: [ClippingLayerInput]
  name: String
  translatedProps: JSON
}

"""All input for the `updateProject` mutation."""
input UpdateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!
}

"""
All input for the `updateProjectInviteGroupByInviteIdAndGroupId` mutation.
"""
input UpdateProjectInviteGroupByInviteIdAndGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  inviteId: Int!

  """
  An object where the defined keys will be set on the `ProjectInviteGroup` being updated.
  """
  patch: ProjectInviteGroupPatch!
}

"""The output of our update `ProjectInviteGroup` mutation."""
type UpdateProjectInviteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `ProjectInviteGroup`."""
  group: Group

  """
  Reads a single `ProjectInvite` that is related to this `ProjectInviteGroup`.
  """
  invite: ProjectInvite

  """The `ProjectInviteGroup` that was updated by this mutation."""
  projectInviteGroup: ProjectInviteGroup

  """An edge for our `ProjectInviteGroup`. May be used by Relay 1."""
  projectInviteGroupEdge(
    """The method to use when ordering `ProjectInviteGroup`."""
    orderBy: [ProjectInviteGroupsOrderBy!] = [NATURAL]
  ): ProjectInviteGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectInvite` mutation."""
input UpdateProjectInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  fullname: String
  groups: [Int]
  inviteId: Int
  makeAdmin: Boolean
}

"""The output of our `updateProjectInvite` mutation."""
type UpdateProjectInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  projectInvite: ProjectInvite

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `Project` mutation."""
type UpdateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket

  """The `Project` that was updated by this mutation."""
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateProjectsSharedBasemapByBasemapIdAndProjectId` mutation.
"""
input UpdateProjectsSharedBasemapByBasemapIdAndProjectIdInput {
  basemapId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectsSharedBasemap` being updated.
  """
  patch: ProjectsSharedBasemapPatch!
  projectId: Int!
}

"""The output of our update `ProjectsSharedBasemap` mutation."""
type UpdateProjectsSharedBasemapPayload {
  """
  Reads a single `Basemap` that is related to this `ProjectsSharedBasemap`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectsSharedBasemap` that was updated by this mutation."""
  projectsSharedBasemap: ProjectsSharedBasemap

  """An edge for our `ProjectsSharedBasemap`. May be used by Relay 1."""
  projectsSharedBasemapEdge(
    """The method to use when ordering `ProjectsSharedBasemap`."""
    orderBy: [ProjectsSharedBasemapsOrderBy!] = [NATURAL]
  ): ProjectsSharedBasemapsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSketchClassByFormElementId` mutation."""
input UpdateSketchClassByFormElementIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  If set, this sketch class is only for use in a survey indicated by the form_element.
  
  """
  formElementId: Int!

  """
  An object where the defined keys will be set on the `SketchClass` being updated.
  """
  patch: SketchClassPatch!
}

"""All input for the `updateSketchClassByNodeId` mutation."""
input UpdateSketchClassByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchClass` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SketchClass` being updated.
  """
  patch: SketchClassPatch!
}

"""All input for the `updateSketchClassGeographies` mutation."""
input UpdateSketchClassGeographiesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  geographyIds: [Int]
  sketchClassId: Int
}

"""The output of our `updateSketchClassGeographies` mutation."""
type UpdateSketchClassGeographiesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormElement` that is related to this `SketchClass`."""
  formElement: FormElement

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the `updateSketchClass` mutation."""
input UpdateSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SketchClass` being updated.
  """
  patch: SketchClassPatch!
}

"""The output of our update `SketchClass` mutation."""
type UpdateSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `FormElement` that is related to this `SketchClass`."""
  formElement: FormElement

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchClass` that was updated by this mutation."""
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the `updateSketchFolderByNodeId` mutation."""
input UpdateSketchFolderByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchFolder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SketchFolder` being updated.
  """
  patch: SketchFolderPatch!
}

"""All input for the `updateSketchFolder` mutation."""
input UpdateSketchFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SketchFolder` being updated.
  """
  patch: SketchFolderPatch!
}

"""The output of our update `SketchFolder` mutation."""
type UpdateSketchFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchFolder` that was updated by this mutation."""
  sketchFolder: SketchFolder

  """An edge for our `SketchFolder`. May be used by Relay 1."""
  sketchFolderEdge(
    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersEdge
}

"""All input for the `updateSketchParent` mutation."""
input UpdateSketchParentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  collectionId: Int
  folderId: Int
  id: Int
}

"""The output of our `updateSketchParent` mutation."""
type UpdateSketchParentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch

  """Reads a single `FormElement` that is related to this `Sketch`."""
  formElement: FormElement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  sketch: Sketch

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass

  """Reads a single `User` that is related to this `Sketch`."""
  user: User
}

type UpdateSketchTocItemParentResults {
  folders: [SketchFolder]!
  sketches: [Sketch]!
  updatedCollections: [Sketch]!
}

"""All input for the `updateSurveyByNodeId` mutation."""
input UpdateSurveyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Survey` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Survey` being updated.
  """
  patch: SurveyPatch!
}

"""All input for the `updateSurvey` mutation."""
input UpdateSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Survey` being updated.
  """
  patch: SurveyPatch!
}

"""All input for the `updateSurveyInviteByEmailAndSurveyId` mutation."""
input UpdateSurveyInviteByEmailAndSurveyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: Email!

  """
  An object where the defined keys will be set on the `SurveyInvite` being updated.
  """
  patch: SurveyInvitePatch!
  surveyId: Int!
}

"""All input for the `updateSurveyInviteByEmail` mutation."""
input UpdateSurveyInviteByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: Email!

  """
  An object where the defined keys will be set on the `SurveyInvite` being updated.
  """
  patch: SurveyInvitePatch!
}

"""All input for the `updateSurveyInviteByNodeId` mutation."""
input UpdateSurveyInviteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SurveyInvite` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SurveyInvite` being updated.
  """
  patch: SurveyInvitePatch!
}

"""All input for the `updateSurveyInvitedGroups` mutation."""
input UpdateSurveyInvitedGroupsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupIds: [Int]
  surveyId: Int
}

"""The output of our `updateSurveyInvitedGroups` mutation."""
type UpdateSurveyInvitedGroupsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  groups: [Group!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSurveyInvite` mutation."""
input UpdateSurveyInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SurveyInvite` being updated.
  """
  patch: SurveyInvitePatch!
}

"""The output of our update `SurveyInvite` mutation."""
type UpdateSurveyInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyInvite`."""
  survey: Survey

  """The `SurveyInvite` that was updated by this mutation."""
  surveyInvite: SurveyInvite

  """An edge for our `SurveyInvite`. May be used by Relay 1."""
  surveyInviteEdge(
    """The method to use when ordering `SurveyInvite`."""
    orderBy: [SurveyInvitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyInvitesEdge
}

"""The output of our update `Survey` mutation."""
type UpdateSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `Survey`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Survey` that was updated by this mutation."""
  survey: Survey
}

"""All input for the `updateSurveyResponseByNodeId` mutation."""
input UpdateSurveyResponseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SurveyResponse` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SurveyResponse` being updated.
  """
  patch: SurveyResponsePatch!
}

"""All input for the `updateSurveyResponse` mutation."""
input UpdateSurveyResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SurveyResponse` being updated.
  """
  patch: SurveyResponsePatch!
}

"""The output of our update `SurveyResponse` mutation."""
type UpdateSurveyResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey

  """The `SurveyResponse` that was updated by this mutation."""
  surveyResponse: SurveyResponse

  """An edge for our `SurveyResponse`. May be used by Relay 1."""
  surveyResponseEdge(
    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesEdge
}

"""All input for the `updateTableOfContentsItemByDataLayerId` mutation."""
input UpdateTableOfContentsItemByDataLayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  If is_folder=false, a DataLayers visibility will be controlled by this item
  """
  dataLayerId: Int!

  """
  An object where the defined keys will be set on the `TableOfContentsItem` being updated.
  """
  patch: TableOfContentsItemPatch!
}

"""All input for the `updateTableOfContentsItemByNodeId` mutation."""
input UpdateTableOfContentsItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TableOfContentsItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TableOfContentsItem` being updated.
  """
  patch: TableOfContentsItemPatch!
}

"""All input for the `updateTableOfContentsItemChildren` mutation."""
input UpdateTableOfContentsItemChildrenInput {
  childIds: [Int]

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int
}

"""The output of our `updateTableOfContentsItemChildren` mutation."""
type UpdateTableOfContentsItemChildrenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItems: [TableOfContentsItem!]
}

"""All input for the `updateTableOfContentsItem` mutation."""
input UpdateTableOfContentsItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `TableOfContentsItem` being updated.
  """
  patch: TableOfContentsItemPatch!
}

"""The output of our update `TableOfContentsItem` mutation."""
type UpdateTableOfContentsItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TableOfContentsItem` that was updated by this mutation."""
  tableOfContentsItem: TableOfContentsItem

  """An edge for our `TableOfContentsItem`. May be used by Relay 1."""
  tableOfContentsItemEdge(
    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsEdge
}

input UpdateTocItemParentInput {
  id: Int!
  type: SketchChildType!
}

"""All input for the `updateTopicByNodeId` mutation."""
input UpdateTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""All input for the `updateTopic` mutation."""
input UpdateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""The output of our update `Topic` mutation."""
type UpdateTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was updated by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `updateZIndexes` mutation."""
input UpdateZIndexesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dataLayerIds: [Int]
}

"""The output of our `updateZIndexes` mutation."""
type UpdateZIndexesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  dataLayers: [DataLayer!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploaderResponse {
  cloudflareImagesUploadUrl: String
  fileUpload: FileUpload!
}

"""
The SeaSketch User type is quite sparse since authentication is handled by Auth0
and we store no personal information unless the user explicitly adds it to the
user `Profile`.

During operation of the system, users identify themselves using bearer tokens. 
These tokens contain ephemeral information like `canonical_email` which can be
used to accept project invite tokens.

"""
type User implements Node {
  accessRequestDenied(slug: String): Boolean

  """Reads and enables pagination through a set of `ApiKey`."""
  apiKeysByCreatedByConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApiKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ApiKey`."""
    orderBy: [ApiKeysOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApiKeysConnection!
  approvedBy(projectId: Int): User
  approvedOrDeniedOn(projectId: Int): Datetime

  """
  Whether the user has been banned from the forums. Use `disableForumPosting()`
  and `enableForumPosting()` mutations to modify this state. Accessible only to admins.
  """
  bannedFromForums: Boolean

  """
  Only visible to admins of projects a user has joined. Can be used for
  identification purposes since users will not gain any access control
  privileges until this email has been confirmed.
  
  """
  canonicalEmail: String
  deniedBy(projectId: Int): User

  """
  Reads a single `EmailNotificationPreference` that is related to this `User`.
  """
  emailNotificationPreference: EmailNotificationPreference

  """
  Reads and enables pagination through a set of `EmailNotificationPreference`.
  """
  emailNotificationPreferencesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailNotificationPreferenceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmailNotificationPreference`."""
    orderBy: [EmailNotificationPreferencesOrderBy!] = [NATURAL]
  ): EmailNotificationPreferencesConnection! @deprecated(reason: "Please use emailNotificationPreference instead")

  """
  List of groups for the given project and user. Only available to project admins.
  
  """
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Group!]
  id: Int!

  """
  Indicates if user is admin on the current project, indicated by the `x-ss-slug` header.
  
  """
  isAdmin: Boolean
  needsAccessRequestApproval(slug: String): Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Indicates whether the user has seen post-registration information. Can be 
  updated with `confirmOnboarded()` mutation. 
  
  Since this field is a date, it could
  hypothetically be reset as terms of service are updated, though it may be better
  to add a new property to track that.
  
  """
  onboarded: Datetime
  participationStatus(projectId: Int): ParticipationStatus

  """Reads a single `Profile` that is related to this `User`."""
  profile: Profile
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

type Visitor {
  count: Int!
  interval: Interval!
  timestamp: Datetime!
}

"""
A condition to be used against `Visitor` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input VisitorCondition {
  """Checks for equality with the object’s `interval` field."""
  interval: IntervalInput
}

type VisitorMetric implements Node {
  interval: Interval!
  month: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  timestamp: Datetime!
  topBrowsers: JSON!
  topCountries: JSON!
  topDeviceTypes: JSON!
  topOperatingSystems: JSON!
  topReferrers: JSON!
}

"""A connection to a list of `Visitor` values."""
type VisitorsConnection {
  """
  A list of edges which contains the `Visitor` and cursor to aid in pagination.
  """
  edges: [VisitorsEdge!]!

  """A list of `Visitor` objects."""
  nodes: [Visitor!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Visitor` you could get from the connection."""
  totalCount: Int!
}

"""A `Visitor` edge in the connection."""
type VisitorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Visitor` at the end of the edge."""
  node: Visitor!
}

"""Methods to use when ordering `Visitor`."""
enum VisitorsOrderBy {
  INTERVAL_ASC
  INTERVAL_DESC
  NATURAL
}

type WorkerJob {
  attempts: Int
  createdAt: Datetime
  key: String
  lastError: String
  lockedAt: Datetime
  maxAttempts: Int
  runAt: Datetime
  taskIdentifier: String
}

enum WorkerJobStatus {
  ERROR
  FAILED
  FINISHED
  QUEUED
  STARTED
}
