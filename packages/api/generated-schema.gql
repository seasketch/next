enum AccessControlListType {
  ADMINS_ONLY
  GROUP
  PUBLIC
}

type Acl implements Node {
  """Reads a single `Forum` that is related to this `Acl`."""
  forum: Forum
  forumId: Int

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Group]
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  type: AccessControlListType!
}

"""Represents an update to a `Acl`. Fields that are set will be updated."""
input AclPatch {
  type: AccessControlListType
}

"""All input for the `addGroupToAcl` mutation."""
input AddGroupToAclInput {
  aclId: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
}

"""The output of our `addGroupToAcl` mutation."""
type AddGroupToAclPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `addUserToGroup` mutation."""
input AddUserToGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
  userId: Int
}

"""The output of our `addUserToGroup` mutation."""
type AddUserToGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `addValidChildSketchClass` mutation."""
input AddValidChildSketchClassInput {
  child: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parent: Int
}

"""The output of our `addValidChildSketchClass` mutation."""
type AddValidChildSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `approveParticipant` mutation."""
input ApproveParticipantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `approveParticipant` mutation."""
type ApproveParticipantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""All input for the create `Forum` mutation."""
input CreateForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Forum` to be created by this mutation."""
  forum: ForumInput!
}

"""The output of our create `Forum` mutation."""
type CreateForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Forum` that was created by this mutation."""
  forum: Forum

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Group` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Group` to be created by this mutation."""
  group: GroupInput!
}

"""The output of our create `Group` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was created by this mutation."""
  group: Group

  """Reads a single `Project` that is related to this `Group`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createProject` mutation."""
input CreateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  slug: String!
}

"""The output of our `createProject` mutation."""
type CreateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `SketchClass` mutation."""
input CreateSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SketchClass` to be created by this mutation."""
  sketchClass: SketchClassInput!
}

"""The output of our create `SketchClass` mutation."""
type CreateSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchClass` that was created by this mutation."""
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the create `SketchFolder` mutation."""
input CreateSketchFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SketchFolder` to be created by this mutation."""
  sketchFolder: SketchFolderInput!
}

"""The output of our create `SketchFolder` mutation."""
type CreateSketchFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchFolder` that was created by this mutation."""
  sketchFolder: SketchFolder

  """An edge for our `SketchFolder`. May be used by Relay 1."""
  sketchFolderEdge(
    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersEdge

  """Reads a single `User` that is related to this `SketchFolder`."""
  user: User
}

"""All input for the create `Sketch` mutation."""
input CreateSketchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Sketch` to be created by this mutation."""
  sketch: SketchInput!
}

"""The output of our create `Sketch` mutation."""
type CreateSketchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Sketch` that was created by this mutation."""
  sketch: Sketch

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass

  """An edge for our `Sketch`. May be used by Relay 1."""
  sketchEdge(
    """The method to use when ordering `Sketch`."""
    orderBy: [SketchesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchesEdge

  """Reads a single `User` that is related to this `Sketch`."""
  user: User
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteForumByNodeId` mutation."""
input DeleteForumByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Forum` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteForum` mutation."""
input DeleteForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Forum` mutation."""
type DeleteForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedForumNodeId: ID

  """The `Forum` that was deleted by this mutation."""
  forum: Forum

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGroupByNodeId` mutation."""
input DeleteGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupByProjectIdAndName` mutation."""
input DeleteGroupByProjectIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  projectId: Int!
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectGroupNodeId: ID

  """The `Group` that was deleted by this mutation."""
  group: Group

  """Reads a single `Project` that is related to this `Group`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProject` mutation."""
input DeleteProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
}

"""The output of our `deleteProject` mutation."""
type DeleteProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteSketchByNodeId` mutation."""
input DeleteSketchByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sketch` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSketchClassByNodeId` mutation."""
input DeleteSketchClassByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchClass` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSketchClass` mutation."""
input DeleteSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SketchClass` mutation."""
type DeleteSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSketchClassNodeId: ID

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchClass` that was deleted by this mutation."""
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the `deleteSketchFolderByNodeId` mutation."""
input DeleteSketchFolderByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchFolder` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSketchFolder` mutation."""
input DeleteSketchFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SketchFolder` mutation."""
type DeleteSketchFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSketchFolderNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchFolder` that was deleted by this mutation."""
  sketchFolder: SketchFolder

  """An edge for our `SketchFolder`. May be used by Relay 1."""
  sketchFolderEdge(
    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersEdge

  """Reads a single `User` that is related to this `SketchFolder`."""
  user: User
}

"""All input for the `deleteSketch` mutation."""
input DeleteSketchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Sketch` mutation."""
type DeleteSketchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch
  deletedSketchNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Sketch` that was deleted by this mutation."""
  sketch: Sketch

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass

  """An edge for our `Sketch`. May be used by Relay 1."""
  sketchEdge(
    """The method to use when ordering `Sketch`."""
    orderBy: [SketchesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchesEdge

  """Reads a single `User` that is related to this `Sketch`."""
  user: User
}

scalar Email

type Forum implements Node {
  """Reads a single `Acl` that is related to this `Forum`."""
  acl: Acl
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project
  projectId: Int!
}

"""
A condition to be used against `Forum` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ForumCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""An input for mutations affecting `Forum`"""
input ForumInput {
  id: Int
  name: String!
  projectId: Int!
}

"""
Represents an update to a `Forum`. Fields that are set will be updated.
"""
input ForumPatch {
  id: Int
  name: String
  projectId: Int
}

"""A connection to a list of `Forum` values."""
type ForumsConnection {
  """
  A list of edges which contains the `Forum` and cursor to aid in pagination.
  """
  edges: [ForumsEdge!]!

  """A list of `Forum` objects."""
  nodes: [Forum]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Forum` you could get from the connection."""
  totalCount: Int!
}

"""A `Forum` edge in the connection."""
type ForumsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Forum` at the end of the edge."""
  node: Forum
}

"""Methods to use when ordering `Forum`."""
enum ForumsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""All input for the `grantAdminAccess` mutation."""
input GrantAdminAccessInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `grantAdminAccess` mutation."""
type GrantAdminAccessPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""User groups designated by the project administrators"""
type Group implements Node {
  id: Int!
  memberCount: Int

  """Reads and enables pagination through a set of `User`."""
  members(
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    orderBy: ParticipantSortBy
  ): [User]
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `Group`."""
  project: Project
  projectId: Int!
}

"""An input for mutations affecting `Group`"""
input GroupInput {
  id: Int
  name: String
  projectId: Int!
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  id: Int
  name: String
  projectId: Int
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""All input for the `joinProject` mutation."""
input JoinProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `joinProject` mutation."""
type JoinProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `leaveProject` mutation."""
input LeaveProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `leaveProject` mutation."""
type LeaveProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Add a group to a given access control list. Must be an administrator."""
  addGroupToAcl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddGroupToAclInput!
  ): AddGroupToAclPayload

  """
  Add the given user to a group. Must be an administrator of the project.
  """
  addUserToGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddUserToGroupInput!
  ): AddUserToGroupPayload
  addValidChildSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddValidChildSketchClassInput!
  ): AddValidChildSketchClassPayload

  """
  For invite_only projects. Approve access request by a user. Must be an administrator of the project.
  """
  approveParticipant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ApproveParticipantInput!
  ): ApproveParticipantPayload

  """Creates a single `Forum`."""
  createForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateForumInput!
  ): CreateForumPayload

  """Creates a single `Group`."""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """
  Users with verified emails can create new projects by choosing a unique name
  and url slug. This project will be unlisted with admin_only access and the
  user will be automatically added to the list of admins.
  """
  createProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """Creates a single `Sketch`."""
  createSketch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSketchInput!
  ): CreateSketchPayload

  """Creates a single `SketchClass`."""
  createSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSketchClassInput!
  ): CreateSketchClassPayload

  """Creates a single `SketchFolder`."""
  createSketchFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSketchFolderInput!
  ): CreateSketchFolderPayload

  """Deletes a single `Forum` using a unique key."""
  deleteForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteForumInput!
  ): DeleteForumPayload

  """Deletes a single `Forum` using its globally unique id."""
  deleteForumByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteForumByNodeIdInput!
  ): DeleteForumPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using its globally unique id."""
  deleteGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByNodeIdInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroupByProjectIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByProjectIdAndNameInput!
  ): DeleteGroupPayload

  """
  Marks project as deleted. Will remain in database but not accessible to
  anyone. Function can only be accessed by project administrators.
  """
  deleteProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInput!
  ): DeleteProjectPayload

  """Deletes a single `Sketch` using a unique key."""
  deleteSketch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchInput!
  ): DeleteSketchPayload

  """Deletes a single `Sketch` using its globally unique id."""
  deleteSketchByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchByNodeIdInput!
  ): DeleteSketchPayload

  """Deletes a single `SketchClass` using a unique key."""
  deleteSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchClassInput!
  ): DeleteSketchClassPayload

  """Deletes a single `SketchClass` using its globally unique id."""
  deleteSketchClassByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchClassByNodeIdInput!
  ): DeleteSketchClassPayload

  """Deletes a single `SketchFolder` using a unique key."""
  deleteSketchFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchFolderInput!
  ): DeleteSketchFolderPayload

  """Deletes a single `SketchFolder` using its globally unique id."""
  deleteSketchFolderByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchFolderByNodeIdInput!
  ): DeleteSketchFolderPayload

  """
  Give a user admin access to a project. User must have already joined the project and shared their user profile.
  """
  grantAdminAccess(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GrantAdminAccessInput!
  ): GrantAdminAccessPayload

  """
  Adds current user to the list of participants for a project, sharing their
  profile with administrators. Their profile will also be shared in public or
  group discussion forum posts.
  """
  joinProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: JoinProjectInput!
  ): JoinProjectPayload

  """Approve a user for use of an invite_only project."""
  leaveProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LeaveProjectInput!
  ): LeaveProjectPayload

  """
  Mark that the user represented in the current session has been shown post-user-registration content.
  """
  onboarded(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: OnboardedInput!
  ): OnboardedPayload

  """
  Remove a group from a given access control list. Must be an administrator.
  """
  removeGroupFromAcl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveGroupFromAclInput!
  ): RemoveGroupFromAclPayload

  """
  Remove the given user from a group. Must be an administrator of the project.
  """
  removeUserFromGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveUserFromGroupInput!
  ): RemoveUserFromGroupPayload
  removeValidChildSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveValidChildSketchClassInput!
  ): RemoveValidChildSketchClassPayload

  """Updates a single `Acl` using a unique key and a patch."""
  updateAcl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclInput!
  ): UpdateAclPayload

  """Updates a single `Acl` using a unique key and a patch."""
  updateAclByForumId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclByForumIdInput!
  ): UpdateAclPayload

  """Updates a single `Acl` using its globally unique id and a patch."""
  updateAclByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclByNodeIdInput!
  ): UpdateAclPayload

  """Updates a single `Forum` using a unique key and a patch."""
  updateForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateForumInput!
  ): UpdateForumPayload

  """Updates a single `Forum` using its globally unique id and a patch."""
  updateForumByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateForumByNodeIdInput!
  ): UpdateForumPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByNodeIdInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroupByProjectIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByProjectIdAndNameInput!
  ): UpdateGroupPayload

  """Updates a single `Profile` using a unique key and a patch."""
  updateProfileByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileByUserIdInput!
  ): UpdateProfilePayload

  """Updates a single `Project` using a unique key and a patch."""
  updateProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInput!
  ): UpdateProjectPayload

  """Updates a single `Project` using its globally unique id and a patch."""
  updateProjectByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectByNodeIdInput!
  ): UpdateProjectPayload

  """Updates a single `Project` using a unique key and a patch."""
  updateProjectBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectBySlugInput!
  ): UpdateProjectPayload

  """Updates a single `Sketch` using a unique key and a patch."""
  updateSketch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchInput!
  ): UpdateSketchPayload

  """Updates a single `Sketch` using its globally unique id and a patch."""
  updateSketchByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchByNodeIdInput!
  ): UpdateSketchPayload

  """Updates a single `SketchClass` using a unique key and a patch."""
  updateSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchClassInput!
  ): UpdateSketchClassPayload

  """
  Updates a single `SketchClass` using its globally unique id and a patch.
  """
  updateSketchClassByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchClassByNodeIdInput!
  ): UpdateSketchClassPayload

  """Updates a single `SketchFolder` using a unique key and a patch."""
  updateSketchFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchFolderInput!
  ): UpdateSketchFolderPayload

  """
  Updates a single `SketchFolder` using its globally unique id and a patch.
  """
  updateSketchFolderByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchFolderByNodeIdInput!
  ): UpdateSketchFolderPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""All input for the `onboarded` mutation."""
input OnboardedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `onboarded` mutation."""
type OnboardedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

enum ParticipantSortBy {
  EMAIL
  NAME
}

enum ParticipationStatus {
  NONE
  PARTICIPANT
  PENDING_APPROVAL
}

"""
Personal information that users have contributed. Note that access to PII must
be handle carefully to respect sharing preferences
"""
type Profile {
  affiliations: String
  bio: String
  email: Email
  fullname: String
  nickname: String
  picture: String

  """Reads a single `User` that is related to this `Profile`."""
  user: User
  userId: Int!
}

"""
Represents an update to a `Profile`. Fields that are set will be updated.
"""
input ProfilePatch {
  affiliations: String
  bio: String
  email: Email
  fullname: String
  nickname: String
  picture: String
  userId: Int
}

"""A `Profile` edge in the connection."""
type ProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Profile` at the end of the edge."""
  node: Profile
}

"""Methods to use when ordering `Profile`."""
enum ProfilesOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
}

type Project implements Node {
  accessControl: ProjectAccessControlSetting
  description: String

  """Reads and enables pagination through a set of `Forum`."""
  forumsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ForumCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsConnection!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]!
  id: Int!

  """Featured projects may be given prominent placement on the homepage."""
  isFeatured: Boolean
  isListed: Boolean

  """
  If a logoUrl is provided, it will link to this url in a new window if provided.
  """
  logoLink: String

  """
  URL referencing an image that will be used to represent the project. Will be displayed at 48x48 pixels
  """
  logoUrl: String

  """
  List of all folders created by this user
  
  """
  myFolders(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SketchFolder]

  """
  A list of all sketches for this project and the current user session
  
  """
  mySketches(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Sketch]
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Count of all users who have opted into participating in the project, sharing their profile with project administrators.
  """
  participantCount: Int

  """
  All users who have opted into participating in the project, sharing their profile with project administrators.
  """
  participants(
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    orderBy: ParticipantSortBy
  ): [User]

  """Reads and enables pagination through a set of `SketchClass`."""
  sketchClasses(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SketchClassCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!]
  ): [SketchClass!]!

  """Will resolve to https://seasketch.org/{slug}/ and cannot be changed"""
  slug: String!
  url: String
}

enum ProjectAccessControlSetting {
  ADMINS_ONLY
  INVITE_ONLY
  PUBLIC
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """Checks for equality with the object’s `accessControl` field."""
  accessControl: ProjectAccessControlSetting

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isFeatured` field."""
  isFeatured: Boolean

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""
Represents an update to a `Project`. Fields that are set will be updated.
"""
input ProjectPatch {
  accessControl: ProjectAccessControlSetting
  description: String

  """Featured projects may be given prominent placement on the homepage."""
  isFeatured: Boolean
  isListed: Boolean

  """
  If a logoUrl is provided, it will link to this url in a new window if provided.
  """
  logoLink: String

  """
  URL referencing an image that will be used to represent the project. Will be displayed at 48x48 pixels
  """
  logoUrl: String
  name: String
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  ACCESS_CONTROL_ASC
  ACCESS_CONTROL_DESC
  ID_ASC
  ID_DESC
  IS_FEATURED_ASC
  IS_FEATURED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  acl(id: Int!): Acl
  aclByForumId(forumId: Int!): Acl

  """Reads a single `Acl` using its globally unique `ID`."""
  aclByNodeId(
    """The globally unique `ID` to be used in selecting a single `Acl`."""
    nodeId: ID!
  ): Acl
  canDigitize(scid: Int): Boolean
  createBbox(geom: String): [Float]
  currentProject: Project
  forum(id: Int!): Forum

  """Reads a single `Forum` using its globally unique `ID`."""
  forumByNodeId(
    """The globally unique `ID` to be used in selecting a single `Forum`."""
    nodeId: ID!
  ): Forum

  """Reads and enables pagination through a set of `Forum`."""
  forumsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ForumCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsConnection
  group(id: Int!): Group

  """Reads a single `Group` using its globally unique `ID`."""
  groupByNodeId(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group
  groupByProjectIdAndName(name: String!, projectId: Int!): Group
  me: User

  """Reads and enables pagination through a set of `SketchFolder`."""
  myFolders(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    projectId: Int
  ): [SketchFolder]

  """Reads and enables pagination through a set of `Sketch`."""
  mySketches(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    projectId: Int
  ): [Sketch]

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  profileByUserId(userId: Int!): Profile
  project(id: Int!): Project

  """Reads a single `Project` using its globally unique `ID`."""
  projectByNodeId(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    nodeId: ID!
  ): Project
  projectBySlug(slug: String!): Project

  """Reads and enables pagination through a set of `Project`."""
  projectsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  sketch(id: Int!): Sketch

  """Reads a single `Sketch` using its globally unique `ID`."""
  sketchByNodeId(
    """The globally unique `ID` to be used in selecting a single `Sketch`."""
    nodeId: ID!
  ): Sketch
  sketchClass(id: Int!): SketchClass

  """Reads a single `SketchClass` using its globally unique `ID`."""
  sketchClassByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SketchClass`.
    """
    nodeId: ID!
  ): SketchClass

  """Reads and enables pagination through a set of `Sketch`."""
  sketchesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SketchCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sketch`."""
    orderBy: [SketchesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchesConnection
  sketchFolder(id: Int!): SketchFolder

  """Reads a single `SketchFolder` using its globally unique `ID`."""
  sketchFolderByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SketchFolder`.
    """
    nodeId: ID!
  ): SketchFolder
  user(id: Int!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""All input for the `removeGroupFromAcl` mutation."""
input RemoveGroupFromAclInput {
  aclId: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
}

"""The output of our `removeGroupFromAcl` mutation."""
type RemoveGroupFromAclPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `removeUserFromGroup` mutation."""
input RemoveUserFromGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
  userId: Int
}

"""The output of our `removeUserFromGroup` mutation."""
type RemoveUserFromGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `removeValidChildSketchClass` mutation."""
input RemoveValidChildSketchClassInput {
  child: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parent: Int
}

"""The output of our `removeValidChildSketchClass` mutation."""
type RemoveValidChildSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Sketch implements Node {
  bbox: [Float]

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch
  collectionId: Int

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch
  copyOf: Int
  folderId: Int
  geom: String
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  numVertices: Int

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass
  sketchClassId: Int!

  """Reads a single `User` that is related to this `Sketch`."""
  user: User
  userGeom: String
  userId: Int!
}

"""
Sketch Classes act as a schema for sketches drawn by users.

"""
type SketchClass implements Node {
  """
  If set to try, a geometry_type of POLYGON would allow for both POLYGONs and
  MULTIPOLYGONs after preprocessing or on spatial file upload. Users will still
  digitize single features. Note that this feature should be used seldomly,
  since for planning purposes it is unlikely to have non-contiguous zones.
  
  """
  allowMulti: Boolean!

  """
  Whether the user is allowed to digitize sketches of this type. Digitizing is
  controlled by admins via access control lists, and archived sketch classes can
  only be digitized by admins.
  
  """
  canDigitize: Boolean

  """
  Geometry type users digitize. COLLECTION types act as a feature collection and have no drawn geometry.
  
  """
  geometryType: SketchGeometryType!
  geoprocessingClientName: String
  geoprocessingClientUrl: String
  geoprocessingProjectUrl: String
  id: Int!

  """
  If set to true, (non-admin) users should not be able to digitize new features
  using this sketch class, but they should still be able to access the sketch
  class in order to render existing sketches of this type.
  
  """
  isArchived: Boolean!

  """
  If set to true, show as an option in the digitizing tools. If set to false,
  this sketch class may be solely for survey responses.
  
  """
  isMyPlansOption: Boolean!

  """
  Style used to render sketches of this type.
  
  """
  mapboxGlStyle: String
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project
  projectId: Int!

  """Number of sketches created with this sketch class"""
  sketchCount: BigInt

  """Reads and enables pagination through a set of `SketchClass`."""
  validChildren(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SketchClass]
}

"""
A condition to be used against `SketchClass` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SketchClassCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""A `SketchClass` edge in the connection."""
type SketchClassesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SketchClass` at the end of the edge."""
  node: SketchClass
}

"""Methods to use when ordering `SketchClass`."""
enum SketchClassesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""An input for mutations affecting `SketchClass`"""
input SketchClassInput {
  """
  If set to try, a geometry_type of POLYGON would allow for both POLYGONs and
  MULTIPOLYGONs after preprocessing or on spatial file upload. Users will still
  digitize single features. Note that this feature should be used seldomly,
  since for planning purposes it is unlikely to have non-contiguous zones.
  
  """
  allowMulti: Boolean

  """
  Geometry type users digitize. COLLECTION types act as a feature collection and have no drawn geometry.
  
  """
  geometryType: SketchGeometryType
  geoprocessingClientName: String
  geoprocessingClientUrl: String
  geoprocessingProjectUrl: String
  id: Int

  """
  If set to true, (non-admin) users should not be able to digitize new features
  using this sketch class, but they should still be able to access the sketch
  class in order to render existing sketches of this type.
  
  """
  isArchived: Boolean

  """
  If set to true, show as an option in the digitizing tools. If set to false,
  this sketch class may be solely for survey responses.
  
  """
  isMyPlansOption: Boolean

  """
  Style used to render sketches of this type.
  
  """
  mapboxGlStyle: String
  name: String!
  projectId: Int!
}

"""
Represents an update to a `SketchClass`. Fields that are set will be updated.
"""
input SketchClassPatch {
  """
  If set to try, a geometry_type of POLYGON would allow for both POLYGONs and
  MULTIPOLYGONs after preprocessing or on spatial file upload. Users will still
  digitize single features. Note that this feature should be used seldomly,
  since for planning purposes it is unlikely to have non-contiguous zones.
  
  """
  allowMulti: Boolean
  geoprocessingClientName: String
  geoprocessingClientUrl: String
  geoprocessingProjectUrl: String

  """
  If set to true, (non-admin) users should not be able to digitize new features
  using this sketch class, but they should still be able to access the sketch
  class in order to render existing sketches of this type.
  
  """
  isArchived: Boolean

  """
  Style used to render sketches of this type.
  
  """
  mapboxGlStyle: String
  name: String
}

"""
A condition to be used against `Sketch` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SketchCondition {
  """Checks for equality with the object’s `collectionId` field."""
  collectionId: Int

  """Checks for equality with the object’s `copyOf` field."""
  copyOf: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sketchClassId` field."""
  sketchClassId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""A connection to a list of `Sketch` values."""
type SketchesConnection {
  """
  A list of edges which contains the `Sketch` and cursor to aid in pagination.
  """
  edges: [SketchesEdge!]!

  """A list of `Sketch` objects."""
  nodes: [Sketch]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sketch` you could get from the connection."""
  totalCount: Int!
}

"""A `Sketch` edge in the connection."""
type SketchesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sketch` at the end of the edge."""
  node: Sketch
}

"""Methods to use when ordering `Sketch`."""
enum SketchesOrderBy {
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  COPY_OF_ASC
  COPY_OF_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SKETCH_CLASS_ID_ASC
  SKETCH_CLASS_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type SketchFolder implements Node {
  collectionId: Int
  folderId: Int
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  projectId: Int!

  """Reads a single `User` that is related to this `SketchFolder`."""
  user: User
  userId: Int!
}

"""
A condition to be used against `SketchFolder` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SketchFolderCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `SketchFolder`"""
input SketchFolderInput {
  collectionId: Int
  folderId: Int
  id: Int
  name: String!
  projectId: Int!
  userId: Int!
}

"""
Represents an update to a `SketchFolder`. Fields that are set will be updated.
"""
input SketchFolderPatch {
  collectionId: Int
  folderId: Int
  id: Int
  name: String
  projectId: Int
  userId: Int
}

"""A connection to a list of `SketchFolder` values."""
type SketchFoldersConnection {
  """
  A list of edges which contains the `SketchFolder` and cursor to aid in pagination.
  """
  edges: [SketchFoldersEdge!]!

  """A list of `SketchFolder` objects."""
  nodes: [SketchFolder]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SketchFolder` you could get from the connection."""
  totalCount: Int!
}

"""A `SketchFolder` edge in the connection."""
type SketchFoldersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SketchFolder` at the end of the edge."""
  node: SketchFolder
}

"""Methods to use when ordering `SketchFolder`."""
enum SketchFoldersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

enum SketchGeometryType {
  COLLECTION
  LINESTRING
  POINT
  POLYGON
}

"""An input for mutations affecting `Sketch`"""
input SketchInput {
  collectionId: Int
  folderId: Int
  geom: String
  id: Int
  name: String!
  sketchClassId: Int!
  userGeom: String
  userId: Int!
}

"""
Represents an update to a `Sketch`. Fields that are set will be updated.
"""
input SketchPatch {
  collectionId: Int
  geom: String
  name: String
  userGeom: String
}

enum SortByDirection {
  ASC
  DESC
}

"""All input for the `updateAclByForumId` mutation."""
input UpdateAclByForumIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  forumId: Int!

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
}

"""All input for the `updateAclByNodeId` mutation."""
input UpdateAclByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Acl` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
}

"""All input for the `updateAcl` mutation."""
input UpdateAclInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
}

"""The output of our update `Acl` mutation."""
type UpdateAclPayload {
  """The `Acl` that was updated by this mutation."""
  acl: Acl

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Forum` that is related to this `Acl`."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateForumByNodeId` mutation."""
input UpdateForumByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Forum` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Forum` being updated.
  """
  patch: ForumPatch!
}

"""All input for the `updateForum` mutation."""
input UpdateForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Forum` being updated.
  """
  patch: ForumPatch!
}

"""The output of our update `Forum` mutation."""
type UpdateForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Forum` that was updated by this mutation."""
  forum: Forum

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGroupByNodeId` mutation."""
input UpdateGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""All input for the `updateGroupByProjectIdAndName` mutation."""
input UpdateGroupByProjectIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
  projectId: Int!
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """Reads a single `Project` that is related to this `Group`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProfileByUserId` mutation."""
input UpdateProfileByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  patch: ProfilePatch!
  userId: Int!
}

"""The output of our update `Profile` mutation."""
type UpdateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was updated by this mutation."""
  profile: Profile

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [NATURAL]
  ): ProfilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Profile`."""
  user: User
}

"""All input for the `updateProjectByNodeId` mutation."""
input UpdateProjectByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Project` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!
}

"""All input for the `updateProjectBySlug` mutation."""
input UpdateProjectBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!

  """Will resolve to https://seasketch.org/{slug}/ and cannot be changed"""
  slug: String!
}

"""All input for the `updateProject` mutation."""
input UpdateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!
}

"""The output of our update `Project` mutation."""
type UpdateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Project` that was updated by this mutation."""
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSketchByNodeId` mutation."""
input UpdateSketchByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sketch` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Sketch` being updated.
  """
  patch: SketchPatch!
}

"""All input for the `updateSketchClassByNodeId` mutation."""
input UpdateSketchClassByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchClass` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SketchClass` being updated.
  """
  patch: SketchClassPatch!
}

"""All input for the `updateSketchClass` mutation."""
input UpdateSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SketchClass` being updated.
  """
  patch: SketchClassPatch!
}

"""The output of our update `SketchClass` mutation."""
type UpdateSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchClass` that was updated by this mutation."""
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the `updateSketchFolderByNodeId` mutation."""
input UpdateSketchFolderByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchFolder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SketchFolder` being updated.
  """
  patch: SketchFolderPatch!
}

"""All input for the `updateSketchFolder` mutation."""
input UpdateSketchFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SketchFolder` being updated.
  """
  patch: SketchFolderPatch!
}

"""The output of our update `SketchFolder` mutation."""
type UpdateSketchFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchFolder` that was updated by this mutation."""
  sketchFolder: SketchFolder

  """An edge for our `SketchFolder`. May be used by Relay 1."""
  sketchFolderEdge(
    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersEdge

  """Reads a single `User` that is related to this `SketchFolder`."""
  user: User
}

"""All input for the `updateSketch` mutation."""
input UpdateSketchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Sketch` being updated.
  """
  patch: SketchPatch!
}

"""The output of our update `Sketch` mutation."""
type UpdateSketchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Sketch` that was updated by this mutation."""
  sketch: Sketch

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass

  """An edge for our `Sketch`. May be used by Relay 1."""
  sketchEdge(
    """The method to use when ordering `Sketch`."""
    orderBy: [SketchesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchesEdge

  """Reads a single `User` that is related to this `Sketch`."""
  user: User
}

type User implements Node {
  id: Int!
  isAdmin(project: Int): Boolean
  isApproved(project: Int): Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Indicates whether the user has seen post-registration information. Mostly a tool for the client UI to use if needed.
  """
  onboarded: Datetime
  participationStatus(projectId: Int): ParticipationStatus

  """Reads a single `Profile` that is related to this `User`."""
  profile: Profile

  """Reads and enables pagination through a set of `SketchFolder`."""
  sketchFoldersConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SketchFolderCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersConnection!
}
