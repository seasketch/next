enum AccessControlListType {
  ADMINS_ONLY
  GROUP
  PUBLIC
}

"""
Access Control Lists can be associated with SketchClasses, Forums, and 
potentially other application resources to allow admins to control access based
on admin privileges or group membership. The behavior of the system is primarily
driven by the `type` and `groups` settings.

The [AUTHORIZATION.md file](https://github.com/seasketch/next/blob/master/packages/db/AUTHORIZATION.md#content-managed-by-an-access-control-list)
details how ACL functionality was added to the Forums type, and can be used as a
template to add ACL features to new types if needed.

"""
type Acl implements Node {
  basemapId: Int
  forumIdRead: Int
  forumIdWrite: Int

  """
  
  If set and `type` is GROUP, the resource will only be available to these groups.
  
  Use `addGroupToAcl()`/`removeGroupFromAcl()` mutations to edit these permissions.
  
  """
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Group!]
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `SketchClass` that is related to this `Acl`."""
  sketchClass: SketchClass
  sketchClassId: Int

  """Reads a single `TableOfContentsItem` that is related to this `Acl`."""
  tableOfContentsItem: TableOfContentsItem
  tableOfContentsItemId: Int

  """Control whether access control is PUBLIC, ADMINS_ONLY, or GROUP"""
  type: AccessControlListType!
}

"""Represents an update to a `Acl`. Fields that are set will be updated."""
input AclPatch {
  """Control whether access control is PUBLIC, ADMINS_ONLY, or GROUP"""
  type: AccessControlListType
}

"""All input for the `addGroupToAcl` mutation."""
input AddGroupToAclInput {
  aclId: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
}

"""The output of our `addGroupToAcl` mutation."""
type AddGroupToAclPayload {
  acl: Acl

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Acl`."""
  sketchClass: SketchClass

  """Reads a single `TableOfContentsItem` that is related to this `Acl`."""
  tableOfContentsItem: TableOfContentsItem
}

"""All input for the `addUserToGroup` mutation."""
input AddUserToGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
  userId: Int
}

"""The output of our `addUserToGroup` mutation."""
type AddUserToGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `addValidChildSketchClass` mutation."""
input AddValidChildSketchClassInput {
  child: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parent: Int
}

"""The output of our `addValidChildSketchClass` mutation."""
type AddValidChildSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `approveParticipant` mutation."""
input ApproveParticipantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `approveParticipant` mutation."""
type ApproveParticipantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Basemap implements Node {
  """
  Optional attribution to show at the bottom of the map. Will be overriden by
  the attribution specified in the gl-style in the case of MAPBOX types.
  """
  attribution: String
  description: String
  id: Int!

  """
  Reads a single `InteractivitySetting` that is related to this `Basemap`.
  """
  interactivitySettings: InteractivitySetting
  interactivitySettingsId: Int!

  """
  Identify the labels layer lowest in the stack so that overlay layers may be placed underneath.
  """
  labelsLayerId: String

  """Label shown in the basemap picker interface"""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `OptionalBasemapLayer`."""
  optionalBasemapLayers(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OptionalBasemapLayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `OptionalBasemapLayer`."""
    orderBy: [OptionalBasemapLayersOrderBy!]
  ): [OptionalBasemapLayer!]!

  """Reads a single `Project` that is related to this `Basemap`."""
  project: Project

  """
  If not set, the basemap will be considered a "Shared Basemap" that can be
  added to any project. Otherwise it is private to the given proejct. Only
  superusers can create Shared Basemaps.
  """
  projectId: Int

  """Reads and enables pagination through a set of `ProjectsSharedBasemap`."""
  projectsSharedBasemapsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectsSharedBasemapCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectsSharedBasemap`."""
    orderBy: [ProjectsSharedBasemapsOrderBy!] = [NATURAL]
  ): ProjectsSharedBasemapsConnection!
  terrainExaggeration: BigFloat!
  terrainMaxZoom: Int!

  """
  If set to false, terrain will always be on. Otherwise the user will be given a toggle switch.
  """
  terrainOptional: Boolean!
  terrainTileSize: Int!

  """
  Terrain data source url. Leave blank to disable 3d terrain. See [mapbox gl style terrain
  documentation](https://docs.mapbox.com/mapbox-gl-js/style-spec/terrain/).
  """
  terrainUrl: String
  terrainVisibilityDefault: Boolean!

  """Square thumbnail will be used to identify the basemap"""
  thumbnail: String!

  """
  For use with RASTER_URL_TEMPLATE types. See the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  tileSize: Int!
  type: BasemapType!

  """
  For MAPBOX types, this can be a mapbox://-style url or a link to a custom
  mapbox gl style. For RASTER_URL_TEMPLATE, it should be a url template
  conforming to the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  url: String!
}

"""
A condition to be used against `Basemap` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BasemapCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `interactivitySettingsId` field."""
  interactivitySettingsId: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""An input for mutations affecting `Basemap`"""
input BasemapInput {
  """
  Optional attribution to show at the bottom of the map. Will be overriden by
  the attribution specified in the gl-style in the case of MAPBOX types.
  """
  attribution: String
  description: String
  id: Int

  """
  Identify the labels layer lowest in the stack so that overlay layers may be placed underneath.
  """
  labelsLayerId: String

  """Label shown in the basemap picker interface"""
  name: String!

  """
  If not set, the basemap will be considered a "Shared Basemap" that can be
  added to any project. Otherwise it is private to the given proejct. Only
  superusers can create Shared Basemaps.
  """
  projectId: Int
  terrainExaggeration: BigFloat
  terrainMaxZoom: Int

  """
  If set to false, terrain will always be on. Otherwise the user will be given a toggle switch.
  """
  terrainOptional: Boolean
  terrainTileSize: Int

  """
  Terrain data source url. Leave blank to disable 3d terrain. See [mapbox gl style terrain
  documentation](https://docs.mapbox.com/mapbox-gl-js/style-spec/terrain/).
  """
  terrainUrl: String
  terrainVisibilityDefault: Boolean

  """Square thumbnail will be used to identify the basemap"""
  thumbnail: Upload

  """
  For use with RASTER_URL_TEMPLATE types. See the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  tileSize: Int
  type: BasemapType!

  """
  For MAPBOX types, this can be a mapbox://-style url or a link to a custom
  mapbox gl style. For RASTER_URL_TEMPLATE, it should be a url template
  conforming to the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  url: String!
}

"""
Represents an update to a `Basemap`. Fields that are set will be updated.
"""
input BasemapPatch {
  """
  Optional attribution to show at the bottom of the map. Will be overriden by
  the attribution specified in the gl-style in the case of MAPBOX types.
  """
  attribution: String
  description: String
  id: Int
  interactivitySettingsId: Int

  """
  Identify the labels layer lowest in the stack so that overlay layers may be placed underneath.
  """
  labelsLayerId: String

  """Label shown in the basemap picker interface"""
  name: String

  """
  If not set, the basemap will be considered a "Shared Basemap" that can be
  added to any project. Otherwise it is private to the given proejct. Only
  superusers can create Shared Basemaps.
  """
  projectId: Int
  terrainExaggeration: BigFloat
  terrainMaxZoom: Int

  """
  If set to false, terrain will always be on. Otherwise the user will be given a toggle switch.
  """
  terrainOptional: Boolean
  terrainTileSize: Int

  """
  Terrain data source url. Leave blank to disable 3d terrain. See [mapbox gl style terrain
  documentation](https://docs.mapbox.com/mapbox-gl-js/style-spec/terrain/).
  """
  terrainUrl: String
  terrainVisibilityDefault: Boolean

  """Square thumbnail will be used to identify the basemap"""
  thumbnail: Upload

  """
  For use with RASTER_URL_TEMPLATE types. See the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  tileSize: Int
  type: BasemapType

  """
  For MAPBOX types, this can be a mapbox://-style url or a link to a custom
  mapbox gl style. For RASTER_URL_TEMPLATE, it should be a url template
  conforming to the [raster source documetation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#tiled-sources)
  """
  url: String
}

"""A connection to a list of `Basemap` values."""
type BasemapsConnection {
  """
  A list of edges which contains the `Basemap` and cursor to aid in pagination.
  """
  edges: [BasemapsEdge!]!

  """A list of `Basemap` objects."""
  nodes: [Basemap!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Basemap` you could get from the connection."""
  totalCount: Int!
}

"""A `Basemap` edge in the connection."""
type BasemapsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Basemap` at the end of the edge."""
  node: Basemap!
}

"""Methods to use when ordering `Basemap`."""
enum BasemapsOrderBy {
  ID_ASC
  ID_DESC
  INTERACTIVITY_SETTINGS_ID_ASC
  INTERACTIVITY_SETTINGS_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""
SeaSketch supports multiple different basemap types. All must eventually be compiled down to a mapbox gl style.
"""
enum BasemapType {
  MAPBOX
  RASTER_URL_TEMPLATE
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
Community guidelines can be set by project admins with standards for using the 
discussion forums. Users will be shown this content before making their first
post, and they will be shown when posts are hidden by moderators for violating
community standards.

"""
type CommunityGuideline implements Node {
  """
  JSON contents are expected to be used with a system like DraftJS on the client.
  
  """
  content: JSON!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `CommunityGuideline`."""
  project: Project
  projectId: Int!
}

"""An input for mutations affecting `CommunityGuideline`"""
input CommunityGuidelineInput {
  """
  JSON contents are expected to be used with a system like DraftJS on the client.
  
  """
  content: JSON
  projectId: Int!
}

"""
Represents an update to a `CommunityGuideline`. Fields that are set will be updated.
"""
input CommunityGuidelinePatch {
  """
  JSON contents are expected to be used with a system like DraftJS on the client.
  
  """
  content: JSON
}

"""All input for the `confirmOnboarded` mutation."""
input ConfirmOnboardedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `confirmOnboarded` mutation."""
type ConfirmOnboardedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `confirmProjectInviteWithSurveyToken` mutation."""
input ConfirmProjectInviteWithSurveyTokenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `confirmProjectInviteWithSurveyToken` mutation."""
type ConfirmProjectInviteWithSurveyTokenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `confirmProjectInviteWithVerifiedEmail` mutation."""
input ConfirmProjectInviteWithVerifiedEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `confirmProjectInviteWithVerifiedEmail` mutation."""
type ConfirmProjectInviteWithVerifiedEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Basemap` mutation."""
input CreateBasemapInput {
  """The `Basemap` to be created by this mutation."""
  basemap: BasemapInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Basemap` mutation."""
type CreateBasemapPayload {
  """The `Basemap` that was created by this mutation."""
  basemap: Basemap

  """An edge for our `Basemap`. May be used by Relay 1."""
  basemapEdge(
    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `InteractivitySetting` that is related to this `Basemap`.
  """
  interactivitySettings: InteractivitySetting

  """Reads a single `Project` that is related to this `Basemap`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CommunityGuideline` mutation."""
input CreateCommunityGuidelineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CommunityGuideline` to be created by this mutation."""
  communityGuideline: CommunityGuidelineInput!
}

"""The output of our create `CommunityGuideline` mutation."""
type CreateCommunityGuidelinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CommunityGuideline` that was created by this mutation."""
  communityGuideline: CommunityGuideline

  """Reads a single `Project` that is related to this `CommunityGuideline`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `DataLayer` mutation."""
input CreateDataLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DataLayer` to be created by this mutation."""
  dataLayer: DataLayerInput!
}

"""The output of our create `DataLayer` mutation."""
type CreateDataLayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataLayer` that was created by this mutation."""
  dataLayer: DataLayer

  """An edge for our `DataLayer`. May be used by Relay 1."""
  dataLayerEdge(
    """The method to use when ordering `DataLayer`."""
    orderBy: [DataLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataLayersEdge

  """Reads a single `DataSource` that is related to this `DataLayer`."""
  dataSource: DataSource

  """
  Reads a single `InteractivitySetting` that is related to this `DataLayer`.
  """
  interactivitySettings: InteractivitySetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `DataSource` mutation."""
input CreateDataSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DataSource` to be created by this mutation."""
  dataSource: DataSourceInput!
}

"""The output of our create `DataSource` mutation."""
type CreateDataSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataSource` that was created by this mutation."""
  dataSource: DataSource

  """An edge for our `DataSource`. May be used by Relay 1."""
  dataSourceEdge(
    """The method to use when ordering `DataSource`."""
    orderBy: [DataSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormConditionalRenderingRule` mutation."""
input CreateFormConditionalRenderingRuleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormConditionalRenderingRule` to be created by this mutation."""
  formConditionalRenderingRule: FormConditionalRenderingRuleInput!
}

"""The output of our create `FormConditionalRenderingRule` mutation."""
type CreateFormConditionalRenderingRulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormField` that is related to this `FormConditionalRenderingRule`.
  """
  field: FormField

  """The `FormConditionalRenderingRule` that was created by this mutation."""
  formConditionalRenderingRule: FormConditionalRenderingRule

  """
  An edge for our `FormConditionalRenderingRule`. May be used by Relay 1.
  """
  formConditionalRenderingRuleEdge(
    """The method to use when ordering `FormConditionalRenderingRule`."""
    orderBy: [FormConditionalRenderingRulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormConditionalRenderingRulesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FormField` mutation."""
input CreateFormFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormField` to be created by this mutation."""
  formField: FormFieldInput!
}

"""The output of our create `FormField` mutation."""
type CreateFormFieldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Form` that is related to this `FormField`."""
  form: Form

  """The `FormField` that was created by this mutation."""
  formField: FormField

  """An edge for our `FormField`. May be used by Relay 1."""
  formFieldEdge(
    """The method to use when ordering `FormField`."""
    orderBy: [FormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormFieldsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createFormTemplateFromSketchClass` mutation."""
input CreateFormTemplateFromSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sketchClassId: Int
  templateName: String
  templateType: FormTemplateType
}

"""The output of our `createFormTemplateFromSketchClass` mutation."""
type CreateFormTemplateFromSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

"""All input for the `createFormTemplateFromSurvey` mutation."""
input CreateFormTemplateFromSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  surveyId: Int
  templateName: String
  templateType: FormTemplateType
}

"""The output of our `createFormTemplateFromSurvey` mutation."""
type CreateFormTemplateFromSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

"""All input for the create `Forum` mutation."""
input CreateForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Forum` to be created by this mutation."""
  forum: ForumInput!
}

"""The output of our create `Forum` mutation."""
type CreateForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Forum` that was created by this mutation."""
  forum: Forum

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Group` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Group` to be created by this mutation."""
  group: GroupInput!
}

"""The output of our create `Group` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was created by this mutation."""
  group: Group

  """Reads a single `Project` that is related to this `Group`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `InteractivitySetting` mutation."""
input CreateInteractivitySettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `InteractivitySetting` to be created by this mutation."""
  interactivitySetting: InteractivitySettingInput!
}

"""The output of our create `InteractivitySetting` mutation."""
type CreateInteractivitySettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InteractivitySetting` that was created by this mutation."""
  interactivitySetting: InteractivitySetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `OptionalBasemapLayer` mutation."""
input CreateOptionalBasemapLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OptionalBasemapLayer` to be created by this mutation."""
  optionalBasemapLayer: OptionalBasemapLayerInput!
}

"""The output of our create `OptionalBasemapLayer` mutation."""
type CreateOptionalBasemapLayerPayload {
  """
  Reads a single `Basemap` that is related to this `OptionalBasemapLayer`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OptionalBasemapLayer` that was created by this mutation."""
  optionalBasemapLayer: OptionalBasemapLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createPost` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  message: JSON
  topicId: Int
}

"""The output of our `createPost` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic
}

"""All input for the `createProject` mutation."""
input CreateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  slug: String!
}

"""All input for the create `ProjectInviteGroup` mutation."""
input CreateProjectInviteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectInviteGroup` to be created by this mutation."""
  projectInviteGroup: ProjectInviteGroupInput!
}

"""The output of our create `ProjectInviteGroup` mutation."""
type CreateProjectInviteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectInviteGroup` that was created by this mutation."""
  projectInviteGroup: ProjectInviteGroup

  """An edge for our `ProjectInviteGroup`. May be used by Relay 1."""
  projectInviteGroupEdge(
    """The method to use when ordering `ProjectInviteGroup`."""
    orderBy: [ProjectInviteGroupsOrderBy!] = [NATURAL]
  ): ProjectInviteGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createProjectInvites` mutation."""
input CreateProjectInvitesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """List of group **names** (not ids)"""
  groupNames: [String]
  makeAdmin: Boolean
  projectId: Int

  """List of emails (required) and fullnames"""
  projectInviteOptions: [ProjectInviteOptionInput]

  """If set to true, emails will be QUEUED for sending immediately"""
  sendEmailNow: Boolean
}

"""The output of our `createProjectInvites` mutation."""
type CreateProjectInvitesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  projectInvites: [ProjectInvite!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our `createProject` mutation."""
type CreateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ProjectsSharedBasemap` mutation."""
input CreateProjectsSharedBasemapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectsSharedBasemap` to be created by this mutation."""
  projectsSharedBasemap: ProjectsSharedBasemapInput!
}

"""The output of our create `ProjectsSharedBasemap` mutation."""
type CreateProjectsSharedBasemapPayload {
  """
  Reads a single `Basemap` that is related to this `ProjectsSharedBasemap`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectsSharedBasemap` that was created by this mutation."""
  projectsSharedBasemap: ProjectsSharedBasemap

  """An edge for our `ProjectsSharedBasemap`. May be used by Relay 1."""
  projectsSharedBasemapEdge(
    """The method to use when ordering `ProjectsSharedBasemap`."""
    orderBy: [ProjectsSharedBasemapsOrderBy!] = [NATURAL]
  ): ProjectsSharedBasemapsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `SketchClass` mutation."""
input CreateSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SketchClass` to be created by this mutation."""
  sketchClass: SketchClassInput!
}

"""The output of our create `SketchClass` mutation."""
type CreateSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchClass` that was created by this mutation."""
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the create `SketchFolder` mutation."""
input CreateSketchFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SketchFolder` to be created by this mutation."""
  sketchFolder: SketchFolderInput!
}

"""The output of our create `SketchFolder` mutation."""
type CreateSketchFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchFolder` that was created by this mutation."""
  sketchFolder: SketchFolder

  """An edge for our `SketchFolder`. May be used by Relay 1."""
  sketchFolderEdge(
    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersEdge
}

"""All input for the create `Sketch` mutation."""
input CreateSketchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Sketch` to be created by this mutation."""
  sketch: SketchInput!
}

"""The output of our create `Sketch` mutation."""
type CreateSketchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Sketch` that was created by this mutation."""
  sketch: Sketch

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass

  """Reads a single `User` that is related to this `Sketch`."""
  user: User
}

"""All input for the create `Survey` mutation."""
input CreateSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Survey` to be created by this mutation."""
  survey: SurveyInput!
}

"""All input for the create `SurveyInvitedGroup` mutation."""
input CreateSurveyInvitedGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SurveyInvitedGroup` to be created by this mutation."""
  surveyInvitedGroup: SurveyInvitedGroupInput!
}

"""The output of our create `SurveyInvitedGroup` mutation."""
type CreateSurveyInvitedGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyInvitedGroup`."""
  survey: Survey

  """The `SurveyInvitedGroup` that was created by this mutation."""
  surveyInvitedGroup: SurveyInvitedGroup
}

"""All input for the `createSurveyInvites` mutation."""
input CreateSurveyInvitesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupNames: [String]
  includeProjectInvite: Boolean
  makeAdmin: Boolean
  surveyId: Int
  surveyInviteOptions: [SurveyInviteOptionsInput]
}

"""The output of our `createSurveyInvites` mutation."""
type CreateSurveyInvitesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  surveyInvites: [SurveyInvite!]
}

"""The output of our create `Survey` mutation."""
type CreateSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `Survey`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Survey` that was created by this mutation."""
  survey: Survey
}

"""All input for the create `SurveyResponse` mutation."""
input CreateSurveyResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SurveyResponse` to be created by this mutation."""
  surveyResponse: SurveyResponseInput!
}

"""The output of our create `SurveyResponse` mutation."""
type CreateSurveyResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey

  """The `SurveyResponse` that was created by this mutation."""
  surveyResponse: SurveyResponse

  """An edge for our `SurveyResponse`. May be used by Relay 1."""
  surveyResponseEdge(
    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesEdge
}

"""All input for the create `TableOfContentsItem` mutation."""
input CreateTableOfContentsItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TableOfContentsItem` to be created by this mutation."""
  tableOfContentsItem: TableOfContentsItemInput!
}

"""The output of our create `TableOfContentsItem` mutation."""
type CreateTableOfContentsItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TableOfContentsItem` that was created by this mutation."""
  tableOfContentsItem: TableOfContentsItem

  """An edge for our `TableOfContentsItem`. May be used by Relay 1."""
  tableOfContentsItemEdge(
    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsEdge
}

"""All input for the `createTopic` mutation."""
input CreateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  forumId: Int
  message: JSON
  title: String
}

"""The output of our `createTopic` mutation."""
type CreateTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

enum CursorType {
  AUTO
  CROSSHAIR
  DEFAULT
  POINTER
}

"""
Data layers represent multiple MapBox GL Style layers tied to a single source. 
These layers could also be called "operational layers" in that they are meant to
be overlaid on a basemap.

The layers can appear tied to a TableOfContentsItem or be part of rich features 
associated with a basemap.

"""
type DataLayer implements Node {
  """Reads a single `DataSource` that is related to this `DataLayer`."""
  dataSource: DataSource
  dataSourceId: Int!
  id: Int!

  """
  Reads a single `InteractivitySetting` that is related to this `DataLayer`.
  """
  interactivitySettings: InteractivitySetting
  interactivitySettingsId: Int!

  """
  JSON array of MapBox GL Style layers. Layers should not specify an id or
  sourceId. These will be automatically generated at runtime.
  
  """
  mapboxGlStyles: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  projectId: Int!

  """
  Determines z-ordering of layer in relation to layers in the basemap. For this
  functionality to work, layers must be identified in the basemap configuration.
  """
  renderUnder: RenderUnderType!

  """
  For vector tile sources (VECTOR), references the layer inside the vector tiles that this layer applies to.
  """
  sourceLayer: String
  spriteIds: [Int]

  """Reads and enables pagination through a set of `Sprite`."""
  sprites(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Sprite!]

  """
  For ARCGIS_MAPSERVER and eventually WMS sources. In this case mapbox_gl_styles
  is blank and this layer merely controls the display of a single sublayer when
  making image requests.
  """
  sublayer: String

  """
  Reads a single `TableOfContentsItem` that is related to this `DataLayer`.
  """
  tableOfContentsItem: TableOfContentsItem

  """Reads and enables pagination through a set of `TableOfContentsItem`."""
  tableOfContentsItemsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TableOfContentsItemCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsConnection! @deprecated(reason: "Please use tableOfContentsItem instead")
  zIndex: Int!
}

"""
A condition to be used against `DataLayer` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DataLayerCondition {
  """Checks for equality with the object’s `dataSourceId` field."""
  dataSourceId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `interactivitySettingsId` field."""
  interactivitySettingsId: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""An input for mutations affecting `DataLayer`"""
input DataLayerInput {
  dataSourceId: Int!
  id: Int

  """
  JSON array of MapBox GL Style layers. Layers should not specify an id or
  sourceId. These will be automatically generated at runtime.
  
  """
  mapboxGlStyles: JSON
  projectId: Int!

  """
  Determines z-ordering of layer in relation to layers in the basemap. For this
  functionality to work, layers must be identified in the basemap configuration.
  """
  renderUnder: RenderUnderType

  """
  For vector tile sources (VECTOR), references the layer inside the vector tiles that this layer applies to.
  """
  sourceLayer: String
  spriteIds: [Int]

  """
  For ARCGIS_MAPSERVER and eventually WMS sources. In this case mapbox_gl_styles
  is blank and this layer merely controls the display of a single sublayer when
  making image requests.
  """
  sublayer: String
  zIndex: Int
}

"""
Represents an update to a `DataLayer`. Fields that are set will be updated.
"""
input DataLayerPatch {
  dataSourceId: Int
  id: Int
  interactivitySettingsId: Int

  """
  JSON array of MapBox GL Style layers. Layers should not specify an id or
  sourceId. These will be automatically generated at runtime.
  
  """
  mapboxGlStyles: JSON
  projectId: Int

  """
  Determines z-ordering of layer in relation to layers in the basemap. For this
  functionality to work, layers must be identified in the basemap configuration.
  """
  renderUnder: RenderUnderType

  """
  For vector tile sources (VECTOR), references the layer inside the vector tiles that this layer applies to.
  """
  sourceLayer: String
  spriteIds: [Int]

  """
  For ARCGIS_MAPSERVER and eventually WMS sources. In this case mapbox_gl_styles
  is blank and this layer merely controls the display of a single sublayer when
  making image requests.
  """
  sublayer: String
  zIndex: Int
}

"""A connection to a list of `DataLayer` values."""
type DataLayersConnection {
  """
  A list of edges which contains the `DataLayer` and cursor to aid in pagination.
  """
  edges: [DataLayersEdge!]!

  """A list of `DataLayer` objects."""
  nodes: [DataLayer!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DataLayer` you could get from the connection."""
  totalCount: Int!
}

"""A `DataLayer` edge in the connection."""
type DataLayersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DataLayer` at the end of the edge."""
  node: DataLayer!
}

"""Methods to use when ordering `DataLayer`."""
enum DataLayersOrderBy {
  DATA_SOURCE_ID_ASC
  DATA_SOURCE_ID_DESC
  ID_ASC
  ID_DESC
  INTERACTIVITY_SETTINGS_ID_ASC
  INTERACTIVITY_SETTINGS_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""
SeaSketch DataSources are analogous to MapBox GL Style sources but are extended
to include new types to support services such as ArcGIS MapServers and content
hosted on the SeaSketch CDN.

When documentation is lacking for any of these properties, consult the [MapBox GL Style docs](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geojson-promoteId)

"""
type DataSource implements Node {
  """
  Contains an attribution to be displayed when the map is shown to a user.
  """
  attribution: String

  """
  An array containing the longitude and latitude of the southwest and northeast
  corners of the source bounding box in the following order: `[sw.lng, sw.lat,
  ne.lng, ne.lat]`. When this property is included in a source, no tiles outside
  of the given bounds are requested by Mapbox GL. This property can also be used
  as metadata for non-tiled sources.
  """
  bounds: [BigFloat]

  """
  SEASKETCH_VECTOR sources only. S3 bucket where data are stored. Populated from Project.data_sources_bucket on creation.
  """
  bucketId: String

  """
  GeoJSON only. Size of the tile buffer on each side. A value of 0 produces no
  buffer. A value of 512 produces a buffer as wide as the tile itself. Larger
  values produce fewer rendering artifacts near tile edges and slower performance.
  """
  buffer: Int

  """SEASKETCH_VECTOR sources only. Approximate size of the geojson source"""
  byteLength: Int

  """
  GeoJSON only.
  
  If the data is a collection of point features, setting this to true clusters
  the points by radius into groups. Cluster groups become new Point features in
  the source with additional properties:
  
    * cluster Is true if the point is a cluster
    * cluster_id A unqiue id for the cluster to be used in conjunction with the
  [cluster inspection methods](https://docs.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)
    * point_count Number of original points grouped into this cluster
    * point_count_abbreviated An abbreviated point count
  
  """
  cluster: Boolean

  """
  GeoJSON only. Max zoom on which to cluster points if clustering is enabled.
  Defaults to one zoom less than maxzoom (so that last zoom features are not clustered).
  """
  clusterMaxZoom: Int

  """
  See [MapBox GL Style docs](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geojson-clusterProperties).
  """
  clusterProperties: JSON

  """
  GeoJSON only. Radius of each cluster if clustering is enabled. A value of 512
  indicates a radius equal to the width of a tile.
  """
  clusterRadius: Int

  """
  Image sources only. Corners of image specified in longitude, latitude pairs.
  """
  coordinates: [BigFloat]
  createdAt: Datetime!

  """Reads and enables pagination through a set of `DataLayer`."""
  dataLayersConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataLayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataLayer`."""
    orderBy: [DataLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataLayersConnection!

  """
  Raster-DEM only. The encoding used by this source. Mapbox Terrain RGB is used by default
  """
  encoding: RasterDemEncoding

  """
  SEASKETCH_VECTOR sources only. When enabled, uploads will be placed in a
  different class of storage that requires a temporary security credential to
  access. Set during creation and cannot be changed.
  """
  enhancedSecurity: Boolean

  """
  GeoJSON only. Whether to generate ids for the geojson features. When enabled,
  the feature.id property will be auto assigned based on its index in the
  features array, over-writing any previous values.
  """
  generateId: Boolean

  """Should be used as sourceId in stylesheets."""
  id: Int!

  """
  For SeaSketchVector sources, identifies whether the original source comes from
  a direct upload or a service location like ArcGIS server
  """
  importType: DataSourceImportTypes

  """
  GeoJSON only. Whether to calculate line distance metrics. This is required for
  line layers that specify line-gradient values.
  """
  lineMetrics: Boolean

  """
  For Vector, Raster, GeoJSON and Raster DEM sources. Maximum zoom level for
  which tiles are available, as in the TileJSON spec. Data from tiles at the
  maxzoom are used when displaying the map at higher zoom levels.
  """
  maxzoom: Int

  """
  For Vector, Raster, and Raster DEM sources. Minimum zoom level for which tiles are available, as in the TileJSON spec.
  """
  minzoom: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """SEASKETCH_VECTOR sources only. S3 object key where data are stored"""
  objectKey: UUID

  """
  For SeaSketchVector sources, identifies location of original service that
  hosted the data, if any. This can be used to update a layer with an updated
  copy of the data source if necessary.
  """
  originalSourceUrl: String

  """Use to upload source data to s3. Must be an admin."""
  presignedUploadUrl: String
  projectId: Int!

  """
  GeoJSON only. A property to use as a feature id (for feature state). Either a
  property name, or an object of the form `{<sourceLayer>: <propertyName>}.`
  """
  promoteId: Boolean

  """
  ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR only. Key-Value object with
  querystring parameters that will be added to requests.
  """
  queryParameters: JSON

  """
  For MapBox Vector and Raster sources. Influences the y direction of the tile
  coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
  """
  scheme: TileScheme

  """
  ArcGIS map service setting. If enabled, client can reorder layers and apply layer-specific opacity settings.
  """
  supportsDynamicLayers: Boolean!

  """
  For tiled sources, a list of endpoints that can be used to retrieve tiles.
  """
  tiles: [String]

  """
  The minimum visual size to display tiles for this layer. Only configurable for raster layers.
  """
  tileSize: Int

  """
  GeoJSON only. Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance).
  """
  tolerance: BigFloat

  """MapBox GL source type or custom seasketch type."""
  type: DataSourceTypes!

  """
  A URL to a TileJSON resource for tiled sources. For GeoJSON or
  SEASKETCH_VECTOR sources, use this to fill in the data property of the source.
  Also used by ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR
  """
  url: String

  """
  Video sources only. URLs to video content in order of preferred format.
  """
  urls: [String]

  """
  ARCGIS_DYNAMIC_MAPSERVER only. When using a high-dpi screen, request higher resolution images.
  """
  useDevicePixelRatio: Boolean
}

enum DataSourceImportTypes {
  """
  Imported from an arcgis feature layer identified by original_source_url
  """
  ARCGIS

  """Uploaded directly to SeaSketch using GeoJSON or shapefile"""
  UPLOAD
}

"""An input for mutations affecting `DataSource`"""
input DataSourceInput {
  """
  Contains an attribution to be displayed when the map is shown to a user.
  """
  attribution: String

  """
  An array containing the longitude and latitude of the southwest and northeast
  corners of the source bounding box in the following order: `[sw.lng, sw.lat,
  ne.lng, ne.lat]`. When this property is included in a source, no tiles outside
  of the given bounds are requested by Mapbox GL. This property can also be used
  as metadata for non-tiled sources.
  """
  bounds: [BigFloat]

  """
  SEASKETCH_VECTOR sources only. S3 bucket where data are stored. Populated from Project.data_sources_bucket on creation.
  """
  bucketId: String

  """
  GeoJSON only. Size of the tile buffer on each side. A value of 0 produces no
  buffer. A value of 512 produces a buffer as wide as the tile itself. Larger
  values produce fewer rendering artifacts near tile edges and slower performance.
  """
  buffer: Int

  """SEASKETCH_VECTOR sources only. Approximate size of the geojson source"""
  byteLength: Int

  """
  GeoJSON only.
  
  If the data is a collection of point features, setting this to true clusters
  the points by radius into groups. Cluster groups become new Point features in
  the source with additional properties:
  
    * cluster Is true if the point is a cluster
    * cluster_id A unqiue id for the cluster to be used in conjunction with the
  [cluster inspection methods](https://docs.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)
    * point_count Number of original points grouped into this cluster
    * point_count_abbreviated An abbreviated point count
  
  """
  cluster: Boolean

  """
  GeoJSON only. Max zoom on which to cluster points if clustering is enabled.
  Defaults to one zoom less than maxzoom (so that last zoom features are not clustered).
  """
  clusterMaxZoom: Int

  """
  See [MapBox GL Style docs](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geojson-clusterProperties).
  """
  clusterProperties: JSON

  """
  GeoJSON only. Radius of each cluster if clustering is enabled. A value of 512
  indicates a radius equal to the width of a tile.
  """
  clusterRadius: Int

  """
  Image sources only. Corners of image specified in longitude, latitude pairs.
  """
  coordinates: [BigFloat]
  createdAt: Datetime

  """
  Raster-DEM only. The encoding used by this source. Mapbox Terrain RGB is used by default
  """
  encoding: RasterDemEncoding

  """
  SEASKETCH_VECTOR sources only. When enabled, uploads will be placed in a
  different class of storage that requires a temporary security credential to
  access. Set during creation and cannot be changed.
  """
  enhancedSecurity: Boolean

  """
  GeoJSON only. Whether to generate ids for the geojson features. When enabled,
  the feature.id property will be auto assigned based on its index in the
  features array, over-writing any previous values.
  """
  generateId: Boolean

  """Should be used as sourceId in stylesheets."""
  id: Int

  """
  For SeaSketchVector sources, identifies whether the original source comes from
  a direct upload or a service location like ArcGIS server
  """
  importType: DataSourceImportTypes

  """
  GeoJSON only. Whether to calculate line distance metrics. This is required for
  line layers that specify line-gradient values.
  """
  lineMetrics: Boolean

  """
  For Vector, Raster, GeoJSON and Raster DEM sources. Maximum zoom level for
  which tiles are available, as in the TileJSON spec. Data from tiles at the
  maxzoom are used when displaying the map at higher zoom levels.
  """
  maxzoom: Int

  """
  For Vector, Raster, and Raster DEM sources. Minimum zoom level for which tiles are available, as in the TileJSON spec.
  """
  minzoom: Int

  """SEASKETCH_VECTOR sources only. S3 object key where data are stored"""
  objectKey: UUID

  """
  For SeaSketchVector sources, identifies location of original service that
  hosted the data, if any. This can be used to update a layer with an updated
  copy of the data source if necessary.
  """
  originalSourceUrl: String
  projectId: Int!

  """
  GeoJSON only. A property to use as a feature id (for feature state). Either a
  property name, or an object of the form `{<sourceLayer>: <propertyName>}.`
  """
  promoteId: Boolean

  """
  ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR only. Key-Value object with
  querystring parameters that will be added to requests.
  """
  queryParameters: JSON

  """
  For MapBox Vector and Raster sources. Influences the y direction of the tile
  coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
  """
  scheme: TileScheme

  """
  ArcGIS map service setting. If enabled, client can reorder layers and apply layer-specific opacity settings.
  """
  supportsDynamicLayers: Boolean

  """
  For tiled sources, a list of endpoints that can be used to retrieve tiles.
  """
  tiles: [String]

  """
  The minimum visual size to display tiles for this layer. Only configurable for raster layers.
  """
  tileSize: Int

  """
  GeoJSON only. Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance).
  """
  tolerance: BigFloat

  """MapBox GL source type or custom seasketch type."""
  type: DataSourceTypes!

  """
  A URL to a TileJSON resource for tiled sources. For GeoJSON or
  SEASKETCH_VECTOR sources, use this to fill in the data property of the source.
  Also used by ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR
  """
  url: String

  """
  Video sources only. URLs to video content in order of preferred format.
  """
  urls: [String]

  """
  ARCGIS_DYNAMIC_MAPSERVER only. When using a high-dpi screen, request higher resolution images.
  """
  useDevicePixelRatio: Boolean
}

"""
Represents an update to a `DataSource`. Fields that are set will be updated.
"""
input DataSourcePatch {
  """
  Contains an attribution to be displayed when the map is shown to a user.
  """
  attribution: String

  """
  GeoJSON only. Size of the tile buffer on each side. A value of 0 produces no
  buffer. A value of 512 produces a buffer as wide as the tile itself. Larger
  values produce fewer rendering artifacts near tile edges and slower performance.
  """
  buffer: Int

  """
  GeoJSON only.
  
  If the data is a collection of point features, setting this to true clusters
  the points by radius into groups. Cluster groups become new Point features in
  the source with additional properties:
  
    * cluster Is true if the point is a cluster
    * cluster_id A unqiue id for the cluster to be used in conjunction with the
  [cluster inspection methods](https://docs.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)
    * point_count Number of original points grouped into this cluster
    * point_count_abbreviated An abbreviated point count
  
  """
  cluster: Boolean

  """
  GeoJSON only. Max zoom on which to cluster points if clustering is enabled.
  Defaults to one zoom less than maxzoom (so that last zoom features are not clustered).
  """
  clusterMaxZoom: Int

  """
  See [MapBox GL Style docs](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#geojson-clusterProperties).
  """
  clusterProperties: JSON

  """
  GeoJSON only. Radius of each cluster if clustering is enabled. A value of 512
  indicates a radius equal to the width of a tile.
  """
  clusterRadius: Int

  """
  Image sources only. Corners of image specified in longitude, latitude pairs.
  """
  coordinates: [BigFloat]

  """
  Raster-DEM only. The encoding used by this source. Mapbox Terrain RGB is used by default
  """
  encoding: RasterDemEncoding

  """
  GeoJSON only. Whether to generate ids for the geojson features. When enabled,
  the feature.id property will be auto assigned based on its index in the
  features array, over-writing any previous values.
  """
  generateId: Boolean

  """
  GeoJSON only. Whether to calculate line distance metrics. This is required for
  line layers that specify line-gradient values.
  """
  lineMetrics: Boolean

  """
  For Vector, Raster, GeoJSON and Raster DEM sources. Maximum zoom level for
  which tiles are available, as in the TileJSON spec. Data from tiles at the
  maxzoom are used when displaying the map at higher zoom levels.
  """
  maxzoom: Int

  """
  For Vector, Raster, and Raster DEM sources. Minimum zoom level for which tiles are available, as in the TileJSON spec.
  """
  minzoom: Int

  """
  GeoJSON only. A property to use as a feature id (for feature state). Either a
  property name, or an object of the form `{<sourceLayer>: <propertyName>}.`
  """
  promoteId: Boolean

  """
  ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR only. Key-Value object with
  querystring parameters that will be added to requests.
  """
  queryParameters: JSON

  """
  For MapBox Vector and Raster sources. Influences the y direction of the tile
  coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
  """
  scheme: TileScheme

  """
  ArcGIS map service setting. If enabled, client can reorder layers and apply layer-specific opacity settings.
  """
  supportsDynamicLayers: Boolean

  """
  For tiled sources, a list of endpoints that can be used to retrieve tiles.
  """
  tiles: [String]

  """
  The minimum visual size to display tiles for this layer. Only configurable for raster layers.
  """
  tileSize: Int

  """
  GeoJSON only. Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance).
  """
  tolerance: BigFloat

  """
  A URL to a TileJSON resource for tiled sources. For GeoJSON or
  SEASKETCH_VECTOR sources, use this to fill in the data property of the source.
  Also used by ARCGIS_DYNAMIC_MAPSERVER and ARCGIS_VECTOR
  """
  url: String

  """
  Video sources only. URLs to video content in order of preferred format.
  """
  urls: [String]

  """
  ARCGIS_DYNAMIC_MAPSERVER only. When using a high-dpi screen, request higher resolution images.
  """
  useDevicePixelRatio: Boolean
}

type DataSourcesBucket implements Node {
  bucket: String!
  location: GeometryPoint!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Project`."""
  projectsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
  region: String!
}

"""
A condition to be used against `DataSourcesBucket` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DataSourcesBucketCondition {
  """Checks for equality with the object’s `bucket` field."""
  bucket: String
}

"""A connection to a list of `DataSourcesBucket` values."""
type DataSourcesBucketsConnection {
  """
  A list of edges which contains the `DataSourcesBucket` and cursor to aid in pagination.
  """
  edges: [DataSourcesBucketsEdge!]!

  """A list of `DataSourcesBucket` objects."""
  nodes: [DataSourcesBucket!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DataSourcesBucket` you could get from the connection.
  """
  totalCount: Int!
}

"""A `DataSourcesBucket` edge in the connection."""
type DataSourcesBucketsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DataSourcesBucket` at the end of the edge."""
  node: DataSourcesBucket!
}

"""Methods to use when ordering `DataSourcesBucket`."""
enum DataSourcesBucketsOrderBy {
  BUCKET_ASC
  BUCKET_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A `DataSource` edge in the connection."""
type DataSourcesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DataSource` at the end of the edge."""
  node: DataSource!
}

"""Methods to use when ordering `DataSource`."""
enum DataSourcesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

enum DataSourceTypes {
  """Loads dynamic images for the entire viewport from arcgis server"""
  ARCGIS_DYNAMIC_MAPSERVER

  """Loads vector data from arcgis server for rendering as a geojson source"""
  ARCGIS_VECTOR

  """MapBox GL Style "geojson" source"""
  GEOJSON

  """MapBox GL Style "image" source"""
  IMAGE

  """MapBox GL Style "raster" source"""
  RASTER

  """MapBox GL Style "raster" source"""
  RASTER_DEM

  """
  Combination of geojson and possible vector sources hosted on SeaSketch CND
  """
  SEASKETCH_VECTOR

  """MapBox GL Style "vector" source"""
  VECTOR

  """MapBox GL Style "video" source"""
  VIDEO
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteBasemapByNodeId` mutation."""
input DeleteBasemapByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Basemap` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBasemap` mutation."""
input DeleteBasemapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Basemap` mutation."""
type DeleteBasemapPayload {
  """The `Basemap` that was deleted by this mutation."""
  basemap: Basemap

  """An edge for our `Basemap`. May be used by Relay 1."""
  basemapEdge(
    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedBasemapNodeId: ID

  """
  Reads a single `InteractivitySetting` that is related to this `Basemap`.
  """
  interactivitySettings: InteractivitySetting

  """Reads a single `Project` that is related to this `Basemap`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCommunityGuidelineByNodeId` mutation."""
input DeleteCommunityGuidelineByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CommunityGuideline` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCommunityGuideline` mutation."""
input DeleteCommunityGuidelineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
}

"""The output of our delete `CommunityGuideline` mutation."""
type DeleteCommunityGuidelinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CommunityGuideline` that was deleted by this mutation."""
  communityGuideline: CommunityGuideline
  deletedCommunityGuidelineNodeId: ID

  """Reads a single `Project` that is related to this `CommunityGuideline`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDataLayerByInteractivitySettingsId` mutation."""
input DeleteDataLayerByInteractivitySettingsIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  interactivitySettingsId: Int!
}

"""All input for the `deleteDataLayerByNodeId` mutation."""
input DeleteDataLayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DataLayer` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDataLayer` mutation."""
input DeleteDataLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `DataLayer` mutation."""
type DeleteDataLayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataLayer` that was deleted by this mutation."""
  dataLayer: DataLayer

  """An edge for our `DataLayer`. May be used by Relay 1."""
  dataLayerEdge(
    """The method to use when ordering `DataLayer`."""
    orderBy: [DataLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataLayersEdge

  """Reads a single `DataSource` that is related to this `DataLayer`."""
  dataSource: DataSource
  deletedDataLayerNodeId: ID

  """
  Reads a single `InteractivitySetting` that is related to this `DataLayer`.
  """
  interactivitySettings: InteractivitySetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDataSourceByNodeId` mutation."""
input DeleteDataSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DataSource` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDataSource` mutation."""
input DeleteDataSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Should be used as sourceId in stylesheets."""
  id: Int!
}

"""The output of our delete `DataSource` mutation."""
type DeleteDataSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataSource` that was deleted by this mutation."""
  dataSource: DataSource

  """An edge for our `DataSource`. May be used by Relay 1."""
  dataSourceEdge(
    """The method to use when ordering `DataSource`."""
    orderBy: [DataSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesEdge
  deletedDataSourceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormByNodeId` mutation."""
input DeleteFormByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFormBySketchClassId` mutation."""
input DeleteFormBySketchClassIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Related *SketchClass*"""
  sketchClassId: Int!
}

"""All input for the `deleteFormBySurveyId` mutation."""
input DeleteFormBySurveyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Related *Survey*"""
  surveyId: Int!
}

"""
All input for the `deleteFormConditionalRenderingRuleByNodeId` mutation.
"""
input DeleteFormConditionalRenderingRuleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormConditionalRenderingRule` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFormConditionalRenderingRule` mutation."""
input DeleteFormConditionalRenderingRuleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `FormConditionalRenderingRule` mutation."""
type DeleteFormConditionalRenderingRulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormConditionalRenderingRuleNodeId: ID

  """
  Reads a single `FormField` that is related to this `FormConditionalRenderingRule`.
  """
  field: FormField

  """The `FormConditionalRenderingRule` that was deleted by this mutation."""
  formConditionalRenderingRule: FormConditionalRenderingRule

  """
  An edge for our `FormConditionalRenderingRule`. May be used by Relay 1.
  """
  formConditionalRenderingRuleEdge(
    """The method to use when ordering `FormConditionalRenderingRule`."""
    orderBy: [FormConditionalRenderingRulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormConditionalRenderingRulesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormFieldByNodeId` mutation."""
input DeleteFormFieldByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormField` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFormField` mutation."""
input DeleteFormFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `FormField` mutation."""
type DeleteFormFieldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormFieldNodeId: ID

  """Reads a single `Form` that is related to this `FormField`."""
  form: Form

  """The `FormField` that was deleted by this mutation."""
  formField: FormField

  """An edge for our `FormField`. May be used by Relay 1."""
  formFieldEdge(
    """The method to use when ordering `FormField`."""
    orderBy: [FormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormFieldsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteForm` mutation."""
input DeleteFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Form` mutation."""
type DeleteFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormNodeId: ID

  """The `Form` that was deleted by this mutation."""
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

"""All input for the `deleteForumByNodeId` mutation."""
input DeleteForumByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Forum` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteForum` mutation."""
input DeleteForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Forum` mutation."""
type DeleteForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedForumNodeId: ID

  """The `Forum` that was deleted by this mutation."""
  forum: Forum

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGroupByNodeId` mutation."""
input DeleteGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupByProjectIdAndName` mutation."""
input DeleteGroupByProjectIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Label for the group."""
  name: String!
  projectId: Int!
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectGroupNodeId: ID

  """The `Group` that was deleted by this mutation."""
  group: Group

  """Reads a single `Project` that is related to this `Group`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOptionalBasemapLayerByNodeId` mutation."""
input DeleteOptionalBasemapLayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OptionalBasemapLayer` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOptionalBasemapLayer` mutation."""
input DeleteOptionalBasemapLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `OptionalBasemapLayer` mutation."""
type DeleteOptionalBasemapLayerPayload {
  """
  Reads a single `Basemap` that is related to this `OptionalBasemapLayer`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOptionalBasemapLayerNodeId: ID

  """The `OptionalBasemapLayer` that was deleted by this mutation."""
  optionalBasemapLayer: OptionalBasemapLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePostByNodeId` mutation."""
input DeletePostByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPostNodeId: ID

  """The `Post` that was deleted by this mutation."""
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic
}

"""All input for the `deleteProject` mutation."""
input DeleteProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
}

"""All input for the `deleteProjectInviteByEmailAndProjectId` mutation."""
input DeleteProjectInviteByEmailAndProjectIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Specified by admin when invite was created."""
  email: Email!
  projectId: Int!
}

"""All input for the `deleteProjectInviteByNodeId` mutation."""
input DeleteProjectInviteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectInvite` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectInviteGroupByInviteIdAndGroupId` mutation.
"""
input DeleteProjectInviteGroupByInviteIdAndGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  inviteId: Int!
}

"""The output of our delete `ProjectInviteGroup` mutation."""
type DeleteProjectInviteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectInviteGroupNodeId: ID

  """The `ProjectInviteGroup` that was deleted by this mutation."""
  projectInviteGroup: ProjectInviteGroup

  """An edge for our `ProjectInviteGroup`. May be used by Relay 1."""
  projectInviteGroupEdge(
    """The method to use when ordering `ProjectInviteGroup`."""
    orderBy: [ProjectInviteGroupsOrderBy!] = [NATURAL]
  ): ProjectInviteGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectInvite` mutation."""
input DeleteProjectInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `ProjectInvite` mutation."""
type DeleteProjectInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectInviteNodeId: ID

  """The `ProjectInvite` that was deleted by this mutation."""
  projectInvite: ProjectInvite

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our `deleteProject` mutation."""
type DeleteProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteProjectsSharedBasemapByBasemapIdAndProjectId` mutation.
"""
input DeleteProjectsSharedBasemapByBasemapIdAndProjectIdInput {
  basemapId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
}

"""The output of our delete `ProjectsSharedBasemap` mutation."""
type DeleteProjectsSharedBasemapPayload {
  """
  Reads a single `Basemap` that is related to this `ProjectsSharedBasemap`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectsSharedBasemapNodeId: ID

  """The `ProjectsSharedBasemap` that was deleted by this mutation."""
  projectsSharedBasemap: ProjectsSharedBasemap

  """An edge for our `ProjectsSharedBasemap`. May be used by Relay 1."""
  projectsSharedBasemapEdge(
    """The method to use when ordering `ProjectsSharedBasemap`."""
    orderBy: [ProjectsSharedBasemapsOrderBy!] = [NATURAL]
  ): ProjectsSharedBasemapsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteSketchByNodeId` mutation."""
input DeleteSketchByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sketch` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSketchClassByNodeId` mutation."""
input DeleteSketchClassByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchClass` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSketchClass` mutation."""
input DeleteSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SketchClass` mutation."""
type DeleteSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSketchClassNodeId: ID

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchClass` that was deleted by this mutation."""
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the `deleteSketchFolderByNodeId` mutation."""
input DeleteSketchFolderByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchFolder` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSketchFolder` mutation."""
input DeleteSketchFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SketchFolder` mutation."""
type DeleteSketchFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSketchFolderNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchFolder` that was deleted by this mutation."""
  sketchFolder: SketchFolder

  """An edge for our `SketchFolder`. May be used by Relay 1."""
  sketchFolderEdge(
    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersEdge
}

"""All input for the `deleteSketch` mutation."""
input DeleteSketchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Sketch` mutation."""
type DeleteSketchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch
  deletedSketchNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Sketch` that was deleted by this mutation."""
  sketch: Sketch

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass

  """Reads a single `User` that is related to this `Sketch`."""
  user: User
}

"""All input for the `deleteSurveyByNodeId` mutation."""
input DeleteSurveyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Survey` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSurvey` mutation."""
input DeleteSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteSurveyInviteByEmailAndSurveyId` mutation."""
input DeleteSurveyInviteByEmailAndSurveyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: Email!
  surveyId: Int!
}

"""All input for the `deleteSurveyInviteByEmail` mutation."""
input DeleteSurveyInviteByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: Email!
}

"""All input for the `deleteSurveyInviteByNodeId` mutation."""
input DeleteSurveyInviteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SurveyInvite` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSurveyInvitedGroupBySurveyIdAndGroupId` mutation.
"""
input DeleteSurveyInvitedGroupBySurveyIdAndGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  surveyId: Int!
}

"""The output of our delete `SurveyInvitedGroup` mutation."""
type DeleteSurveyInvitedGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSurveyInvitedGroupNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyInvitedGroup`."""
  survey: Survey

  """The `SurveyInvitedGroup` that was deleted by this mutation."""
  surveyInvitedGroup: SurveyInvitedGroup
}

"""All input for the `deleteSurveyInvite` mutation."""
input DeleteSurveyInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SurveyInvite` mutation."""
type DeleteSurveyInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSurveyInviteNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyInvite`."""
  survey: Survey

  """The `SurveyInvite` that was deleted by this mutation."""
  surveyInvite: SurveyInvite

  """An edge for our `SurveyInvite`. May be used by Relay 1."""
  surveyInviteEdge(
    """The method to use when ordering `SurveyInvite`."""
    orderBy: [SurveyInvitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyInvitesEdge
}

"""The output of our delete `Survey` mutation."""
type DeleteSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSurveyNodeId: ID

  """Reads a single `Project` that is related to this `Survey`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Survey` that was deleted by this mutation."""
  survey: Survey
}

"""All input for the `deleteSurveyResponseByNodeId` mutation."""
input DeleteSurveyResponseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SurveyResponse` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSurveyResponse` mutation."""
input DeleteSurveyResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SurveyResponse` mutation."""
type DeleteSurveyResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSurveyResponseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey

  """The `SurveyResponse` that was deleted by this mutation."""
  surveyResponse: SurveyResponse

  """An edge for our `SurveyResponse`. May be used by Relay 1."""
  surveyResponseEdge(
    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesEdge
}

"""All input for the `deleteTableOfContentsBranch` mutation."""
input DeleteTableOfContentsBranchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tableOfContentsItemId: Int
}

"""The output of our `deleteTableOfContentsBranch` mutation."""
type DeleteTableOfContentsBranchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTopicByNodeId` mutation."""
input DeleteTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTopic` mutation."""
input DeleteTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Topic` mutation."""
type DeleteTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTopicNodeId: ID

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was deleted by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `disableForumPosting` mutation."""
input DisableForumPostingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `disableForumPosting` mutation."""
type DisableForumPostingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

scalar Email

"""
Email notification preferences can be read and set by the current user session.
These settings cannot be accessed by other users or SeaSketch project admins.

"""
type EmailNotificationPreference {
  """
  Email used when registering the account in Auth0. This email cannot be
  updated through the API, though it may be possible to do so manually by
  SeaSketch developers.
  
  This is the email by which users will recieve transactional emails like
  project and survey invites, and email notifications.
  """
  canonicalEmail: String

  """
  How often users should be notified of SeaSketch project activity.
  
  """
  frequency: EmailSummaryFrequency!

  """
  If set, users should receive realtime notifications of responses to discussion
  forum threads for which they are a participant.
  
  """
  notifyOnReply: Boolean!

  """
  If selected, users should receive absolutely no email from SeaSketch. Invite 
  emails should not be sent and their status should be set to UNSUBSCRIBED.
  
  """
  unsubscribeAll: Boolean!

  """
  Reads a single `User` that is related to this `EmailNotificationPreference`.
  """
  user: User
  userId: Int!
}

"""
A condition to be used against `EmailNotificationPreference` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input EmailNotificationPreferenceCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""
Represents an update to a `EmailNotificationPreference`. Fields that are set will be updated.
"""
input EmailNotificationPreferencePatch {
  """
  How often users should be notified of SeaSketch project activity.
  
  """
  frequency: EmailSummaryFrequency

  """
  If set, users should receive realtime notifications of responses to discussion
  forum threads for which they are a participant.
  
  """
  notifyOnReply: Boolean

  """
  If selected, users should receive absolutely no email from SeaSketch. Invite 
  emails should not be sent and their status should be set to UNSUBSCRIBED.
  
  """
  unsubscribeAll: Boolean
  userId: Int
}

"""A connection to a list of `EmailNotificationPreference` values."""
type EmailNotificationPreferencesConnection {
  """
  A list of edges which contains the `EmailNotificationPreference` and cursor to aid in pagination.
  """
  edges: [EmailNotificationPreferencesEdge!]!

  """A list of `EmailNotificationPreference` objects."""
  nodes: [EmailNotificationPreference!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmailNotificationPreference` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EmailNotificationPreference` edge in the connection."""
type EmailNotificationPreferencesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmailNotificationPreference` at the end of the edge."""
  node: EmailNotificationPreference!
}

"""Methods to use when ordering `EmailNotificationPreference`."""
enum EmailNotificationPreferencesOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
}

enum EmailStatus {
  """
  Emails may be bounced due to a full inbox, misconfigured mail server, or other
  reasons. See [AWS SES documentation](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-using-event-publishing.html#event-publishing-terminology).
  """
  BOUNCED

  """
  User has reported SeaSketch as sending Spam in this or another project.
  SeaSketch will no longer send emails to this user in any project.
  """
  COMPLAINT

  """Delivered to the user's mail server"""
  DELIVERED

  """
  SeaSketch application error when sending invite emails. Refer to email status
  """
  ERROR

  """
  Admin has sent the invite, but the mail delivery subsystem has not yet sent the invite
  """
  QUEUED

  """
  Invite email has been sent but not yet delivered to the user's mail server
  """
  SENT

  """
  
  The user has unsubscribed from all emails originating from SeaSketch.
  
  If this happens SeaSketch will not be able to send any invitations to the user.
      
  """
  UNSUBSCRIBED
}

enum EmailSummaryFrequency {
  DAILY
  NEVER
  WEEKLY
}

"""All input for the `enableForumPosting` mutation."""
input EnableForumPostingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `enableForumPosting` mutation."""
type EnableForumPostingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

enum FieldRuleOperator {
  """String contains value"""
  CONTAINS
  EQUAL
  GREATER_THAN

  """Empty string input or no choice selection"""
  IS_BLANK

  """Predicate field value is less than specified value"""
  LESS_THAN
  NOT_EQUAL
}

"""
Custom user-input Forms are used in two places in SeaSketch. For SketchClasses,
Forms are used to add attributes to spatial features. In Surveys, Forms are used
in support of gathering response data.

Forms have any number of *FormFields* ordered by a `position` field, and form 
contents may be hidden depending on the evaluation of *FormConditionalRenderingRules*.

Forms typically belong to either a *Survey* or *SketchClass* exclusively. Some
Forms may be designated as a template, in which case they belong to neither. 
Only superusers can create form templates, and clients should provide templates
as an option when creating new forms.

"""
type Form implements Node {
  """List of all FormFields in this form."""
  formFields(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormFieldCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `FormField`."""
    orderBy: [FormFieldsOrderBy!]
  ): [FormField!]!
  id: Int!

  """
  SeaSetch superusers can create template forms than can be used when creating 
  SketchClasses or Surveys. These templates can be created using the 
  `createFormTemplateFromSketchClass` and `createFormTemplateFromSurvey` 
  mutations. Template forms can be listed with the root-level `templateForms` 
  query.
  
  """
  isTemplate: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Related *SketchClass*"""
  sketchClassId: Int

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey

  """Related *Survey*"""
  surveyId: Int

  """Chosen by superusers upon template creation"""
  templateName: String

  """Indicates which features should use this form as a template"""
  templateType: FormTemplateType
}

"""
A condition to be used against `Form` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FormCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isTemplate` field."""
  isTemplate: Boolean

  """Checks for equality with the object’s `sketchClassId` field."""
  sketchClassId: Int

  """Checks for equality with the object’s `surveyId` field."""
  surveyId: Int
}

"""
If any rendering rules are set, at least one rule must evaluate true for the 
field to be displayed to users. isRequired rules on *FormFields* should not be
enforced for fields that are hidden by a rule.

An example of a rule would be:

SHOW fieldB if fieldA GREATER_THAN 5

"""
type FormConditionalRenderingRule implements Node {
  """
  Reads a single `FormField` that is related to this `FormConditionalRenderingRule`.
  """
  field: FormField

  """Field that will be hidden unless the rule evaluates true"""
  fieldId: Int!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Comparison operation"""
  operator: FieldRuleOperator!

  """Field that is evaluated"""
  predicateFieldId: Int!

  """Value that predicate_field.value is compared to"""
  value: String
}

"""
A condition to be used against `FormConditionalRenderingRule` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FormConditionalRenderingRuleCondition {
  """Checks for equality with the object’s `fieldId` field."""
  fieldId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `FormConditionalRenderingRule`"""
input FormConditionalRenderingRuleInput {
  """Field that will be hidden unless the rule evaluates true"""
  fieldId: Int!
  id: Int

  """Comparison operation"""
  operator: FieldRuleOperator

  """Field that is evaluated"""
  predicateFieldId: Int!

  """Value that predicate_field.value is compared to"""
  value: String
}

"""
Represents an update to a `FormConditionalRenderingRule`. Fields that are set will be updated.
"""
input FormConditionalRenderingRulePatch {
  """Field that will be hidden unless the rule evaluates true"""
  fieldId: Int

  """Comparison operation"""
  operator: FieldRuleOperator

  """Field that is evaluated"""
  predicateFieldId: Int

  """Value that predicate_field.value is compared to"""
  value: String
}

"""A `FormConditionalRenderingRule` edge in the connection."""
type FormConditionalRenderingRulesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormConditionalRenderingRule` at the end of the edge."""
  node: FormConditionalRenderingRule!
}

"""Methods to use when ordering `FormConditionalRenderingRule`."""
enum FormConditionalRenderingRulesOrderBy {
  FIELD_ID_ASC
  FIELD_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
*FormFields* represent input fields in a form. Records contain fields to support
generic functionality like name, description, position, and isRequired. They 
also have a JSON `componentSettings` field that can have custom data to support
a particular input type, indicated by the `type` field.

Project administrators have full control over managing form fields through
graphile-generated CRUD mutations.

"""
type FormField implements Node {
  """
  Type-specific configuration. For example, a Choice field might have a list of valid choices.
  """
  componentSettings: JSON!

  """Set of rules that determine the visibility of this field."""
  conditionalRenderingRules(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormConditionalRenderingRuleCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `FormConditionalRenderingRule`."""
    orderBy: [FormConditionalRenderingRulesOrderBy!]
  ): [FormConditionalRenderingRule!]!

  """Question description. Max length 500 characters"""
  description: String

  """
  Column name in csv export, property name in reporting tools. Keep stable to avoid breaking reports
  """
  exportId: String!

  """Reads a single `Form` that is related to this `FormField`."""
  form: Form

  """Form this field belongs to."""
  formId: Int!
  id: Int!

  """Users must provide input for these fields before submission."""
  isRequired: Boolean!

  """Question label"""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Determines order of field display. Clients should display fields in ascending 
  order. Cannot be changed individually. Use `setFormFieldOrder()` mutation to 
  update.
  
  """
  position: Int!

  """
  Indicates the input type. Each input type has a client-side component
  implementation with custom configuration properties stored in
  `componentSettings`.
  """
  type: FormFieldType!
}

"""
A condition to be used against `FormField` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormFieldCondition {
  """Checks for equality with the object’s `formId` field."""
  formId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `FormField`"""
input FormFieldInput {
  """
  Type-specific configuration. For example, a Choice field might have a list of valid choices.
  """
  componentSettings: JSON

  """Question description. Max length 500 characters"""
  description: String

  """
  Column name in csv export, property name in reporting tools. Keep stable to avoid breaking reports
  """
  exportId: String!

  """Form this field belongs to."""
  formId: Int!
  id: Int

  """Users must provide input for these fields before submission."""
  isRequired: Boolean

  """Question label"""
  name: String!

  """
  Determines order of field display. Clients should display fields in ascending 
  order. Cannot be changed individually. Use `setFormFieldOrder()` mutation to 
  update.
  
  """
  position: Int

  """
  Indicates the input type. Each input type has a client-side component
  implementation with custom configuration properties stored in
  `componentSettings`.
  """
  type: FormFieldType!
}

"""
Represents an update to a `FormField`. Fields that are set will be updated.
"""
input FormFieldPatch {
  """
  Type-specific configuration. For example, a Choice field might have a list of valid choices.
  """
  componentSettings: JSON

  """Question description. Max length 500 characters"""
  description: String

  """
  Column name in csv export, property name in reporting tools. Keep stable to avoid breaking reports
  """
  exportId: String

  """Users must provide input for these fields before submission."""
  isRequired: Boolean

  """Question label"""
  name: String

  """
  Determines order of field display. Clients should display fields in ascending 
  order. Cannot be changed individually. Use `setFormFieldOrder()` mutation to 
  update.
  
  """
  position: Int

  """
  Indicates the input type. Each input type has a client-side component
  implementation with custom configuration properties stored in
  `componentSettings`.
  """
  type: FormFieldType
}

"""A `FormField` edge in the connection."""
type FormFieldsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormField` at the end of the edge."""
  node: FormField!
}

"""Methods to use when ordering `FormField`."""
enum FormFieldsOrderBy {
  FORM_ID_ASC
  FORM_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""

FormField input types. Each type will need a custom client-side component. 
This list will expand as the application supports new types. New types can be 
added by using the command: 

`alter type form_field_type add value 'NEW_TYPE';`

"""
enum FormFieldType {
  """Non-input type field. Used to insert headers into a form"""
  SECTION

  """HTML select field. May support multiple choices"""
  SELECT

  """HTML textarea field"""
  TEXTAREA

  """The simplest input type, a plain html `<input type="text" />`"""
  TEXTINPUT
}

"""A connection to a list of `Form` values."""
type FormsConnection {
  """
  A list of edges which contains the `Form` and cursor to aid in pagination.
  """
  edges: [FormsEdge!]!

  """A list of `Form` objects."""
  nodes: [Form!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection."""
type FormsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form!
}

"""Methods to use when ordering `Form`."""
enum FormsOrderBy {
  ID_ASC
  ID_DESC
  IS_TEMPLATE_ASC
  IS_TEMPLATE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SKETCH_CLASS_ID_ASC
  SKETCH_CLASS_ID_DESC
  SURVEY_ID_ASC
  SURVEY_ID_DESC
}

"""Indicates which features should use the form as a template"""
enum FormTemplateType {
  """Template should only be listed for *SketchClasses*."""
  SKETCHES

  """Template should only be listed for *Surveys*."""
  SURVEYS

  """Template should be an option for both types."""
  SURVEYS_AND_SKETCHES
}

"""
Discussion forums are the highest level organizing unit of the discussion forums
for a project. Each forum can have many topics (threads), which then contain
posts. Only project administrators can create and configure forums.

"""
type Forum implements Node {
  """
  Archived forums will only be accessible by project administrators from the
  admin dashboard. This is an alternative to deleting a forum.
  """
  archived: Boolean

  """Optional description of the forum to be displayed to project users."""
  description: String
  id: Int!

  """Title displayed for the forum."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Sets position of this forum in the listing. Forums should be listed by
  position in ascending order. Set using `setForumOrder()`
  """
  position: Int

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project
  projectId: Int!

  """Reads and enables pagination through a set of `Topic`."""
  topicsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection!
}

"""
A condition to be used against `Forum` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ForumCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""An input for mutations affecting `Forum`"""
input ForumInput {
  """
  Archived forums will only be accessible by project administrators from the
  admin dashboard. This is an alternative to deleting a forum.
  """
  archived: Boolean

  """Optional description of the forum to be displayed to project users."""
  description: String
  id: Int

  """Title displayed for the forum."""
  name: String!

  """
  Sets position of this forum in the listing. Forums should be listed by
  position in ascending order. Set using `setForumOrder()`
  """
  position: Int
  projectId: Int!
}

"""
Represents an update to a `Forum`. Fields that are set will be updated.
"""
input ForumPatch {
  """
  Archived forums will only be accessible by project administrators from the
  admin dashboard. This is an alternative to deleting a forum.
  """
  archived: Boolean

  """Optional description of the forum to be displayed to project users."""
  description: String

  """Title displayed for the forum."""
  name: String

  """
  Sets position of this forum in the listing. Forums should be listed by
  position in ascending order. Set using `setForumOrder()`
  """
  position: Int
}

"""A `Forum` edge in the connection."""
type ForumsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Forum` at the end of the edge."""
  node: Forum!
}

"""Methods to use when ordering `Forum`."""
enum ForumsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""All geography XY types implement this interface"""
interface GeographyGeometry {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

"""All geography types implement this interface"""
interface GeographyInterface {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

type GeographyLineString implements GeographyGeometry & GeographyInterface {
  geojson: GeoJSON
  points: [GeographyPoint]
  srid: Int!
}

type GeographyPoint implements GeographyGeometry & GeographyInterface {
  geojson: GeoJSON
  latitude: Float!
  longitude: Float!
  srid: Int!
}

type GeographyPolygon implements GeographyGeometry & GeographyInterface {
  exterior: GeographyLineString
  geojson: GeoJSON
  interiors: [GeographyLineString]
  srid: Int!
}

"""
The `GeoJSON` scalar type represents GeoJSON values as specified by[RFC 7946](https://tools.ietf.org/html/rfc7946).
"""
scalar GeoJSON

"""All geometry XY types implement this interface"""
interface GeometryGeometry {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

type GeometryGeometryCollection implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryGeometry]
  srid: Int!
}

type GeometryGeometryCollectionM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryGeometryM]
  srid: Int!
}

type GeometryGeometryCollectionZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryGeometryZ]
  srid: Int!
}

type GeometryGeometryCollectionZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryGeometryZM]
  srid: Int!
}

"""All geometry XYM types implement this interface"""
interface GeometryGeometryM {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

"""All geometry XYZ types implement this interface"""
interface GeometryGeometryZ {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

"""All geometry XYZM types implement this interface"""
interface GeometryGeometryZM {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

"""All geometry types implement this interface"""
interface GeometryInterface {
  """Converts the object to GeoJSON"""
  geojson: GeoJSON

  """Spatial reference identifier (SRID)"""
  srid: Int!
}

type GeometryLineString implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPoint]
  srid: Int!
}

type GeometryLineStringM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointM]
  srid: Int!
}

type GeometryLineStringZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZ]
  srid: Int!
}

type GeometryLineStringZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZM]
  srid: Int!
}

type GeometryMultiLineString implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLineString]
  srid: Int!
}

type GeometryMultiLineStringM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLineStringM]
  srid: Int!
}

type GeometryMultiLineStringZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLineStringZ]
  srid: Int!
}

type GeometryMultiLineStringZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLineStringZM]
  srid: Int!
}

type GeometryMultiPoint implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPoint]
  srid: Int!
}

type GeometryMultiPointM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointM]
  srid: Int!
}

type GeometryMultiPointZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZ]
  srid: Int!
}

type GeometryMultiPointZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZM]
  srid: Int!
}

type GeometryMultiPolygon implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygon]
  srid: Int!
}

type GeometryMultiPolygonM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygonM]
  srid: Int!
}

type GeometryMultiPolygonZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygonZ]
  srid: Int!
}

type GeometryMultiPolygonZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygonZM]
  srid: Int!
}

type GeometryPoint implements GeometryGeometry & GeometryInterface {
  geojson: GeoJSON
  srid: Int!
  x: Float!
  y: Float!
}

type GeometryPointM implements GeometryGeometryM & GeometryInterface {
  geojson: GeoJSON
  srid: Int!
  x: Float!
  y: Float!
}

type GeometryPointZ implements GeometryGeometryZ & GeometryInterface {
  geojson: GeoJSON
  srid: Int!
  x: Float!
  y: Float!
}

type GeometryPointZM implements GeometryGeometryZM & GeometryInterface {
  geojson: GeoJSON
  srid: Int!
  x: Float!
  y: Float!
}

type GeometryPolygon implements GeometryGeometry & GeometryInterface {
  exterior: GeometryLineString
  geojson: GeoJSON
  interiors: [GeometryLineString]
  srid: Int!
}

type GeometryPolygonM implements GeometryGeometryM & GeometryInterface {
  exterior: GeometryLineStringM
  geojson: GeoJSON
  interiors: [GeometryLineStringM]
  srid: Int!
}

type GeometryPolygonZ implements GeometryGeometryZ & GeometryInterface {
  exterior: GeometryLineStringZ
  geojson: GeoJSON
  interiors: [GeometryLineStringZ]
  srid: Int!
}

type GeometryPolygonZM implements GeometryGeometryZM & GeometryInterface {
  exterior: GeometryLineStringZM
  geojson: GeoJSON
  interiors: [GeometryLineStringZM]
  srid: Int!
}

"""All input for the `grantAdminAccess` mutation."""
input GrantAdminAccessInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `grantAdminAccess` mutation."""
type GrantAdminAccessPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
User groups designated by the project administrators. User groups can be used to
assign access control privileges to users. 

Note that only admins have access to groups, or direct knowlege of what groups a
user belongs to. If an admin wanted to create an *Assholes* group they are 
free to do so.

"""
type Group implements Node {
  id: Int!
  memberCount: Int

  """Listing of all users who have been assigned to this group."""
  members(
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    orderBy: ParticipantSortBy
  ): [User!]

  """Label for the group."""
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `Group`."""
  project: Project
  projectId: Int!
}

"""An input for mutations affecting `Group`"""
input GroupInput {
  id: Int

  """Label for the group."""
  name: String
  projectId: Int!
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  id: Int

  """Label for the group."""
  name: String
  projectId: Int
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""All input for the `initializeBlankSketchClassForm` mutation."""
input InitializeBlankSketchClassFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sketchClassId: Int
}

"""The output of our `initializeBlankSketchClassForm` mutation."""
type InitializeBlankSketchClassFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

"""All input for the `initializeBlankSurveyForm` mutation."""
input InitializeBlankSurveyFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  surveyId: Int
}

"""The output of our `initializeBlankSurveyForm` mutation."""
type InitializeBlankSurveyFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

"""All input for the `initializeSketchClassFormFromTemplate` mutation."""
input InitializeSketchClassFormFromTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sketchClassId: Int
  templateId: Int
}

"""The output of our `initializeSketchClassFormFromTemplate` mutation."""
type InitializeSketchClassFormFromTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

"""All input for the `initializeSurveyFormFromTemplate` mutation."""
input InitializeSurveyFormFromTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  surveyId: Int
  templateId: Int
}

"""The output of our `initializeSurveyFormFromTemplate` mutation."""
type InitializeSurveyFormFromTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Form`."""
  sketchClass: SketchClass

  """Reads a single `Survey` that is related to this `Form`."""
  survey: Survey
}

type InteractivitySetting implements Node {
  """Reads and enables pagination through a set of `Basemap`."""
  basemapsByInteractivitySettingsIdConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasemapCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsConnection!
  cursor: CursorType!

  """
  Reads a single `DataLayer` that is related to this `InteractivitySetting`.
  """
  dataLayerByInteractivitySettingsId: DataLayer

  """Reads and enables pagination through a set of `DataLayer`."""
  dataLayersByInteractivitySettingsIdConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataLayerCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataLayer`."""
    orderBy: [DataLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataLayersConnection! @deprecated(reason: "Please use dataLayerByInteractivitySettingsId instead")
  id: Int!

  """
  Used only for basemap interactivity settings. Optional list of layer ids that this setting applies to.
  
  """
  layers: [String]
  longTemplate: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  shortTemplate: String
  type: InteractivityType!
}

"""An input for mutations affecting `InteractivitySetting`"""
input InteractivitySettingInput {
  cursor: CursorType
  id: Int

  """
  Used only for basemap interactivity settings. Optional list of layer ids that this setting applies to.
  
  """
  layers: [String]
  longTemplate: String
  shortTemplate: String
  type: InteractivityType
}

"""
Represents an update to a `InteractivitySetting`. Fields that are set will be updated.
"""
input InteractivitySettingPatch {
  cursor: CursorType
  id: Int

  """
  Used only for basemap interactivity settings. Optional list of layer ids that this setting applies to.
  
  """
  layers: [String]
  longTemplate: String
  shortTemplate: String
  type: InteractivityType
}

enum InteractivityType {
  BANNER
  FIXED_BLOCK
  NONE
  POPUP
  TOOLTIP
}

"""
Invite emails can be associated with either a project or survey invitation. 
Project invite emails are sent by direct admin action, going into a QUEUED state
and eventually sent out by a backend emailing process. Survey invites are 
automatically created whenever a survey is published.

[More details on the mailing process can be found on the
wiki](https://github.com/seasketch/next/wiki/User-and-Survey-Invite-Management).

"""
type InviteEmail implements Node {
  createdAt: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `ProjectInvite` that is related to this `InviteEmail`."""
  projectInvite: ProjectInvite
  projectInviteId: Int

  """
  Updated by the mailer processes and SES notifications.
  
  """
  status: EmailStatus!

  """Reads a single `SurveyInvite` that is related to this `InviteEmail`."""
  surveyInvite: SurveyInvite
  surveyInviteId: Int

  """
  Emails contain a link with an embedded JSON Web Token that is used to authorize 
  access. These tokens have an expiration that is both embedded in the token and 
  tracked in the database. Each email has its own token and expiration.
  
  """
  tokenExpiresAt: Datetime
  updatedAt: Datetime
}

"""
A condition to be used against `InviteEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input InviteEmailCondition {
  """Checks for equality with the object’s `projectInviteId` field."""
  projectInviteId: Int

  """Checks for equality with the object’s `status` field."""
  status: EmailStatus

  """Checks for equality with the object’s `surveyInviteId` field."""
  surveyInviteId: Int
}

"""Methods to use when ordering `InviteEmail`."""
enum InviteEmailsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_INVITE_ID_ASC
  PROJECT_INVITE_ID_DESC
  STATUS_ASC
  STATUS_DESC
  SURVEY_INVITE_ID_ASC
  SURVEY_INVITE_ID_DESC
}

enum InviteOrderBy {
  EMAIL
  NAME
}

type InviteStat {
  count: Int
  status: InviteStatus
}

"""
Invite status is derived from feedback notifications coming from the AWS SES
email service and token expiration date. See the inviteEmails relation for more details.
"""
enum InviteStatus {
  """
  Emails may be bounced due to a full inbox, misconfigured mail server, or other
  reasons. See [AWS SES documentation](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-using-event-publishing.html#event-publishing-terminology).
  """
  BOUNCED

  """
  User has reported SeaSketch as sending Spam in this or another project.
  SeaSketch will no longer send emails to this user in any project.
  """
  COMPLAINT

  """
  
  #### Project Invites
  User has accepted the invite.
  
  #### Survey Invites
  User has responded to the survey.
  """
  CONFIRMED

  """Delivered to the user's mail server"""
  DELIVERED

  """
  SeaSketch application error when sending invite emails. Refer to email status
  """
  ERROR

  """
  
  #### Project Invites    
  Admin has sent the invite, but the mail delivery subsystem has not yet sent the invite.
  
  #### Survey Invites
  Invite has been created but email has not yet been sent. Emails will be sent
  automatically by a periodic backend process (approx every 20 seconds).
  
  """
  QUEUED

  """
  Invite email has been sent but not yet delivered to the user's mail server
  """
  SENT

  """
  Project invites have this status when a survey invite is queued for sending in
  this project. Users can be invited to a survey + have an un-sent project
  invite that they can confirm using `confirmProjectInviteWithSurveyToken()`.
  This way users do not need to simultaneously be sent both a project and survey invite.
  """
  SURVEY_INVITE_QUEUED

  """
  Survey invite for this project and email has already been sent. See InviteStatus.SURVEY_INVITE_QUEUED for more details.
  """
  SURVEY_INVITE_SENT

  """
  
  For **project invites**, Invite JSON Web Tokens are set to expire in 14
  (admins) or 60 days. **Survey invites** expire after 60 days for invite_only
  surveys, and after 2 years for public surveys. Invites should be resent if
  still necessary
  """
  TOKEN_EXPIRED

  """Unused enum value."""
  UNCONFIRMED

  """
  **Project Invites only**. Invites may be created but not sent immediately.
  This way admins can collaboratively update a project invite list before
  mass-sending invites when a project is first published.
  """
  UNSENT

  """
  
  The user has unsubscribed from all emails originating from SeaSketch.
  
  If this happens SeaSketch will not be able to send any invitations to the user.
  
  """
  UNSUBSCRIBED
}

"""All input for the `joinProject` mutation."""
input JoinProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `joinProject` mutation."""
type JoinProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""All input for the `leaveProject` mutation."""
input LeaveProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `leaveProject` mutation."""
type LeaveProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `makeResponseDraft` mutation."""
input MakeResponseDraftInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  responseId: Int
}

"""The output of our `makeResponseDraft` mutation."""
type MakeResponseDraftPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey
  surveyResponse: SurveyResponse

  """An edge for our `SurveyResponse`. May be used by Relay 1."""
  surveyResponseEdge(
    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesEdge
}

"""All input for the `markTopicAsRead` mutation."""
input MarkTopicAsReadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  topicId: Int
}

"""The output of our `markTopicAsRead` mutation."""
type MarkTopicAsReadPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Add a group to a given access control list. Must be an administrator."""
  addGroupToAcl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddGroupToAclInput!
  ): AddGroupToAclPayload
  addImageToSprite(height: Int!, image: Upload!, pixelRatio: Int!, spriteId: Int!, width: Int!): Sprite

  """
  Add the given user to a group. Must be an administrator of the project.
  """
  addUserToGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddUserToGroupInput!
  ): AddUserToGroupPayload

  """
  Add a SketchClass to the list of valid children for a Collection-type SketchClass.
  
  """
  addValidChildSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddValidChildSketchClassInput!
  ): AddValidChildSketchClassPayload

  """
  For invite_only projects. Approve access request by a user. Must be an administrator of the project.
  """
  approveParticipant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ApproveParticipantInput!
  ): ApproveParticipantPayload

  """
  Confirm that a new user has seen any onboarding materials. Updates User.onboarded date.
  
  """
  confirmOnboarded(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmOnboardedInput!
  ): ConfirmOnboardedPayload

  """
  Accept a project invite using a token (distributed via email). When
  confirming a token, the current session will be assigned any group
  membership or admin privileges assigned to the invite. The act of
  accepting a token that was sent via email will also verify the user's
  email if it wasn't already.
  
  More details on how to handle invites can be found
  [on the wiki](https://github.com/seasketch/next/wiki/User-Ingress#project-invites)
  """
  confirmProjectInvite(
    """JWT string"""
    token: String!
  ): ProjectInviteTokenClaims

  """
  Project invites can be paired with survey invites so that users can be sent an
  email inviting them to a survey, then use that survey invite to confirm a 
  project invitation. This way there are no duplicative emails sent.
  
  Clients must set x-ss-survey-invite-token header before calling this mutation.
  
  """
  confirmProjectInviteWithSurveyToken(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmProjectInviteWithSurveyTokenInput!
  ): ConfirmProjectInviteWithSurveyTokenPayload

  """
  Users can confirm project invites without clicking thru an email if they are 
  registered for SeaSketch and their verified email matches that of a project 
  invite. Outstanding (or confirmed) invites can be accessed via the 
  `currentProject.invite` query.
  
  More details on how to handle invites can be found [on the
  wiki](https://github.com/seasketch/next/wiki/User-Ingress#project-invites).
  
  """
  confirmProjectInviteWithVerifiedEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmProjectInviteWithVerifiedEmailInput!
  ): ConfirmProjectInviteWithVerifiedEmailPayload

  """Creates a single `Basemap`."""
  createBasemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBasemapInput!
  ): CreateBasemapPayload

  """Creates a single `CommunityGuideline`."""
  createCommunityGuideline(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCommunityGuidelineInput!
  ): CreateCommunityGuidelinePayload

  """Creates a single `DataLayer`."""
  createDataLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDataLayerInput!
  ): CreateDataLayerPayload

  """Creates a single `DataSource`."""
  createDataSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDataSourceInput!
  ): CreateDataSourcePayload

  """Creates a single `FormConditionalRenderingRule`."""
  createFormConditionalRenderingRule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormConditionalRenderingRuleInput!
  ): CreateFormConditionalRenderingRulePayload

  """Creates a single `FormField`."""
  createFormField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormFieldInput!
  ): CreateFormFieldPayload
  createFormTemplateFromSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormTemplateFromSketchClassInput!
  ): CreateFormTemplateFromSketchClassPayload
  createFormTemplateFromSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormTemplateFromSurveyInput!
  ): CreateFormTemplateFromSurveyPayload

  """Creates a single `Forum`."""
  createForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateForumInput!
  ): CreateForumPayload

  """Creates a single `Group`."""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """Creates a single `InteractivitySetting`."""
  createInteractivitySetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInteractivitySettingInput!
  ): CreateInteractivitySettingPayload

  """Creates a single `OptionalBasemapLayer`."""
  createOptionalBasemapLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOptionalBasemapLayerInput!
  ): CreateOptionalBasemapLayerPayload

  """
  Must have write permission for the specified forum. Create reply to a
  discussion topic. `message` must be JSON, something like the output of DraftJS.
  
  """
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """
  Users with verified emails can create new projects by choosing a unique name
  and url slug. This project will be unlisted with admin_only access and the
  user will be automatically added to the list of admins.
  """
  createProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """Creates a single `ProjectInviteGroup`."""
  createProjectInviteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInviteGroupInput!
  ): CreateProjectInviteGroupPayload

  """
  Create a set of project invites from a set of emails and optional names. Clients
  should implement this feature as a simple textarea where admins can copy and 
  paste a set of names and emails from a spreadsheet.#
  
  Invites can be assigned to a list of groups and optional admin permission. The
  function can either send these invite emails immediately or they can be manually
  sent later.
  
  More details on project invite management [can be found in the wiki](https://github.com/seasketch/next/wiki/User-and-Survey-Invite-Management).
  
  """
  createProjectInvites(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInvitesInput!
  ): CreateProjectInvitesPayload

  """Creates a single `ProjectsSharedBasemap`."""
  createProjectsSharedBasemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectsSharedBasemapInput!
  ): CreateProjectsSharedBasemapPayload

  """Creates a single `Sketch`."""
  createSketch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSketchInput!
  ): CreateSketchPayload

  """Creates a single `SketchClass`."""
  createSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSketchClassInput!
  ): CreateSketchClassPayload

  """Creates a single `SketchFolder`."""
  createSketchFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSketchFolderInput!
  ): CreateSketchFolderPayload

  """Creates a single `Survey`."""
  createSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurveyInput!
  ): CreateSurveyPayload

  """Creates a single `SurveyInvitedGroup`."""
  createSurveyInvitedGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurveyInvitedGroupInput!
  ): CreateSurveyInvitedGroupPayload
  createSurveyInvites(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurveyInvitesInput!
  ): CreateSurveyInvitesPayload

  """Creates a single `SurveyResponse`."""
  createSurveyResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSurveyResponseInput!
  ): CreateSurveyResponsePayload

  """Creates a single `TableOfContentsItem`."""
  createTableOfContentsItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTableOfContentsItemInput!
  ): CreateTableOfContentsItemPayload

  """
  Must have write permission for the specified forum. Create a new discussion
  topic, including the first post. `message` must be JSON, something like the
  output of DraftJS.
  
  """
  createTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTopicInput!
  ): CreateTopicPayload

  """Deletes a single `Basemap` using a unique key."""
  deleteBasemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBasemapInput!
  ): DeleteBasemapPayload

  """Deletes a single `Basemap` using its globally unique id."""
  deleteBasemapByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBasemapByNodeIdInput!
  ): DeleteBasemapPayload

  """Deletes a single `CommunityGuideline` using a unique key."""
  deleteCommunityGuideline(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommunityGuidelineInput!
  ): DeleteCommunityGuidelinePayload

  """Deletes a single `CommunityGuideline` using its globally unique id."""
  deleteCommunityGuidelineByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommunityGuidelineByNodeIdInput!
  ): DeleteCommunityGuidelinePayload

  """Deletes a single `DataLayer` using a unique key."""
  deleteDataLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDataLayerInput!
  ): DeleteDataLayerPayload

  """Deletes a single `DataLayer` using a unique key."""
  deleteDataLayerByInteractivitySettingsId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDataLayerByInteractivitySettingsIdInput!
  ): DeleteDataLayerPayload

  """Deletes a single `DataLayer` using its globally unique id."""
  deleteDataLayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDataLayerByNodeIdInput!
  ): DeleteDataLayerPayload

  """Deletes a single `DataSource` using a unique key."""
  deleteDataSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDataSourceInput!
  ): DeleteDataSourcePayload

  """Deletes a single `DataSource` using its globally unique id."""
  deleteDataSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDataSourceByNodeIdInput!
  ): DeleteDataSourcePayload

  """Deletes a single `Form` using a unique key."""
  deleteForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using its globally unique id."""
  deleteFormByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormByNodeIdInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteFormBySketchClassId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormBySketchClassIdInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteFormBySurveyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormBySurveyIdInput!
  ): DeleteFormPayload

  """Deletes a single `FormConditionalRenderingRule` using a unique key."""
  deleteFormConditionalRenderingRule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormConditionalRenderingRuleInput!
  ): DeleteFormConditionalRenderingRulePayload

  """
  Deletes a single `FormConditionalRenderingRule` using its globally unique id.
  """
  deleteFormConditionalRenderingRuleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormConditionalRenderingRuleByNodeIdInput!
  ): DeleteFormConditionalRenderingRulePayload

  """Deletes a single `FormField` using a unique key."""
  deleteFormField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormFieldInput!
  ): DeleteFormFieldPayload

  """Deletes a single `FormField` using its globally unique id."""
  deleteFormFieldByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormFieldByNodeIdInput!
  ): DeleteFormFieldPayload

  """Deletes a single `Forum` using a unique key."""
  deleteForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteForumInput!
  ): DeleteForumPayload

  """Deletes a single `Forum` using its globally unique id."""
  deleteForumByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteForumByNodeIdInput!
  ): DeleteForumPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using its globally unique id."""
  deleteGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByNodeIdInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroupByProjectIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByProjectIdAndNameInput!
  ): DeleteGroupPayload

  """Deletes a single `OptionalBasemapLayer` using a unique key."""
  deleteOptionalBasemapLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOptionalBasemapLayerInput!
  ): DeleteOptionalBasemapLayerPayload

  """Deletes a single `OptionalBasemapLayer` using its globally unique id."""
  deleteOptionalBasemapLayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOptionalBasemapLayerByNodeIdInput!
  ): DeleteOptionalBasemapLayerPayload

  """
  Can be performed by project admins at any time. Can only be performed by original author within 5 minutes of posting.
  """
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """Deletes a single `Post` using its globally unique id."""
  deletePostByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByNodeIdInput!
  ): DeletePostPayload

  """
  Marks project as deleted. Will remain in database but not accessible to
  anyone. Function can only be accessed by project administrators.
  """
  deleteProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInput!
  ): DeleteProjectPayload

  """Deletes a single `ProjectInvite` using a unique key."""
  deleteProjectInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInviteInput!
  ): DeleteProjectInvitePayload

  """Deletes a single `ProjectInvite` using a unique key."""
  deleteProjectInviteByEmailAndProjectId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInviteByEmailAndProjectIdInput!
  ): DeleteProjectInvitePayload

  """Deletes a single `ProjectInvite` using its globally unique id."""
  deleteProjectInviteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInviteByNodeIdInput!
  ): DeleteProjectInvitePayload

  """Deletes a single `ProjectInviteGroup` using a unique key."""
  deleteProjectInviteGroupByInviteIdAndGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInviteGroupByInviteIdAndGroupIdInput!
  ): DeleteProjectInviteGroupPayload

  """Deletes a single `ProjectsSharedBasemap` using a unique key."""
  deleteProjectsSharedBasemapByBasemapIdAndProjectId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectsSharedBasemapByBasemapIdAndProjectIdInput!
  ): DeleteProjectsSharedBasemapPayload

  """Deletes a single `Sketch` using a unique key."""
  deleteSketch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchInput!
  ): DeleteSketchPayload

  """Deletes a single `Sketch` using its globally unique id."""
  deleteSketchByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchByNodeIdInput!
  ): DeleteSketchPayload

  """Deletes a single `SketchClass` using a unique key."""
  deleteSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchClassInput!
  ): DeleteSketchClassPayload

  """Deletes a single `SketchClass` using its globally unique id."""
  deleteSketchClassByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchClassByNodeIdInput!
  ): DeleteSketchClassPayload

  """Deletes a single `SketchFolder` using a unique key."""
  deleteSketchFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchFolderInput!
  ): DeleteSketchFolderPayload

  """Deletes a single `SketchFolder` using its globally unique id."""
  deleteSketchFolderByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSketchFolderByNodeIdInput!
  ): DeleteSketchFolderPayload

  """Deletes a single `Survey` using a unique key."""
  deleteSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInput!
  ): DeleteSurveyPayload

  """Deletes a single `Survey` using its globally unique id."""
  deleteSurveyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyByNodeIdInput!
  ): DeleteSurveyPayload

  """Deletes a single `SurveyInvite` using a unique key."""
  deleteSurveyInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInviteInput!
  ): DeleteSurveyInvitePayload

  """Deletes a single `SurveyInvite` using a unique key."""
  deleteSurveyInviteByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInviteByEmailInput!
  ): DeleteSurveyInvitePayload

  """Deletes a single `SurveyInvite` using a unique key."""
  deleteSurveyInviteByEmailAndSurveyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInviteByEmailAndSurveyIdInput!
  ): DeleteSurveyInvitePayload

  """Deletes a single `SurveyInvite` using its globally unique id."""
  deleteSurveyInviteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInviteByNodeIdInput!
  ): DeleteSurveyInvitePayload

  """Deletes a single `SurveyInvitedGroup` using a unique key."""
  deleteSurveyInvitedGroupBySurveyIdAndGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyInvitedGroupBySurveyIdAndGroupIdInput!
  ): DeleteSurveyInvitedGroupPayload

  """Deletes a single `SurveyResponse` using a unique key."""
  deleteSurveyResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyResponseInput!
  ): DeleteSurveyResponsePayload

  """Deletes a single `SurveyResponse` using its globally unique id."""
  deleteSurveyResponseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSurveyResponseByNodeIdInput!
  ): DeleteSurveyResponsePayload

  """
  Deletes an item from the draft table of contents, as well as all child items
  if it is a folder. This action will also delete all related layers and sources
  (if no other layers reference the source).
  """
  deleteTableOfContentsBranch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTableOfContentsBranchInput!
  ): DeleteTableOfContentsBranchPayload

  """
  Can be performed by project admins at any time. Can only be performed by original author within 5 minutes of posting.
  """
  deleteTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicInput!
  ): DeleteTopicPayload

  """Deletes a single `Topic` using its globally unique id."""
  deleteTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTopicByNodeIdInput!
  ): DeleteTopicPayload

  """Ban a user from posting in the discussion forum"""
  disableForumPosting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DisableForumPostingInput!
  ): DisableForumPostingPayload

  """
  Re-enable discussion forum posting for a user that was previously banned.
  """
  enableForumPosting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: EnableForumPostingInput!
  ): EnableForumPostingPayload

  """
  Use to create new sprites. If an existing sprite in the database for this
  project has a matching md5 hash no new Sprite will be created.
  """
  getOrCreateSprite(
    height: Int!
    pixelRatio: Int!
    projectId: Int!

    """Provide the lowest-dpi version of the sprite"""
    smallestImage: Upload!
    type: String
    width: Int!
  ): Sprite

  """
  Give a user admin access to a project. User must have already joined the project and shared their user profile.
  """
  grantAdminAccess(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GrantAdminAccessInput!
  ): GrantAdminAccessPayload

  """
  When creating a new SketchClass, admins can either choose from a set of 
  templates or start with a blank form. This mutation will initialize with a blank
  form with no fields configured.
  
  """
  initializeBlankSketchClassForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitializeBlankSketchClassFormInput!
  ): InitializeBlankSketchClassFormPayload

  """
  When creating a new Survey, admins can either choose from a set of 
  templates or start with a blank form. This mutation will initialize with a blank
  form with no fields configured.
  
  """
  initializeBlankSurveyForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitializeBlankSurveyFormInput!
  ): InitializeBlankSurveyFormPayload

  """
  Admins can choose to start a new SketchClass with a form derived from the list
  of Form templates.
  
  """
  initializeSketchClassFormFromTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitializeSketchClassFormFromTemplateInput!
  ): InitializeSketchClassFormFromTemplatePayload

  """
  Admins can choose to start a new Survey with a form derived from the list
  of Form templates.
  
  """
  initializeSurveyFormFromTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InitializeSurveyFormFromTemplateInput!
  ): InitializeSurveyFormFromTemplatePayload

  """
  Adds current user to the list of participants for a project, sharing their 
  profile with administrators in user listings. Their profile will also be shared 
  in public or group discussion forum posts.
  
  Clients will need to determine when/how to show prompts to join a project based
  on activity that minimizes annoyance when browsing among projects but also makes
  sure users are visible to admins so that they may gain user group permissions.
  
  """
  joinProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: JoinProjectInput!
  ): JoinProjectPayload

  """
  Turns off profile sharing in this project. User privacy choices should be 
  respected, and profile information should disappear from the admin users lists,
  forum posts, and any other shared content. In the forum a balance will need to 
  be made to hide their posts entirely since anonymous content could be malicious, 
  and maintain a historical record of discussions.
  
  """
  leaveProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LeaveProjectInput!
  ): LeaveProjectPayload

  """
  Project administrators cannot edit survey responses and survey respondants 
  cannot edit responses after they have been submitted. Admins can use this 
  mutation to put a response into draft mode so that they can be updated and 
  resubmitted by the respondant.
  
  """
  makeResponseDraft(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeResponseDraftInput!
  ): MakeResponseDraftPayload

  """
  Mark the topic as read by the current session user. Used to avoid sending email
  notifications to users who have already read a topic. Call when loading a topic, 
  and whenever new posts are shown.
  
  """
  markTopicAsRead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MarkTopicAsReadInput!
  ): MarkTopicAsReadPayload

  """
  Copies all table of contents items, related layers, sources, and access
  control lists to create a new table of contents that will be displayed to project users.
  """
  publishTableOfContents(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PublishTableOfContentsInput!
  ): PublishTableOfContentsPayload

  """
  Remove a group from a given access control list. Must be an administrator.
  """
  removeGroupFromAcl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveGroupFromAclInput!
  ): RemoveGroupFromAclPayload

  """
  Remove the given user from a group. Must be an administrator of the project.
  """
  removeUserFromGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveUserFromGroupInput!
  ): RemoveUserFromGroupPayload

  """
  Remove a SketchClass from the list of valid children for a Collection.
  
  """
  removeValidChildSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveValidChildSketchClassInput!
  ): RemoveValidChildSketchClassPayload

  """
  Remove participant admin privileges.
  
  """
  revokeAdminAccess(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RevokeAdminAccessInput!
  ): RevokeAdminAccessPayload

  """
  Send all UNSENT invites in the current project.
  
  """
  sendAllProjectInvites(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendAllProjectInvitesInput!
  ): SendAllProjectInvitesPayload

  """
  Send a list of project invites identified by their id.
  
  """
  sendProjectInvites(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendProjectInvitesInput!
  ): SendProjectInvitesPayload

  """
  Send a reminder email for a survey invite that has already been sent.
  Returns the same inviteId if successful.
  """
  sendSurveyInviteReminder(
    """ID of survey invite"""
    inviteId: Int!
  ): Int

  """
  Sets the positions of all fields in a form at once. Any missing field ids from
  the input will be positioned at the end of the form.
  
  Use this instead of trying to manage the position of form fields individually.
  
  """
  setFormFieldOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetFormFieldOrderInput!
  ): SetFormFieldOrderPayload

  """
  Set the order in which discussion forums will be displayed. Provide a list of
  forum IDs in the correct order. Missing ids will be added to the end of the list.
  
  """
  setForumOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetForumOrderInput!
  ): SetForumOrderPayload

  """
  Admins can use this function to hide the contents of a message. Message will
  still appear in the client with the missing content, and should link to the
  Community Guidelines for why the post may have been hidden. If admins want all
  evidence of the post removed they must delete it.
  
  """
  setPostHiddenByModerator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetPostHiddenByModeratorInput!
  ): SetPostHiddenByModeratorPayload

  """
  Lock a topic so that it can no longer be responded to. Past discussion will
  still be visible. This mutation is only available to project admins.
  """
  setTopicLocked(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetTopicLockedInput!
  ): SetTopicLockedPayload

  """
  Admins can use this mutation to place topics at the top of the forum listing.
  
  """
  setTopicSticky(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetTopicStickyInput!
  ): SetTopicStickyPayload

  """Updates a single `Acl` using a unique key and a patch."""
  updateAcl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclInput!
  ): UpdateAclPayload

  """Updates a single `Acl` using a unique key and a patch."""
  updateAclByBasemapId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclByBasemapIdInput!
  ): UpdateAclPayload

  """Updates a single `Acl` using its globally unique id and a patch."""
  updateAclByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclByNodeIdInput!
  ): UpdateAclPayload

  """Updates a single `Acl` using a unique key and a patch."""
  updateAclBySketchClassId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclBySketchClassIdInput!
  ): UpdateAclPayload

  """Updates a single `Acl` using a unique key and a patch."""
  updateAclByTableOfContentsItemId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAclByTableOfContentsItemIdInput!
  ): UpdateAclPayload

  """Updates a single `Basemap` using a unique key and a patch."""
  updateBasemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasemapInput!
  ): UpdateBasemapPayload

  """Updates a single `Basemap` using its globally unique id and a patch."""
  updateBasemapByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasemapByNodeIdInput!
  ): UpdateBasemapPayload

  """Updates a single `CommunityGuideline` using a unique key and a patch."""
  updateCommunityGuideline(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommunityGuidelineInput!
  ): UpdateCommunityGuidelinePayload

  """
  Updates a single `CommunityGuideline` using its globally unique id and a patch.
  """
  updateCommunityGuidelineByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommunityGuidelineByNodeIdInput!
  ): UpdateCommunityGuidelinePayload

  """Updates a single `DataLayer` using a unique key and a patch."""
  updateDataLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataLayerInput!
  ): UpdateDataLayerPayload

  """Updates a single `DataLayer` using a unique key and a patch."""
  updateDataLayerByInteractivitySettingsId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataLayerByInteractivitySettingsIdInput!
  ): UpdateDataLayerPayload

  """Updates a single `DataLayer` using its globally unique id and a patch."""
  updateDataLayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataLayerByNodeIdInput!
  ): UpdateDataLayerPayload

  """Updates a single `DataSource` using a unique key and a patch."""
  updateDataSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataSourceInput!
  ): UpdateDataSourcePayload

  """
  Updates a single `DataSource` using its globally unique id and a patch.
  """
  updateDataSourceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDataSourceByNodeIdInput!
  ): UpdateDataSourcePayload

  """
  Updates a single `EmailNotificationPreference` using a unique key and a patch.
  """
  updateEmailNotificationPreferenceByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmailNotificationPreferenceByUserIdInput!
  ): UpdateEmailNotificationPreferencePayload

  """
  Updates a single `FormConditionalRenderingRule` using a unique key and a patch.
  """
  updateFormConditionalRenderingRule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormConditionalRenderingRuleInput!
  ): UpdateFormConditionalRenderingRulePayload

  """
  Updates a single `FormConditionalRenderingRule` using its globally unique id and a patch.
  """
  updateFormConditionalRenderingRuleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormConditionalRenderingRuleByNodeIdInput!
  ): UpdateFormConditionalRenderingRulePayload

  """Updates a single `FormField` using a unique key and a patch."""
  updateFormField(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormFieldInput!
  ): UpdateFormFieldPayload

  """Updates a single `FormField` using its globally unique id and a patch."""
  updateFormFieldByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormFieldByNodeIdInput!
  ): UpdateFormFieldPayload

  """Updates a single `Forum` using a unique key and a patch."""
  updateForum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateForumInput!
  ): UpdateForumPayload

  """Updates a single `Forum` using its globally unique id and a patch."""
  updateForumByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateForumByNodeIdInput!
  ): UpdateForumPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByNodeIdInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroupByProjectIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByProjectIdAndNameInput!
  ): UpdateGroupPayload

  """
  Updates a single `InteractivitySetting` using a unique key and a patch.
  """
  updateInteractivitySetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInteractivitySettingInput!
  ): UpdateInteractivitySettingPayload

  """
  Updates a single `InteractivitySetting` using its globally unique id and a patch.
  """
  updateInteractivitySettingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInteractivitySettingByNodeIdInput!
  ): UpdateInteractivitySettingPayload

  """
  Updates a single `OptionalBasemapLayer` using a unique key and a patch.
  """
  updateOptionalBasemapLayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOptionalBasemapLayerInput!
  ): UpdateOptionalBasemapLayerPayload

  """
  Updates a single `OptionalBasemapLayer` using its globally unique id and a patch.
  """
  updateOptionalBasemapLayerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOptionalBasemapLayerByNodeIdInput!
  ): UpdateOptionalBasemapLayerPayload

  """
  Updates the contents of the post. Can only be used by the author for 5 minutes after posting.
  
  """
  updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """Updates a single `Profile` using a unique key and a patch."""
  updateProfileByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileByUserIdInput!
  ): UpdateProfilePayload

  """Updates a single `Project` using a unique key and a patch."""
  updateProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInput!
  ): UpdateProjectPayload

  """Updates a single `Project` using its globally unique id and a patch."""
  updateProjectByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectByNodeIdInput!
  ): UpdateProjectPayload

  """Updates a single `Project` using a unique key and a patch."""
  updateProjectBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectBySlugInput!
  ): UpdateProjectPayload

  """Updates a single `ProjectInvite` using a unique key and a patch."""
  updateProjectInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInviteInput!
  ): UpdateProjectInvitePayload

  """Updates a single `ProjectInvite` using a unique key and a patch."""
  updateProjectInviteByEmailAndProjectId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInviteByEmailAndProjectIdInput!
  ): UpdateProjectInvitePayload

  """
  Updates a single `ProjectInvite` using its globally unique id and a patch.
  """
  updateProjectInviteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInviteByNodeIdInput!
  ): UpdateProjectInvitePayload

  """Updates a single `ProjectInviteGroup` using a unique key and a patch."""
  updateProjectInviteGroupByInviteIdAndGroupId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInviteGroupByInviteIdAndGroupIdInput!
  ): UpdateProjectInviteGroupPayload

  """
  Updates a single `ProjectsSharedBasemap` using a unique key and a patch.
  """
  updateProjectsSharedBasemapByBasemapIdAndProjectId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectsSharedBasemapByBasemapIdAndProjectIdInput!
  ): UpdateProjectsSharedBasemapPayload

  """Updates a single `Sketch` using a unique key and a patch."""
  updateSketch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchInput!
  ): UpdateSketchPayload

  """Updates a single `Sketch` using its globally unique id and a patch."""
  updateSketchByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchByNodeIdInput!
  ): UpdateSketchPayload

  """Updates a single `SketchClass` using a unique key and a patch."""
  updateSketchClass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchClassInput!
  ): UpdateSketchClassPayload

  """
  Updates a single `SketchClass` using its globally unique id and a patch.
  """
  updateSketchClassByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchClassByNodeIdInput!
  ): UpdateSketchClassPayload

  """Updates a single `SketchFolder` using a unique key and a patch."""
  updateSketchFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchFolderInput!
  ): UpdateSketchFolderPayload

  """
  Updates a single `SketchFolder` using its globally unique id and a patch.
  """
  updateSketchFolderByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSketchFolderByNodeIdInput!
  ): UpdateSketchFolderPayload

  """Updates a single `Survey` using a unique key and a patch."""
  updateSurvey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInput!
  ): UpdateSurveyPayload

  """Updates a single `Survey` using its globally unique id and a patch."""
  updateSurveyByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyByNodeIdInput!
  ): UpdateSurveyPayload

  """Updates a single `SurveyInvite` using a unique key and a patch."""
  updateSurveyInvite(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInviteInput!
  ): UpdateSurveyInvitePayload

  """Updates a single `SurveyInvite` using a unique key and a patch."""
  updateSurveyInviteByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInviteByEmailInput!
  ): UpdateSurveyInvitePayload

  """Updates a single `SurveyInvite` using a unique key and a patch."""
  updateSurveyInviteByEmailAndSurveyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInviteByEmailAndSurveyIdInput!
  ): UpdateSurveyInvitePayload

  """
  Updates a single `SurveyInvite` using its globally unique id and a patch.
  """
  updateSurveyInviteByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInviteByNodeIdInput!
  ): UpdateSurveyInvitePayload

  """
  Updates the list of groups that should have access to the given survey. Users
  in any added groups will get an invite, and the system will create an invite for
  any users that are added to the group. When removing a group, the system will
  delete invites for any user that is no longer in an invited group. *Clients
  should warn admins of this behavior when removing groups for an active survey*.
  
  The list of invited groups can be accessed via `Survey.invitedGroups`.
  
  """
  updateSurveyInvitedGroups(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyInvitedGroupsInput!
  ): UpdateSurveyInvitedGroupsPayload

  """Updates a single `SurveyResponse` using a unique key and a patch."""
  updateSurveyResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyResponseInput!
  ): UpdateSurveyResponsePayload

  """
  Updates a single `SurveyResponse` using its globally unique id and a patch.
  """
  updateSurveyResponseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSurveyResponseByNodeIdInput!
  ): UpdateSurveyResponsePayload

  """Updates a single `TableOfContentsItem` using a unique key and a patch."""
  updateTableOfContentsItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTableOfContentsItemInput!
  ): UpdateTableOfContentsItemPayload

  """Updates a single `TableOfContentsItem` using a unique key and a patch."""
  updateTableOfContentsItemByDataLayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTableOfContentsItemByDataLayerIdInput!
  ): UpdateTableOfContentsItemPayload

  """
  Updates a single `TableOfContentsItem` using its globally unique id and a patch.
  """
  updateTableOfContentsItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTableOfContentsItemByNodeIdInput!
  ): UpdateTableOfContentsItemPayload
  updateTableOfContentsItemChildren(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTableOfContentsItemChildrenInput!
  ): UpdateTableOfContentsItemChildrenPayload

  """Updates a single `Topic` using a unique key and a patch."""
  updateTopic(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicInput!
  ): UpdateTopicPayload

  """Updates a single `Topic` using its globally unique id and a patch."""
  updateTopicByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTopicByNodeIdInput!
  ): UpdateTopicPayload
  updateZIndexes(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateZIndexesInput!
  ): UpdateZIndexesPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
Available only for MapBox GL Style-based basemaps. Specifies optional components of the basemap that can be shown or hidden.

"""
type OptionalBasemapLayer implements Node {
  """
  Reads a single `Basemap` that is related to this `OptionalBasemapLayer`.
  """
  basemap: Basemap
  basemapId: Int!
  defaultVisibility: Boolean!
  description: String

  """
  Specify RADIO or SELECT if this option should be presented as a group of
  options. Useful for mutually exclusive views like different years for the same
  dataset, or a heatmap display of density for multiple species where a single
  species must be chosen from a list. If left null, the option will be treated as standalone.
  """
  groupType: OptionalBasemapLayersGroupType!
  id: Int!

  """IDs for layers in the gl style that will be toggled by this option."""
  layers: [String]!

  """JSON representation of a ProseMirror document with layer metadata."""
  metadata: JSON

  """Label that will be given in the UI"""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  options: JSON
}

"""
A condition to be used against `OptionalBasemapLayer` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OptionalBasemapLayerCondition {
  """Checks for equality with the object’s `basemapId` field."""
  basemapId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""An input for mutations affecting `OptionalBasemapLayer`"""
input OptionalBasemapLayerInput {
  basemapId: Int!
  defaultVisibility: Boolean
  description: String

  """
  Specify RADIO or SELECT if this option should be presented as a group of
  options. Useful for mutually exclusive views like different years for the same
  dataset, or a heatmap display of density for multiple species where a single
  species must be chosen from a list. If left null, the option will be treated as standalone.
  """
  groupType: OptionalBasemapLayersGroupType
  id: Int

  """IDs for layers in the gl style that will be toggled by this option."""
  layers: [String]

  """JSON representation of a ProseMirror document with layer metadata."""
  metadata: JSON

  """Label that will be given in the UI"""
  name: String!
  options: JSON
}

"""
Represents an update to a `OptionalBasemapLayer`. Fields that are set will be updated.
"""
input OptionalBasemapLayerPatch {
  basemapId: Int
  defaultVisibility: Boolean
  description: String

  """
  Specify RADIO or SELECT if this option should be presented as a group of
  options. Useful for mutually exclusive views like different years for the same
  dataset, or a heatmap display of density for multiple species where a single
  species must be chosen from a list. If left null, the option will be treated as standalone.
  """
  groupType: OptionalBasemapLayersGroupType
  id: Int

  """IDs for layers in the gl style that will be toggled by this option."""
  layers: [String]

  """JSON representation of a ProseMirror document with layer metadata."""
  metadata: JSON

  """Label that will be given in the UI"""
  name: String
  options: JSON
}

enum OptionalBasemapLayersGroupType {
  NONE
  RADIO
  SELECT
}

"""Methods to use when ordering `OptionalBasemapLayer`."""
enum OptionalBasemapLayersOrderBy {
  BASEMAP_ID_ASC
  BASEMAP_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

enum ParticipantSortBy {
  EMAIL
  NAME
}

enum ParticipationStatus {
  """
  User has not joined or participated in the project before. This status would
  only be accessible to a logged in user themselves, never in the admin listing of users.
  """
  NONE

  """
  While the user has joined the project, they haven't shared (or later
  un-shared) their profile. Admins will not be able to see any info about them
  so they cannot be added to groups. Users cannot use any of the discussion or
  sharing features without publishing their profile.
  """
  PARTICIPANT_HIDDEN_PROFILE

  """
  With a shared profile, this user can now take actions like participating in discussion forums.
  """
  PARTICIPANT_SHARED_PROFILE

  """
  For invite-only projects, this user has requested access to the project and needs approval from an admin.
  """
  PENDING_APPROVAL
}

type Post implements Node {
  authorId: Int!

  """
  User Profile of the author. If a user has not shared their profile the post message will be hidden.
  
  """
  authorProfile: Profile
  createdAt: Datetime!

  """
  If set, the post has been hidden by a project admin. Contents of the post will
  not be available to the client. Admins should update this field using
  `setPostHiddenByModerator()`.
  """
  hiddenByModerator: Boolean!
  id: Int!

  """
  Message contents of the post as JSON for use with DraftJS. 
  
  Message may be null if user is not currently sharing their profile, in which 
  case the client should explain such. 
  
  Message could also be null if `hiddenByModerator` is set. In that case the 
  client should explain that the post violated the `CommunityGuidelines`, if set.
  
  """
  message: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic
  topicId: Int!
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `topicId` field."""
  topicId: Int
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """A list of `Post` objects."""
  nodes: [Post!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post!
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TOPIC_ID_ASC
  TOPIC_ID_DESC
}

"""
Personal information that users have contributed. This information is only 
accessible directly to admins on projects where the user has chosen to share the
information (via the `joinProject()` mutation).

Regular SeaSketch users can access user profiles thru accessor fields on shared
content like forum posts if they have been shared, but regular users have no 
means of listing out all profiles in bulk.

"""
type Profile {
  affiliations: String
  bio: String
  email: Email
  fullname: String
  nickname: String
  picture: String

  """Reads a single `User` that is related to this `Profile`."""
  user: User
  userId: Int!
}

"""
Represents an update to a `Profile`. Fields that are set will be updated.
"""
input ProfilePatch {
  affiliations: String
  bio: String
  email: Email
  fullname: String
  nickname: String
  picture: String
  userId: Int
}

"""A `Profile` edge in the connection."""
type ProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Profile` at the end of the edge."""
  node: Profile!
}

"""Methods to use when ordering `Profile`."""
enum ProfilesOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
}

"""
SeaSketch Project type. This root type contains most of the fields and queries
needed to drive the application.

"""
type Project implements Node {
  """
  Admins can control whether a project is public, invite-only, or admins-only.
  """
  accessControl: ProjectAccessControlSetting!
  adminCount: Int

  """Listing of all users who have admin access."""
  admins(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [User!]

  """Reads and enables pagination through a set of `Basemap`."""
  basemaps(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Basemap!]

  """Reads and enables pagination through a set of `Basemap`."""
  basemapsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasemapCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsConnection!

  """Reads a single `CommunityGuideline` that is related to this `Project`."""
  communityGuidelines: CommunityGuideline
  dataHostingQuota: Int
  dataHostingQuotaUsed: Int

  """
  Retrieve DataLayers for a given set of TableOfContentsItem IDs. Should be used
  in conjuction with `dataSourcesForItems` to progressively load layer information
  when users request layers be displayed on the map.
  
  """
  dataLayersForItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    tableOfContentsItemIds: [Int]
  ): [DataLayer!]

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket
  dataSourcesBucketId: String!

  """
  Retrieve DataSources for a given set of TableOfContentsItem IDs. Should be used
  in conjuction with `dataLayersForItems` to progressively load layer information
  when users request layers be displayed on the map.
  
  """
  dataSourcesForItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    tableOfContentsItemIds: [Int]
  ): [DataSource!]

  """Should be a short length in order to fit in the project header."""
  description: String

  """
  Draft layer lists, accessible only to admins. Make edits to the layer list and
  then use the `publishTableOfContents` mutation when it is ready for end-users.
  
  """
  draftTableOfContentsItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [TableOfContentsItem!]

  """
  
  List of all discussion forums the current user has access to.
      
  """
  forums(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ForumCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!]
  ): [Forum!]!

  """
  
  Listing of current user groups.
  
  Group membership can be updated using the `addUserToGroup`/`removeUserFromGroup` mutations
      
  """
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]!
  id: Int!

  """
  Returns the project invitation for the current user session, if any. Will not
  appear until the invite has been sent. The system determines the relevant
  invite using the `canonical_email` claim in the user access token.
  
  If the invite status is unconfirmed the client should accept it using the
  `confirmProjectInviteWithVerifiedEmail()` mutation. Details on how to work
  with user ingress and project invites [can be found on the
  wiki](https://github.com/seasketch/next/wiki/User-Ingress).
  
  """
  invite: ProjectInvite

  """
  Breakdown of number of invites per status. Used to display counts in overview
  listing of users, groups, and invites in the user administration dashboard.
  
  """
  inviteCounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [InviteStat!]

  """List project invites by status"""
  invitesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    orderBy: InviteOrderBy
    statuses: [InviteStatus]
  ): ProjectInvitesConnection!

  """
  Featured projects may be given prominent placement on the homepage. This property can only be modified by superusers.
  """
  isFeatured: Boolean!

  """
  Project admins can decide whether their project will be displayed on the
  public project listing via Query.projectsConnection.
  """
  isListed: Boolean!

  """
  If a logoUrl is provided, it will link to this url in a new window if provided.
  """
  logoLink: String

  """
  URL referencing an image that will be used to represent the project. Will be
  displayed at 48x48 pixels and must be a public url.
  """
  logoUrl: String

  """
  List of all folders created by this user.
  
  """
  myFolders(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SketchFolder!]

  """
  A list of all sketches for this project and the current user session
  
  """
  mySketches(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Sketch!]
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Count of all users who have opted into participating in the project, sharing their profile with project administrators.
  """
  participantCount: Int

  """
  All users who have opted into participating in the project, sharing 
  their profile with project administrators.
  
  If the project is invite-only, users who have not been approved will not appear
  in this list. Those users can be accessed via `unapprovedParticipants()`
  
  """
  participants(
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    orderBy: ParticipantSortBy
  ): [User!]
  region: GeometryPolygon!

  """
  Whether the current user has any discussion forum posts in this project. Use
  this to determine whether `project.communityGuidelines` should be shown to the
  user before their first post.
  """
  sessionHasPosts: Boolean

  """
  Indicates whether current session should have special access or group
  privileges. These grants will not be active if the user does not have a
  verified email address.
  
  Clients should check for situations where a user access token has a false
  `email_verified` cliam paired with privileged access. If that is the case they
  should prompt users to confirm their email address.
  
  """
  sessionHasPrivilegedAccess: Boolean

  """
  Returns true if the user has admin privileges on this project. Will return
  true even if the session email is not verified, but permissions will not work until it is.
  """
  sessionIsAdmin: Boolean

  """
  Invites (and related tokens) for surveys which this user has not yet responded
  to. Details on how to handle survey invites [can be found on the
  wiki](https://github.com/seasketch/next/wiki/User-Ingress#survey-invites).
  
  """
  sessionOutstandingSurveyInvites(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SurveyTokenInfo!]

  """Participation status for the currently logged-in session"""
  sessionParticipationStatus: ParticipationStatus

  """
  
  List of all the SketchClasses that can be used in digitizing spatial data. 
  Accessible to all users, though access control settings may limit which users
  can access some SketchClasses.
      
  """
  sketchClasses(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SketchClassCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!]
  ): [SketchClass!]!

  """
  Short identifier for the project used in the url. This property cannot be changed after project creation.
  """
  slug: String!

  """Reads and enables pagination through a set of `Sprite`."""
  sprites(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpriteCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Sprite`."""
    orderBy: [SpritesOrderBy!]
  ): [Sprite!]!

  """Listing of all Surveys accessible to the current user."""
  surveys(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Survey`."""
    orderBy: [SurveysOrderBy!]
  ): [Survey!]!

  """
  Public layer list. Cannot be edited directly.
  
  """
  tableOfContentsItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [TableOfContentsItem!]

  """
  Number of users who have outstanding access requests. Only relevant for invite-only projects.
  
  """
  unapprovedParticipantCount: Int

  """
  For invite-only projects. List all pending participation requests.
  
  Users can be approved using the `approveParticipant()` mutation.
  
  """
  unapprovedParticipants(
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    orderBy: ParticipantSortBy
  ): [User!]

  """Project url will resolve to `https://seasketch.org/{slug}/`"""
  url: String

  """
  List of all banned users. Listing only accessible to admins.
  
  """
  usersBannedFromForums(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [User!]
}

enum ProjectAccessControlSetting {
  """Only project administrators will be able to access the project."""
  ADMINS_ONLY

  """
  
  Only users who have been invited to join the project can participate. Admins
  can send email invitations with a special link to signup.
  
  Other users may request access, in which case admins can approve those access requests if appropriate.
      
  """
  INVITE_ONLY

  """
  Anyone can join and use a public project, though access to particular
  datasets, sketch classes, and forums may be restricted via access control lists.
  """
  PUBLIC
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """Checks for equality with the object’s `accessControl` field."""
  accessControl: ProjectAccessControlSetting

  """Checks for equality with the object’s `dataSourcesBucketId` field."""
  dataSourcesBucketId: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isFeatured` field."""
  isFeatured: Boolean

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""
Admins can invite users to their project, adding them to user groups and 
distributing admin privileges as needed. Invitations can be immediately sent via
email or they can be sent out later in batches. 

Use the `createProjectInvites()`
mutation to create one or more invitations and then use graphile generated 
mutations to update and delete them.

Details on [handling user ingress with invitation
tokens](https://github.com/seasketch/next/wiki/User-Ingress#project-invites) and [the mailer subsystem](https://github.com/seasketch/next/wiki/User-and-Survey-Invite-Management)
can be found on the wiki.

"""
type ProjectInvite implements Node {
  createdAt: Datetime!

  """Specified by admin when invite was created."""
  email: Email!

  """Specified by admin when invite was created."""
  fullname: String

  """
  
  Groups to be assigned to the user once the invite is confirmed. Existing
  invite group membership can be updated using the crud operations on
  ProjectInviteGroup types.
      
  """
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Group!]
  id: Int!

  """Listing of all emails related to this invite."""
  inviteEmails(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteEmailCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `InviteEmail`."""
    orderBy: [InviteEmailsOrderBy!]
  ): [InviteEmail!]!

  """
  User will be made an admin of the project if true. They will not be given special access until their email is verified.
  """
  makeAdmin: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  projectId: Int!

  """
  Status derived from the state of invite emails as well as token expiration
  """
  status: InviteStatus

  """Is set upon invite acceptance."""
  userId: Int

  """Project invite has already been accepted."""
  wasUsed: Boolean!
}

type ProjectInviteGroup {
  groupId: Int!
  inviteId: Int!
}

"""
A condition to be used against `ProjectInviteGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectInviteGroupCondition {
  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `inviteId` field."""
  inviteId: Int
}

"""An input for mutations affecting `ProjectInviteGroup`"""
input ProjectInviteGroupInput {
  groupId: Int!
  inviteId: Int!
}

"""
Represents an update to a `ProjectInviteGroup`. Fields that are set will be updated.
"""
input ProjectInviteGroupPatch {
  groupId: Int
  inviteId: Int
}

"""A connection to a list of `ProjectInviteGroup` values."""
type ProjectInviteGroupsConnection {
  """
  A list of edges which contains the `ProjectInviteGroup` and cursor to aid in pagination.
  """
  edges: [ProjectInviteGroupsEdge!]!

  """A list of `ProjectInviteGroup` objects."""
  nodes: [ProjectInviteGroup!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectInviteGroup` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProjectInviteGroup` edge in the connection."""
type ProjectInviteGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectInviteGroup` at the end of the edge."""
  node: ProjectInviteGroup!
}

"""Methods to use when ordering `ProjectInviteGroup`."""
enum ProjectInviteGroupsOrderBy {
  GROUP_ID_ASC
  GROUP_ID_DESC
  INVITE_ID_ASC
  INVITE_ID_DESC
  NATURAL
}

"""An input for mutations affecting `ProjectInviteOption`"""
input ProjectInviteOptionInput {
  email: Email
  fullname: String
}

"""
Represents an update to a `ProjectInvite`. Fields that are set will be updated.
"""
input ProjectInvitePatch {
  """Specified by admin when invite was created."""
  email: Email

  """Specified by admin when invite was created."""
  fullname: String

  """
  User will be made an admin of the project if true. They will not be given special access until their email is verified.
  """
  makeAdmin: Boolean
}

"""A connection to a list of `ProjectInvite` values."""
type ProjectInvitesConnection {
  """
  A list of edges which contains the `ProjectInvite` and cursor to aid in pagination.
  """
  edges: [ProjectInvitesEdge!]!

  """A list of `ProjectInvite` objects."""
  nodes: [ProjectInvite!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectInvite` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectInvite` edge in the connection."""
type ProjectInvitesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectInvite` at the end of the edge."""
  node: ProjectInvite!
}

type ProjectInviteTokenClaims {
  admin: Boolean!
  email: String!
  fullname: String
  inviteId: Int!
  projectId: Int!
  wasUsed: Boolean!
}

type ProjectInviteTokenVerificationResults {
  claims: ProjectInviteTokenClaims
  error: String
}

"""
Represents an update to a `Project`. Fields that are set will be updated.
"""
input ProjectPatch {
  """
  Admins can control whether a project is public, invite-only, or admins-only.
  """
  accessControl: ProjectAccessControlSetting
  dataSourcesBucketId: String

  """Should be a short length in order to fit in the project header."""
  description: String

  """
  Featured projects may be given prominent placement on the homepage. This property can only be modified by superusers.
  """
  isFeatured: Boolean

  """
  Project admins can decide whether their project will be displayed on the
  public project listing via Query.projectsConnection.
  """
  isListed: Boolean

  """
  If a logoUrl is provided, it will link to this url in a new window if provided.
  """
  logoLink: String

  """
  URL referencing an image that will be used to represent the project. Will be
  displayed at 48x48 pixels and must be a public url.
  """
  logoUrl: Upload
  name: String
  region: GeoJSON
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """A list of `Project` objects."""
  nodes: [Project!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project!
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  ACCESS_CONTROL_ASC
  ACCESS_CONTROL_DESC
  DATA_SOURCES_BUCKET_ID_ASC
  DATA_SOURCES_BUCKET_ID_DESC
  ID_ASC
  ID_DESC
  IS_FEATURED_ASC
  IS_FEATURED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

type ProjectsSharedBasemap {
  """
  Reads a single `Basemap` that is related to this `ProjectsSharedBasemap`.
  """
  basemap: Basemap
  basemapId: Int!
  projectId: Int!
}

"""
A condition to be used against `ProjectsSharedBasemap` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProjectsSharedBasemapCondition {
  """Checks for equality with the object’s `basemapId` field."""
  basemapId: Int
}

"""An input for mutations affecting `ProjectsSharedBasemap`"""
input ProjectsSharedBasemapInput {
  basemapId: Int!
  projectId: Int!
}

"""
Represents an update to a `ProjectsSharedBasemap`. Fields that are set will be updated.
"""
input ProjectsSharedBasemapPatch {
  basemapId: Int
  projectId: Int
}

"""A connection to a list of `ProjectsSharedBasemap` values."""
type ProjectsSharedBasemapsConnection {
  """
  A list of edges which contains the `ProjectsSharedBasemap` and cursor to aid in pagination.
  """
  edges: [ProjectsSharedBasemapsEdge!]!

  """A list of `ProjectsSharedBasemap` objects."""
  nodes: [ProjectsSharedBasemap!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectsSharedBasemap` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProjectsSharedBasemap` edge in the connection."""
type ProjectsSharedBasemapsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectsSharedBasemap` at the end of the edge."""
  node: ProjectsSharedBasemap!
}

"""Methods to use when ordering `ProjectsSharedBasemap`."""
enum ProjectsSharedBasemapsOrderBy {
  BASEMAP_ID_ASC
  BASEMAP_ID_DESC
  NATURAL
}

"""All input for the `publishTableOfContents` mutation."""
input PublishTableOfContentsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `publishTableOfContents` mutation."""
type PublishTableOfContentsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItems: [TableOfContentsItem!]
}

"""

Most relevant root-level queries are listed first, which concern getting 
the currently logged-in user (`me`) and project (`currentProject`). 
There are also cross-project resources such as form templates and of 
course the project listing connection. Most queries when working from a project
should be performed using fields on the `Project` type.

Postgraphile also automatically generates a variety of accessor queries 
for each database table. These are unlikely to be needed often but may possibly 
be utilized by sophisticated GraphQL clients in the future to update caches.
    
"""
type Query implements Node {
  acl(id: Int!): Acl
  aclByBasemapId(basemapId: Int!): Acl

  """Reads a single `Acl` using its globally unique `ID`."""
  aclByNodeId(
    """The globally unique `ID` to be used in selecting a single `Acl`."""
    nodeId: ID!
  ): Acl
  aclBySketchClassId(sketchClassId: Int!): Acl
  aclByTableOfContentsItemId(tableOfContentsItemId: Int!): Acl
  basemap(id: Int!): Basemap

  """Reads a single `Basemap` using its globally unique `ID`."""
  basemapByNodeId(
    """The globally unique `ID` to be used in selecting a single `Basemap`."""
    nodeId: ID!
  ): Basemap

  """Reads and enables pagination through a set of `Basemap`."""
  basemapsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasemapCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsConnection
  communityGuideline(projectId: Int!): CommunityGuideline

  """Reads a single `CommunityGuideline` using its globally unique `ID`."""
  communityGuidelineByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CommunityGuideline`.
    """
    nodeId: ID!
  ): CommunityGuideline

  """
  The current SeaSketch Project, which is determined by the `referer` or
  `x-ss-slug` request headers. Most queries used by the app should be rooted on this field.
  
  """
  currentProject: Project
  dataLayer(id: Int!): DataLayer
  dataLayerByInteractivitySettingsId(interactivitySettingsId: Int!): DataLayer

  """Reads a single `DataLayer` using its globally unique `ID`."""
  dataLayerByNodeId(
    """The globally unique `ID` to be used in selecting a single `DataLayer`."""
    nodeId: ID!
  ): DataLayer
  dataSource(id: Int!): DataSource

  """Reads a single `DataSource` using its globally unique `ID`."""
  dataSourceByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `DataSource`.
    """
    nodeId: ID!
  ): DataSource
  dataSourcesBucket(bucket: String!): DataSourcesBucket

  """Reads a single `DataSourcesBucket` using its globally unique `ID`."""
  dataSourcesBucketByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `DataSourcesBucket`.
    """
    nodeId: ID!
  ): DataSourcesBucket

  """Reads and enables pagination through a set of `DataSourcesBucket`."""
  dataSourcesBucketsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataSourcesBucketCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataSourcesBucket`."""
    orderBy: [DataSourcesBucketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesBucketsConnection
  emailNotificationPreferenceByUserId(userId: Int!): EmailNotificationPreference

  """
  Reads and enables pagination through a set of `EmailNotificationPreference`.
  """
  emailNotificationPreferencesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailNotificationPreferenceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmailNotificationPreference`."""
    orderBy: [EmailNotificationPreferencesOrderBy!] = [NATURAL]
  ): EmailNotificationPreferencesConnection
  extractSpriteIds(t: String): [Int]
  form(id: Int!): Form

  """Reads a single `Form` using its globally unique `ID`."""
  formByNodeId(
    """The globally unique `ID` to be used in selecting a single `Form`."""
    nodeId: ID!
  ): Form
  formBySketchClassId(sketchClassId: Int!): Form
  formBySurveyId(surveyId: Int!): Form
  formConditionalRenderingRule(id: Int!): FormConditionalRenderingRule

  """
  Reads a single `FormConditionalRenderingRule` using its globally unique `ID`.
  """
  formConditionalRenderingRuleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FormConditionalRenderingRule`.
    """
    nodeId: ID!
  ): FormConditionalRenderingRule
  formField(id: Int!): FormField

  """Reads a single `FormField` using its globally unique `ID`."""
  formFieldByNodeId(
    """The globally unique `ID` to be used in selecting a single `FormField`."""
    nodeId: ID!
  ): FormField
  forum(id: Int!): Forum

  """Reads a single `Forum` using its globally unique `ID`."""
  forumByNodeId(
    """The globally unique `ID` to be used in selecting a single `Forum`."""
    nodeId: ID!
  ): Forum
  group(id: Int!): Group

  """Reads a single `Group` using its globally unique `ID`."""
  groupByNodeId(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group
  groupByProjectIdAndName(name: String!, projectId: Int!): Group
  interactivitySetting(id: Int!): InteractivitySetting

  """Reads a single `InteractivitySetting` using its globally unique `ID`."""
  interactivitySettingByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `InteractivitySetting`.
    """
    nodeId: ID!
  ): InteractivitySetting

  """Reads a single `InviteEmail` using its globally unique `ID`."""
  inviteEmailByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `InviteEmail`.
    """
    nodeId: ID!
  ): InviteEmail

  """
  Access the current session's User. The user is determined by the access token embedded in the `Authorization` header.
  """
  me: User

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  optionalBasemapLayer(id: Int!): OptionalBasemapLayer

  """Reads a single `OptionalBasemapLayer` using its globally unique `ID`."""
  optionalBasemapLayerByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OptionalBasemapLayer`.
    """
    nodeId: ID!
  ): OptionalBasemapLayer
  post(id: Int!): Post

  """Reads a single `Post` using its globally unique `ID`."""
  postByNodeId(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    nodeId: ID!
  ): Post

  """Reads and enables pagination through a set of `Post`."""
  postsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection
  profileByUserId(userId: Int!): Profile
  project(id: Int!): Project

  """Reads a single `Project` using its globally unique `ID`."""
  projectByNodeId(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    nodeId: ID!
  ): Project
  projectBySlug(slug: String!): Project
  projectInvite(id: Int!): ProjectInvite
  projectInviteByEmailAndProjectId(email: Email!, projectId: Int!): ProjectInvite

  """Reads a single `ProjectInvite` using its globally unique `ID`."""
  projectInviteByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProjectInvite`.
    """
    nodeId: ID!
  ): ProjectInvite
  projectInviteGroupByInviteIdAndGroupId(groupId: Int!, inviteId: Int!): ProjectInviteGroup

  """Reads and enables pagination through a set of `ProjectInviteGroup`."""
  projectInviteGroupsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInviteGroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectInviteGroup`."""
    orderBy: [ProjectInviteGroupsOrderBy!] = [NATURAL]
  ): ProjectInviteGroupsConnection

  """
  
  The projectsConnection exposes all SeaSketch projects the current session has 
  access to. For a superuser, this would be all of them (that aren't deleted). 
  For a project administrator, they have access to all public projects and those 
  that they administer. For everyone else, they see all public projects and any 
  `invite-only` projects that they are approved members of.
  
  The projectsConnection exposes a fully-featured Relay compatible connection so 
  that an efficient listing can be made of the hundreds of SeaSketch Projects.
      
  """
  projectsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection
  projectsSharedBasemapByBasemapIdAndProjectId(basemapId: Int!, projectId: Int!): ProjectsSharedBasemap

  """Reads and enables pagination through a set of `ProjectsSharedBasemap`."""
  projectsSharedBasemapsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectsSharedBasemapCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectsSharedBasemap`."""
    orderBy: [ProjectsSharedBasemapsOrderBy!] = [NATURAL]
  ): ProjectsSharedBasemapsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  sessionIsBannedFromPosting(pid: Int): Boolean
  sharedBasemaps: Basemap
  sketch(id: Int!): Sketch

  """Reads a single `Sketch` using its globally unique `ID`."""
  sketchByNodeId(
    """The globally unique `ID` to be used in selecting a single `Sketch`."""
    nodeId: ID!
  ): Sketch
  sketchClass(id: Int!): SketchClass

  """Reads a single `SketchClass` using its globally unique `ID`."""
  sketchClassByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SketchClass`.
    """
    nodeId: ID!
  ): SketchClass
  sketchFolder(id: Int!): SketchFolder

  """Reads a single `SketchFolder` using its globally unique `ID`."""
  sketchFolderByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SketchFolder`.
    """
    nodeId: ID!
  ): SketchFolder
  sprite(id: Int!): Sprite
  spriteByMd5AndProjectId(md5: String!, projectId: Int!): Sprite

  """Reads a single `Sprite` using its globally unique `ID`."""
  spriteByNodeId(
    """The globally unique `ID` to be used in selecting a single `Sprite`."""
    nodeId: ID!
  ): Sprite
  spriteImageBySpriteIdAndPixelRatio(pixelRatio: Int!, spriteId: Int!): SpriteImage

  """
  Note that when requesting a survey and related resources (project, forms &
  fields) from an invite link when anonymous, the `x-ss-survey-invite-token`
  header will need to be set in order to gain access to protected resources. For
  more details [see the
  wiki](https://github.com/seasketch/next/wiki/User-Ingress#survey-invites)
  """
  survey(id: Int!): Survey

  """Reads a single `Survey` using its globally unique `ID`."""
  surveyByNodeId(
    """The globally unique `ID` to be used in selecting a single `Survey`."""
    nodeId: ID!
  ): Survey
  surveyInvite(id: Int!): SurveyInvite
  surveyInviteByEmail(email: Email!): SurveyInvite
  surveyInviteByEmailAndSurveyId(email: Email!, surveyId: Int!): SurveyInvite

  """Reads a single `SurveyInvite` using its globally unique `ID`."""
  surveyInviteByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SurveyInvite`.
    """
    nodeId: ID!
  ): SurveyInvite
  surveyResponse(id: Int!): SurveyResponse

  """Reads a single `SurveyResponse` using its globally unique `ID`."""
  surveyResponseByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SurveyResponse`.
    """
    nodeId: ID!
  ): SurveyResponse
  tableOfContentsItem(id: Int!): TableOfContentsItem
  tableOfContentsItemByDataLayerId(dataLayerId: Int!): TableOfContentsItem

  """Reads a single `TableOfContentsItem` using its globally unique `ID`."""
  tableOfContentsItemByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TableOfContentsItem`.
    """
    nodeId: ID!
  ): TableOfContentsItem

  """
  
  Template forms can be created by SeaSketch superusers for use in **any** 
  project. For example, there could be a template for a human-uses survey that
  project administrators can copy and use as a starting point for customization.
  
  SeaSketch superusers can create template Forms using the `createFormTemplateFromSketchClass` 
  and `createFormTemplateFromSurvey` mutations.
      
  """
  templateForms(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Form!]
  topic(id: Int!): Topic

  """Reads a single `Topic` using its globally unique `ID`."""
  topicByNodeId(
    """The globally unique `ID` to be used in selecting a single `Topic`."""
    nodeId: ID!
  ): Topic

  """Reads and enables pagination through a set of `Topic`."""
  topicsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TopicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsConnection
  user(id: Int!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """
  Verify whether the an invite token has a valid signature and has not yet
  expired.
  
  Use before attempting the confirmProjectInvite() mutation.
  More details on how to handle invites can be found
  [on the wiki](https://github.com/seasketch/next/wiki/User-Ingress#project-invites)
  """
  verifyProjectInvite(
    """JWT string"""
    token: String!
  ): ProjectInviteTokenVerificationResults

  """
  Verify whether the an invite token has a valid signature and has not yet
  expired or been used.
  
  Use before starting an invite-only survey. For info on invite handling
  [see the wiki](https://github.com/seasketch/next/wiki/User-Ingress#survey-invites)
  """
  verifySurveyInvite(
    """JWT string"""
    token: String!
  ): SurveyInviteTokenVerificationResults
}

enum RasterDemEncoding {
  MAPBOX
  TERRARIUM
}

"""All input for the `removeGroupFromAcl` mutation."""
input RemoveGroupFromAclInput {
  aclId: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
}

"""The output of our `removeGroupFromAcl` mutation."""
type RemoveGroupFromAclPayload {
  acl: Acl

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Acl`."""
  sketchClass: SketchClass

  """Reads a single `TableOfContentsItem` that is related to this `Acl`."""
  tableOfContentsItem: TableOfContentsItem
}

"""All input for the `removeUserFromGroup` mutation."""
input RemoveUserFromGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int
  userId: Int
}

"""The output of our `removeUserFromGroup` mutation."""
type RemoveUserFromGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `removeValidChildSketchClass` mutation."""
input RemoveValidChildSketchClassInput {
  child: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parent: Int
}

"""The output of our `removeValidChildSketchClass` mutation."""
type RemoveValidChildSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

enum RenderUnderType {
  LABELS
  LAND
  NONE
}

"""All input for the `revokeAdminAccess` mutation."""
input RevokeAdminAccessInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
  userId: Int
}

"""The output of our `revokeAdminAccess` mutation."""
type RevokeAdminAccessPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `sendAllProjectInvites` mutation."""
input SendAllProjectInvitesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int
}

"""The output of our `sendAllProjectInvites` mutation."""
type SendAllProjectInvitesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  inviteEmails: [InviteEmail!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `sendProjectInvites` mutation."""
input SendProjectInvitesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  inviteIds: [Int]
}

"""The output of our `sendProjectInvites` mutation."""
type SendProjectInvitesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  inviteEmails: [InviteEmail!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `setFormFieldOrder` mutation."""
input SetFormFieldOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fieldIds: [Int]
}

"""The output of our `setFormFieldOrder` mutation."""
type SetFormFieldOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formFields: [FormField!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `setForumOrder` mutation."""
input SetForumOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  forumIds: [Int]
}

"""The output of our `setForumOrder` mutation."""
type SetForumOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  forums: [Forum!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `setPostHiddenByModerator` mutation."""
input SetPostHiddenByModeratorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  postId: Int
  value: Boolean
}

"""The output of our `setPostHiddenByModerator` mutation."""
type SetPostHiddenByModeratorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic
}

"""All input for the `setTopicLocked` mutation."""
input SetTopicLockedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  topicId: Int
  value: Boolean
}

"""The output of our `setTopicLocked` mutation."""
type SetTopicLockedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `setTopicSticky` mutation."""
input SetTopicStickyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  topicId: Int
  value: Boolean
}

"""The output of our `setTopicSticky` mutation."""
type SetTopicStickyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""
A *Sketch* is a spatial feature that matches the schema defined by the related 
*SketchClass*. User *Sketches* appears in the user's "My Plans" tab and can be
shared in the discussion forum. They are also the gateway to analytical reports.

Sketches are completely owned by individual users, so access control rules 
ensure that only the owner of a sketch can perform CRUD operations on them. 
Admins have no special access. Use the graphile-generated mutations to manage 
these records.

"""
type Sketch implements Node {
  """
  Bounding box of the final preprocessed geometry. [xmin, ymin, xmax, ymax]
  """
  bbox: [Float]

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch

  """
  If the sketch is not a collection, it can belong to a collection (collections cannot be nested).
  """
  collectionId: Int

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch

  """
  If this Sketch started as a copy of another it is tracked here. Eventually
  SeaSketch may have a means of visualizing how plans are iterated on over time.
  """
  copyOf: Int

  """
  Parent folder. Both regular sketches and collections may be nested within folders for organization purposes.
  """
  folderId: Int

  """
  The geometry of the Sketch **after** it has been preprocessed. This is the
  geometry that is used for reporting. Preprocessed geometries may be extremely
  large and complex, so it may be necessary to access them through a vector tile
  service or some other optimization.
  """
  geom: GeometryGeometry
  id: Int!

  """User provided name for the sketch."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Number of points in the final geometry. Can be used to gauge the complexity of
  the shape and decide whether to load via graphql or use a vector tile service.
  """
  numVertices: Int

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass

  """SketchClass that defines the behavior of this type of sketch."""
  sketchClassId: Int!

  """Reads a single `User` that is related to this `Sketch`."""
  user: User

  """
  Spatial feature the user directly digitized, without preprocessing. This is
  the feature that should be used if the Sketch is later edited.
  """
  userGeom: GeometryGeometry

  """Owner of the sketch."""
  userId: Int!
}

"""
Sketch Classes act as a schema for sketches drawn by users.

"""
type SketchClass implements Node {
  """
  Access control lists can be used by admins to control who can digitize
  sketches of this class. All users will have access to SketchClass schemas in
  order to render information posted to forums, but they will only be able to
  digitize or edit these sketches if they are on the access control list.
  """
  acl: Acl

  """
  If set to true, a geometry_type of POLYGON would allow for both POLYGONs and 
  MULTIPOLYGONs after preprocessing or on spatial file upload. Users will still 
  digitize single features. 
  
  Note that this feature should be used seldomly, since for planning purposes it 
  is unlikely to have non-contiguous zones.
  
  For CHOOSE_FEATURE geometry types, this field will enable the selction of 
  multiple features.
  
  """
  allowMulti: Boolean!

  """
  Whether the current user session is allowed to digitize sketches of this type.
  Digitizing is controlled by admins via access control lists, and archived
  sketch classes can only be digitized by admins.
  """
  canDigitize: Boolean

  """Form schema used to collect attributes on these sketches."""
  form: Form

  """
  Geometry type users digitize. COLLECTION types act as a feature collection and have no drawn geometry.
  
  """
  geometryType: SketchGeometryType!

  """
  Name of the report to be displayed.
  
  """
  geoprocessingClientName: String

  """
  Endpoint for the client javascript bundle.
  
  """
  geoprocessingClientUrl: String

  """
  Root endpoint of a
  [@seasketch/geoprocessing](https://github.com/seasketch/geoprocessing) project
  that should be used for reporting.
  
  """
  geoprocessingProjectUrl: String
  id: Int!

  """
  If set to true, (non-admin) users should not be able to digitize new features
  using this sketch class, but they should still be able to access the sketch
  class in order to render existing sketches of this type.
  
  """
  isArchived: Boolean!

  """
  If set to true, show as an option in the digitizing tools. If set to false,
  this sketch class may be solely for survey responses.
  
  """
  isMyPlansOption: Boolean!

  """
  [Mapbox GL Style](https://docs.mapbox.com/mapbox-gl-js/style-spec/) used to 
  render features. Sketches can be styled based on attribute data by using 
  [Expressions](https://docs.mapbox.com/help/glossary/expression/).
  
  """
  mapboxGlStyle: JSON

  """Label chosen by project admins that is shown to users."""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """SketchClasses belong to a single project."""
  projectId: Int!

  """Number of sketches created with this sketch class"""
  sketchCount: BigInt

  """
  If listed for a Collection, only valid child sketch classes can be added as children.
  """
  validChildren(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SketchClass!]
}

"""
A condition to be used against `SketchClass` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SketchClassCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""A `SketchClass` edge in the connection."""
type SketchClassesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SketchClass` at the end of the edge."""
  node: SketchClass!
}

"""Methods to use when ordering `SketchClass`."""
enum SketchClassesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""An input for mutations affecting `SketchClass`"""
input SketchClassInput {
  """
  If set to true, a geometry_type of POLYGON would allow for both POLYGONs and 
  MULTIPOLYGONs after preprocessing or on spatial file upload. Users will still 
  digitize single features. 
  
  Note that this feature should be used seldomly, since for planning purposes it 
  is unlikely to have non-contiguous zones.
  
  For CHOOSE_FEATURE geometry types, this field will enable the selction of 
  multiple features.
  
  """
  allowMulti: Boolean

  """
  Geometry type users digitize. COLLECTION types act as a feature collection and have no drawn geometry.
  
  """
  geometryType: SketchGeometryType

  """
  Name of the report to be displayed.
  
  """
  geoprocessingClientName: String

  """
  Endpoint for the client javascript bundle.
  
  """
  geoprocessingClientUrl: String

  """
  Root endpoint of a
  [@seasketch/geoprocessing](https://github.com/seasketch/geoprocessing) project
  that should be used for reporting.
  
  """
  geoprocessingProjectUrl: String
  id: Int

  """
  If set to true, (non-admin) users should not be able to digitize new features
  using this sketch class, but they should still be able to access the sketch
  class in order to render existing sketches of this type.
  
  """
  isArchived: Boolean

  """
  If set to true, show as an option in the digitizing tools. If set to false,
  this sketch class may be solely for survey responses.
  
  """
  isMyPlansOption: Boolean

  """
  [Mapbox GL Style](https://docs.mapbox.com/mapbox-gl-js/style-spec/) used to 
  render features. Sketches can be styled based on attribute data by using 
  [Expressions](https://docs.mapbox.com/help/glossary/expression/).
  
  """
  mapboxGlStyle: JSON

  """Label chosen by project admins that is shown to users."""
  name: String!

  """SketchClasses belong to a single project."""
  projectId: Int!
}

"""
Represents an update to a `SketchClass`. Fields that are set will be updated.
"""
input SketchClassPatch {
  """
  If set to true, a geometry_type of POLYGON would allow for both POLYGONs and 
  MULTIPOLYGONs after preprocessing or on spatial file upload. Users will still 
  digitize single features. 
  
  Note that this feature should be used seldomly, since for planning purposes it 
  is unlikely to have non-contiguous zones.
  
  For CHOOSE_FEATURE geometry types, this field will enable the selction of 
  multiple features.
  
  """
  allowMulti: Boolean

  """
  Name of the report to be displayed.
  
  """
  geoprocessingClientName: String

  """
  Endpoint for the client javascript bundle.
  
  """
  geoprocessingClientUrl: String

  """
  Root endpoint of a
  [@seasketch/geoprocessing](https://github.com/seasketch/geoprocessing) project
  that should be used for reporting.
  
  """
  geoprocessingProjectUrl: String

  """
  If set to true, (non-admin) users should not be able to digitize new features
  using this sketch class, but they should still be able to access the sketch
  class in order to render existing sketches of this type.
  
  """
  isArchived: Boolean

  """Label chosen by project admins that is shown to users."""
  name: String
}

"""
SketchFolders can be used by users to organize their sketches. Collection-type
sketches can be used to organize sketches as well, but they are limited in that 
they cannot be nested, and also represent specific management semantics. Folders
can be used by users to arbitrarily organize their Sketches.

"""
type SketchFolder implements Node {
  """
  The parent sketch collection, if any. Folders can only have a single parent entity.
  """
  collectionId: Int

  """The parent folder, if any."""
  folderId: Int
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  projectId: Int!
  userId: Int!
}

"""An input for mutations affecting `SketchFolder`"""
input SketchFolderInput {
  """
  The parent sketch collection, if any. Folders can only have a single parent entity.
  """
  collectionId: Int

  """The parent folder, if any."""
  folderId: Int
  id: Int
  name: String!
  projectId: Int!
  userId: Int!
}

"""
Represents an update to a `SketchFolder`. Fields that are set will be updated.
"""
input SketchFolderPatch {
  """
  The parent sketch collection, if any. Folders can only have a single parent entity.
  """
  collectionId: Int

  """The parent folder, if any."""
  folderId: Int
  id: Int
  name: String
  projectId: Int
  userId: Int
}

"""A `SketchFolder` edge in the connection."""
type SketchFoldersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SketchFolder` at the end of the edge."""
  node: SketchFolder!
}

"""Methods to use when ordering `SketchFolder`."""
enum SketchFoldersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

enum SketchGeometryType {
  """
  Users will choose one (or more) features from a feature collection. For example, a choice of grid cells or marxan zones.
  """
  CHOOSE_FEATURE

  """
  Sketch itself will have no geometry, but can be associated with a number of
  child sketches. Can be represented as a GeoJSON FeatureCollection.
  """
  COLLECTION
  LINESTRING
  POINT
  POLYGON
}

"""An input for mutations affecting `Sketch`"""
input SketchInput {
  """
  Bounding box of the final preprocessed geometry. [xmin, ymin, xmax, ymax]
  """
  bbox: [Float]

  """
  If the sketch is not a collection, it can belong to a collection (collections cannot be nested).
  """
  collectionId: Int

  """
  If this Sketch started as a copy of another it is tracked here. Eventually
  SeaSketch may have a means of visualizing how plans are iterated on over time.
  """
  copyOf: Int

  """
  Parent folder. Both regular sketches and collections may be nested within folders for organization purposes.
  """
  folderId: Int

  """
  The geometry of the Sketch **after** it has been preprocessed. This is the
  geometry that is used for reporting. Preprocessed geometries may be extremely
  large and complex, so it may be necessary to access them through a vector tile
  service or some other optimization.
  """
  geom: GeoJSON
  id: Int

  """User provided name for the sketch."""
  name: String!

  """
  Number of points in the final geometry. Can be used to gauge the complexity of
  the shape and decide whether to load via graphql or use a vector tile service.
  """
  numVertices: Int

  """SketchClass that defines the behavior of this type of sketch."""
  sketchClassId: Int!

  """
  Spatial feature the user directly digitized, without preprocessing. This is
  the feature that should be used if the Sketch is later edited.
  """
  userGeom: GeoJSON

  """Owner of the sketch."""
  userId: Int!
}

"""
Represents an update to a `Sketch`. Fields that are set will be updated.
"""
input SketchPatch {
  """
  If the sketch is not a collection, it can belong to a collection (collections cannot be nested).
  """
  collectionId: Int

  """
  The geometry of the Sketch **after** it has been preprocessed. This is the
  geometry that is used for reporting. Preprocessed geometries may be extremely
  large and complex, so it may be necessary to access them through a vector tile
  service or some other optimization.
  """
  geom: GeoJSON

  """User provided name for the sketch."""
  name: String

  """
  Spatial feature the user directly digitized, without preprocessing. This is
  the feature that should be used if the Sketch is later edited.
  """
  userGeom: GeoJSON
}

enum SortByDirection {
  ASC
  DESC
}

"""
Image sprites for use in Mapbox GL Styles. The database holds metadata about the
sprite, the actual images are in cloud storage referenced by the URL parameter. 

"""
type Sprite implements Node {
  id: Int!

  """
  Hash of lowest-dpi image in the set (pixelRatio=1). Useful for de-duplicating
  symbols that have been imported multiple times
  """
  md5: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `Sprite`."""
  project: Project

  """If unset, sprite will be available for use in all projects"""
  projectId: Int!

  """Reads and enables pagination through a set of `SpriteImage`."""
  spriteImages(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpriteImageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SpriteImage`."""
    orderBy: [SpriteImagesOrderBy!]
  ): [SpriteImage!]!

  """
  Optional. Indicates whether the image is intended for use with particular GL Styles
  """
  type: SpriteType
}

"""
A condition to be used against `Sprite` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SpriteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `md5` field."""
  md5: String

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

type SpriteImage {
  """Must be <= 1024"""
  height: Int!

  """
  Device pixel ratio a copy of this image supports. 2x would be for "retina"
  devices. Multiple records may point to the same sprite id, but each must have
  a unique combination of id, pixel_ratio, and data_layer_id.
  """
  pixelRatio: Int!

  """Reads a single `Sprite` that is related to this `SpriteImage`."""
  sprite: Sprite
  spriteId: Int!

  """Supports multipart Upload operations"""
  url: String!

  """Must be <= 1024"""
  width: Int!
}

"""
A condition to be used against `SpriteImage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SpriteImageCondition {
  """Checks for equality with the object’s `spriteId` field."""
  spriteId: Int
}

"""Methods to use when ordering `SpriteImage`."""
enum SpriteImagesOrderBy {
  NATURAL
  SPRITE_ID_ASC
  SPRITE_ID_DESC
}

"""Methods to use when ordering `Sprite`."""
enum SpritesOrderBy {
  ID_ASC
  ID_DESC
  MD5_ASC
  MD5_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

enum SpriteType {
  FILL
  ICON
  LINE
}

type Survey implements Node {
  """
  PUBLIC or INVITE_ONLY
  
  """
  accessType: SurveyAccessType!

  """
  Shown to users after completing a survey. Expected to be something like Draft.js content state
  """
  closingMessage: JSON!

  """Reads a single `Form` that is related to this `Survey`."""
  form: Form

  """Reads and enables pagination through a set of `Form`."""
  formsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection! @deprecated(reason: "Please use form instead")

  """
  If set, responses that originate from an IP address outside this fence will be flagged.
  """
  geofence: GeographyPolygon
  id: Int!

  """
  Shown to users before starting a survey response. Expected to be something like Draft.js content state
  """
  introMessage: JSON!

  """
  
  Listing of groups whose users should be invited to participate in the survey.
  
  Use `updateSurveyInvitedGroups()` mutation to modify.
  
  """
  invitedGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Group!]

  """
  Disabled surveys will not be accessible to non-admins. Invite email sending will
  be paused.
  
  """
  isDisabled: Boolean!

  """
  If set, there can only be one response with matching contact information. The
  app will also discourage multiple submissions from the same browser session.
  """
  limitToSingleResponse: Boolean!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `Survey`."""
  project: Project
  projectId: Int!

  """
  Only applicable for public surveys. Show tools to respondants for sharing the 
  survey on social media to encourage responses.
  
  """
  showSocialMediaButtons: Boolean

  """
  Usually the survey will show a button that says [Begin Survey]. This can be 
  customized by admins.
  
  """
  startButtonText: String
  submittedResponseCount: Int

  """
  All related survey invites. Survey invites will be automatically created for
  users in the groups specified by `surveyInvitedGroups`.
  """
  surveyInvites(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyInviteCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SurveyInvite`."""
    orderBy: [SurveyInvitesOrderBy!]
  ): [SurveyInvite!]!

  """
  Responses related to this survey. End-users will have access to their own
  submitted or draft responses. Administrators will have access to their own,
  plus all submitted responses.
  """
  surveyResponsesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SurveyResponseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesConnection!
}

"""Controls who has access to respond to a survey"""
enum SurveyAccessType {
  """Only users part of an invited group or email invitation can respond"""
  INVITE_ONLY

  """Anyone can respond"""
  PUBLIC
}

"""
A condition to be used against `Survey` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SurveyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""An input for mutations affecting `Survey`"""
input SurveyInput {
  """
  PUBLIC or INVITE_ONLY
  
  """
  accessType: SurveyAccessType

  """
  Shown to users after completing a survey. Expected to be something like Draft.js content state
  """
  closingMessage: JSON

  """
  If set, responses that originate from an IP address outside this fence will be flagged.
  """
  geofence: GeoJSON
  id: Int

  """
  Shown to users before starting a survey response. Expected to be something like Draft.js content state
  """
  introMessage: JSON

  """
  Disabled surveys will not be accessible to non-admins. Invite email sending will
  be paused.
  
  """
  isDisabled: Boolean

  """
  If set, there can only be one response with matching contact information. The
  app will also discourage multiple submissions from the same browser session.
  """
  limitToSingleResponse: Boolean
  name: String!
  projectId: Int!

  """
  Only applicable for public surveys. Show tools to respondants for sharing the 
  survey on social media to encourage responses.
  
  """
  showSocialMediaButtons: Boolean

  """
  Usually the survey will show a button that says [Begin Survey]. This can be 
  customized by admins.
  
  """
  startButtonText: String
}

type SurveyInvite implements Node {
  createdAt: Datetime!
  email: Email
  fullname: String
  id: Int!

  """Reads and enables pagination through a set of `InviteEmail`."""
  inviteEmails(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InviteEmailCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `InviteEmail`."""
    orderBy: [InviteEmailsOrderBy!]
  ): [InviteEmail!]!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Indicates the status of the invite, e.g. whether an invite email has been
  sent, status of those emails, and whether a response has been submitted.
  """
  status: InviteStatus

  """Reads a single `Survey` that is related to this `SurveyInvite`."""
  survey: Survey
  surveyId: Int!
  userId: Int
  wasUsed: Boolean!
}

"""
A condition to be used against `SurveyInvite` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SurveyInviteCondition {
  """Checks for equality with the object’s `email` field."""
  email: Email

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `surveyId` field."""
  surveyId: Int
}

type SurveyInvitedGroup {
  groupId: Int!

  """Reads a single `Survey` that is related to this `SurveyInvitedGroup`."""
  survey: Survey
  surveyId: Int!
}

"""An input for mutations affecting `SurveyInvitedGroup`"""
input SurveyInvitedGroupInput {
  groupId: Int!
  surveyId: Int!
}

input SurveyInviteOptionsInput {
  email: Email
  fullname: String
}

"""
Represents an update to a `SurveyInvite`. Fields that are set will be updated.
"""
input SurveyInvitePatch {
  fullname: String
}

"""A `SurveyInvite` edge in the connection."""
type SurveyInvitesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SurveyInvite` at the end of the edge."""
  node: SurveyInvite!
}

"""Methods to use when ordering `SurveyInvite`."""
enum SurveyInvitesOrderBy {
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SURVEY_ID_ASC
  SURVEY_ID_DESC
}

type SurveyInviteTokenClaims {
  email: String
  fullname: String
  inviteId: Int!
  projectId: Int!
  surveyId: Int!
  wasUsed: Boolean!
}

type SurveyInviteTokenVerificationResults {
  claims: SurveyInviteTokenClaims
  error: String
}

"""
Represents an update to a `Survey`. Fields that are set will be updated.
"""
input SurveyPatch {
  """
  PUBLIC or INVITE_ONLY
  
  """
  accessType: SurveyAccessType

  """
  Shown to users after completing a survey. Expected to be something like Draft.js content state
  """
  closingMessage: JSON

  """
  If set, responses that originate from an IP address outside this fence will be flagged.
  """
  geofence: GeoJSON
  id: Int

  """
  Shown to users before starting a survey response. Expected to be something like Draft.js content state
  """
  introMessage: JSON

  """
  Disabled surveys will not be accessible to non-admins. Invite email sending will
  be paused.
  
  """
  isDisabled: Boolean

  """
  If set, there can only be one response with matching contact information. The
  app will also discourage multiple submissions from the same browser session.
  """
  limitToSingleResponse: Boolean
  name: String
  projectId: Int

  """
  Only applicable for public surveys. Show tools to respondants for sharing the 
  survey on social media to encourage responses.
  
  """
  showSocialMediaButtons: Boolean

  """
  Usually the survey will show a button that says [Begin Survey]. This can be 
  customized by admins.
  
  """
  startButtonText: String
}

type SurveyResponse implements Node {
  """
  Should be set by the client on submission and tracked by cookies or
  localStorage. Surveys that permit only a single entry enable users to bypass
  the limit for legitimate purposes, like entering responses on a shared computer.
  
  """
  bypassedDuplicateSubmissionControl: Boolean!
  createdAt: Datetime!

  """JSON representation of responses, keyed by the form field export_id"""
  data: JSON!
  id: Int!

  """
  Users may save their responses for later editing before submission. After submission they can no longer edit them.
  """
  isDraft: Boolean!

  """
  Duplicate entries are detected by matching contact-information field values.
  
  """
  isDuplicateEntry: Boolean!

  """
  Detected by comparing ip hashes from previous entries. IP hashes are not tied
  to particular responses, so only the second and subsequent entries are flagged.
  
  """
  isDuplicateIp: Boolean!

  """
  Unusual or missing user-agent headers on submissions are flagged. May indicate
  scripting but does not necessarily imply malicious intent.
  
  """
  isUnrecognizedUserAgent: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Checked on SUBMISSION, so adding or changing a survey geofence after responses
  have been submitted will not update values. GPS coordinates and IP addresses
  are not stored for privacy purposes.
  
  """
  outsideGeofence: Boolean!

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey
  surveyId: Int!
  updatedAt: Datetime
  userId: Int
}

"""
A condition to be used against `SurveyResponse` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SurveyResponseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `surveyId` field."""
  surveyId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""An input for mutations affecting `SurveyResponse`"""
input SurveyResponseInput {
  """
  Should be set by the client on submission and tracked by cookies or
  localStorage. Surveys that permit only a single entry enable users to bypass
  the limit for legitimate purposes, like entering responses on a shared computer.
  
  """
  bypassedDuplicateSubmissionControl: Boolean
  createdAt: Datetime

  """JSON representation of responses, keyed by the form field export_id"""
  data: JSON
  id: Int

  """
  Users may save their responses for later editing before submission. After submission they can no longer edit them.
  """
  isDraft: Boolean
  surveyId: Int!
  updatedAt: Datetime
  userId: Int
}

"""
Represents an update to a `SurveyResponse`. Fields that are set will be updated.
"""
input SurveyResponsePatch {
  """JSON representation of responses, keyed by the form field export_id"""
  data: JSON

  """
  Users may save their responses for later editing before submission. After submission they can no longer edit them.
  """
  isDraft: Boolean
}

"""A connection to a list of `SurveyResponse` values."""
type SurveyResponsesConnection {
  """
  A list of edges which contains the `SurveyResponse` and cursor to aid in pagination.
  """
  edges: [SurveyResponsesEdge!]!

  """A list of `SurveyResponse` objects."""
  nodes: [SurveyResponse!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SurveyResponse` you could get from the connection."""
  totalCount: Int!
}

"""A `SurveyResponse` edge in the connection."""
type SurveyResponsesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SurveyResponse` at the end of the edge."""
  node: SurveyResponse!
}

"""Methods to use when ordering `SurveyResponse`."""
enum SurveyResponsesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SURVEY_ID_ASC
  SURVEY_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Methods to use when ordering `Survey`."""
enum SurveysOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

type SurveyTokenInfo {
  """ID of related project"""
  projectId: Int

  """ID of related survey"""
  surveyId: Int

  """Signed token that can be used for accessing the survey"""
  token: String
}

"""
TableOfContentsItems represent a tree-view of folders and operational layers 
that can be added to the map. Both layers and folders may be nested into other 
folders for organization, and each folder has its own access control list.

Items that represent data layers have a `DataLayer` relation, which in turn has
a reference to a `DataSource`. Usually these relations should be fetched in 
batch only once the layer is turned on, using the 
`dataLayersAndSourcesByLayerId` query.

"""
type TableOfContentsItem implements Node {
  """Reads a single `Acl` that is related to this `TableOfContentsItem`."""
  acl: Acl

  """
  If set, users will be able to zoom to the bounds of this item. [minx, miny, maxx, maxy]
  """
  bounds: [BigFloat]

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  If is_folder=false, a DataLayers visibility will be controlled by this item
  """
  dataLayerId: Int
  enableDownload: Boolean!
  hideChildren: Boolean!
  id: Int!

  """
  If set, folders with this property cannot be toggled in order to activate all
  their children. Toggles can only be used to toggle children off
  """
  isClickOffOnly: Boolean!

  """
  Identifies whether this item is part of the draft table of contents edited by
  admin or the static public version. This property cannot be changed. Rather,
  use the `publishTableOfContents()` mutation
  """
  isDraft: Boolean!

  """
  If not a folder, the item is a layer-type and must have a data_layer_id
  """
  isFolder: Boolean!

  """
  DraftJS compatible representation of text content to display when a user requests layer metadata. Not valid for Folders
  """
  metadata: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  stable_id of the parent folder, if any. This property cannot be changed 
  directly. To rearrange items into folders, use the 
  `updateTableOfContentsItemParent` mutation.
  
  """
  parentStableId: String
  projectId: Int!

  """
  If set, children of this folder will appear as radio options so that only one may be toggle at a time
  """
  showRadioChildren: Boolean!

  """Position in the layer list"""
  sortIndex: Int!

  """
  The stable_id property must be set by clients when creating new items. [Nanoid](https://github.com/ai/nanoid#readme) 
  should be used with a custom alphabet that excludes dashes and has a lenght of 
  9. The purpose of the stable_id is to control the nesting arrangement of items
  and provide a stable reference for layer visibility settings and map bookmarks.
  When published, the id primary key property of the item will change but not the 
  stable_id.
  
  """
  stableId: String!

  """Name used in the table of contents rendering"""
  title: String!
}

"""
A condition to be used against `TableOfContentsItem` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TableOfContentsItemCondition {
  """Checks for equality with the object’s `dataLayerId` field."""
  dataLayerId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isDraft` field."""
  isDraft: Boolean

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int
}

"""An input for mutations affecting `TableOfContentsItem`"""
input TableOfContentsItemInput {
  """
  If set, users will be able to zoom to the bounds of this item. [minx, miny, maxx, maxy]
  """
  bounds: [BigFloat]

  """
  If is_folder=false, a DataLayers visibility will be controlled by this item
  """
  dataLayerId: Int
  enableDownload: Boolean
  hideChildren: Boolean

  """
  If set, folders with this property cannot be toggled in order to activate all
  their children. Toggles can only be used to toggle children off
  """
  isClickOffOnly: Boolean

  """
  If not a folder, the item is a layer-type and must have a data_layer_id
  """
  isFolder: Boolean

  """
  DraftJS compatible representation of text content to display when a user requests layer metadata. Not valid for Folders
  """
  metadata: JSON

  """
  stable_id of the parent folder, if any. This property cannot be changed 
  directly. To rearrange items into folders, use the 
  `updateTableOfContentsItemParent` mutation.
  
  """
  parentStableId: String
  projectId: Int!

  """
  If set, children of this folder will appear as radio options so that only one may be toggle at a time
  """
  showRadioChildren: Boolean

  """
  The stable_id property must be set by clients when creating new items. [Nanoid](https://github.com/ai/nanoid#readme) 
  should be used with a custom alphabet that excludes dashes and has a lenght of 
  9. The purpose of the stable_id is to control the nesting arrangement of items
  and provide a stable reference for layer visibility settings and map bookmarks.
  When published, the id primary key property of the item will change but not the 
  stable_id.
  
  """
  stableId: String!

  """Name used in the table of contents rendering"""
  title: String!
}

"""
Represents an update to a `TableOfContentsItem`. Fields that are set will be updated.
"""
input TableOfContentsItemPatch {
  """
  If set, users will be able to zoom to the bounds of this item. [minx, miny, maxx, maxy]
  """
  bounds: [BigFloat]

  """
  If is_folder=false, a DataLayers visibility will be controlled by this item
  """
  dataLayerId: Int
  enableDownload: Boolean
  hideChildren: Boolean

  """
  If set, folders with this property cannot be toggled in order to activate all
  their children. Toggles can only be used to toggle children off
  """
  isClickOffOnly: Boolean

  """
  DraftJS compatible representation of text content to display when a user requests layer metadata. Not valid for Folders
  """
  metadata: JSON

  """
  If set, children of this folder will appear as radio options so that only one may be toggle at a time
  """
  showRadioChildren: Boolean

  """Name used in the table of contents rendering"""
  title: String
}

"""A connection to a list of `TableOfContentsItem` values."""
type TableOfContentsItemsConnection {
  """
  A list of edges which contains the `TableOfContentsItem` and cursor to aid in pagination.
  """
  edges: [TableOfContentsItemsEdge!]!

  """A list of `TableOfContentsItem` objects."""
  nodes: [TableOfContentsItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TableOfContentsItem` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TableOfContentsItem` edge in the connection."""
type TableOfContentsItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TableOfContentsItem` at the end of the edge."""
  node: TableOfContentsItem!
}

"""Methods to use when ordering `TableOfContentsItem`."""
enum TableOfContentsItemsOrderBy {
  DATA_LAYER_ID_ASC
  DATA_LAYER_ID_DESC
  ID_ASC
  ID_DESC
  IS_DRAFT_ASC
  IS_DRAFT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

enum TileScheme {
  TMS
  XYZ
}

type Topic implements Node {
  authorId: Int!

  """
  User Profile of the author. If a user has not shared their profile the post contents will be hidden.
  """
  authorProfile: Profile
  createdAt: Datetime!

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum
  forumId: Int!
  id: Int!

  """
  Locked topics can only be posted to by project admins and will display a lock symbol.
  
  Can be toggled by project admins using `setTopicLocked()` mutation.
  
  """
  locked: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Post`."""
  postsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection!

  """
  Sticky topics will be listed at the topic of the forum.
  
  Can be toggled by project admins using `setTopicSticky()` mutation.
  
  """
  sticky: Boolean!

  """
  Title displayed in the topics listing. Can be updated in the first 5 minutes after creation.
  """
  title: String!
}

"""
A condition to be used against `Topic` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TopicCondition {
  """Checks for equality with the object’s `forumId` field."""
  forumId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""
Represents an update to a `Topic`. Fields that are set will be updated.
"""
input TopicPatch {
  """
  Locked topics can only be posted to by project admins and will display a lock symbol.
  
  Can be toggled by project admins using `setTopicLocked()` mutation.
  
  """
  locked: Boolean

  """
  Sticky topics will be listed at the topic of the forum.
  
  Can be toggled by project admins using `setTopicSticky()` mutation.
  
  """
  sticky: Boolean

  """
  Title displayed in the topics listing. Can be updated in the first 5 minutes after creation.
  """
  title: String
}

"""A connection to a list of `Topic` values."""
type TopicsConnection {
  """
  A list of edges which contains the `Topic` and cursor to aid in pagination.
  """
  edges: [TopicsEdge!]!

  """A list of `Topic` objects."""
  nodes: [Topic!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Topic` you could get from the connection."""
  totalCount: Int!
}

"""A `Topic` edge in the connection."""
type TopicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Topic` at the end of the edge."""
  node: Topic!
}

"""Methods to use when ordering `Topic`."""
enum TopicsOrderBy {
  FORUM_ID_ASC
  FORUM_ID_DESC
  ID_ASC
  ID_DESC
  LAST_POST_CREATED_AT_AND_STICKY
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateAclByBasemapId` mutation."""
input UpdateAclByBasemapIdInput {
  basemapId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
}

"""All input for the `updateAclByNodeId` mutation."""
input UpdateAclByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Acl` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
}

"""All input for the `updateAclBySketchClassId` mutation."""
input UpdateAclBySketchClassIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
  sketchClassId: Int!
}

"""All input for the `updateAclByTableOfContentsItemId` mutation."""
input UpdateAclByTableOfContentsItemIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
  tableOfContentsItemId: Int!
}

"""All input for the `updateAcl` mutation."""
input UpdateAclInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Acl` being updated.
  """
  patch: AclPatch!
}

"""The output of our update `Acl` mutation."""
type UpdateAclPayload {
  """The `Acl` that was updated by this mutation."""
  acl: Acl

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `SketchClass` that is related to this `Acl`."""
  sketchClass: SketchClass

  """Reads a single `TableOfContentsItem` that is related to this `Acl`."""
  tableOfContentsItem: TableOfContentsItem
}

"""All input for the `updateBasemapByNodeId` mutation."""
input UpdateBasemapByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Basemap` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Basemap` being updated.
  """
  patch: BasemapPatch!
}

"""All input for the `updateBasemap` mutation."""
input UpdateBasemapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Basemap` being updated.
  """
  patch: BasemapPatch!
}

"""The output of our update `Basemap` mutation."""
type UpdateBasemapPayload {
  """The `Basemap` that was updated by this mutation."""
  basemap: Basemap

  """An edge for our `Basemap`. May be used by Relay 1."""
  basemapEdge(
    """The method to use when ordering `Basemap`."""
    orderBy: [BasemapsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasemapsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `InteractivitySetting` that is related to this `Basemap`.
  """
  interactivitySettings: InteractivitySetting

  """Reads a single `Project` that is related to this `Basemap`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCommunityGuidelineByNodeId` mutation."""
input UpdateCommunityGuidelineByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CommunityGuideline` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CommunityGuideline` being updated.
  """
  patch: CommunityGuidelinePatch!
}

"""All input for the `updateCommunityGuideline` mutation."""
input UpdateCommunityGuidelineInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CommunityGuideline` being updated.
  """
  patch: CommunityGuidelinePatch!
  projectId: Int!
}

"""The output of our update `CommunityGuideline` mutation."""
type UpdateCommunityGuidelinePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CommunityGuideline` that was updated by this mutation."""
  communityGuideline: CommunityGuideline

  """Reads a single `Project` that is related to this `CommunityGuideline`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDataLayerByInteractivitySettingsId` mutation."""
input UpdateDataLayerByInteractivitySettingsIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  interactivitySettingsId: Int!

  """
  An object where the defined keys will be set on the `DataLayer` being updated.
  """
  patch: DataLayerPatch!
}

"""All input for the `updateDataLayerByNodeId` mutation."""
input UpdateDataLayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DataLayer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DataLayer` being updated.
  """
  patch: DataLayerPatch!
}

"""All input for the `updateDataLayer` mutation."""
input UpdateDataLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `DataLayer` being updated.
  """
  patch: DataLayerPatch!
}

"""The output of our update `DataLayer` mutation."""
type UpdateDataLayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataLayer` that was updated by this mutation."""
  dataLayer: DataLayer

  """An edge for our `DataLayer`. May be used by Relay 1."""
  dataLayerEdge(
    """The method to use when ordering `DataLayer`."""
    orderBy: [DataLayersOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataLayersEdge

  """Reads a single `DataSource` that is related to this `DataLayer`."""
  dataSource: DataSource

  """
  Reads a single `InteractivitySetting` that is related to this `DataLayer`.
  """
  interactivitySettings: InteractivitySetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDataSourceByNodeId` mutation."""
input UpdateDataSourceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DataSource` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DataSource` being updated.
  """
  patch: DataSourcePatch!
}

"""All input for the `updateDataSource` mutation."""
input UpdateDataSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Should be used as sourceId in stylesheets."""
  id: Int!

  """
  An object where the defined keys will be set on the `DataSource` being updated.
  """
  patch: DataSourcePatch!
}

"""The output of our update `DataSource` mutation."""
type UpdateDataSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DataSource` that was updated by this mutation."""
  dataSource: DataSource

  """An edge for our `DataSource`. May be used by Relay 1."""
  dataSourceEdge(
    """The method to use when ordering `DataSource`."""
    orderBy: [DataSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateEmailNotificationPreferenceByUserId` mutation.
"""
input UpdateEmailNotificationPreferenceByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmailNotificationPreference` being updated.
  """
  patch: EmailNotificationPreferencePatch!
  userId: Int!
}

"""The output of our update `EmailNotificationPreference` mutation."""
type UpdateEmailNotificationPreferencePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailNotificationPreference` that was updated by this mutation."""
  emailNotificationPreference: EmailNotificationPreference

  """An edge for our `EmailNotificationPreference`. May be used by Relay 1."""
  emailNotificationPreferenceEdge(
    """The method to use when ordering `EmailNotificationPreference`."""
    orderBy: [EmailNotificationPreferencesOrderBy!] = [NATURAL]
  ): EmailNotificationPreferencesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `EmailNotificationPreference`.
  """
  user: User
}

"""
All input for the `updateFormConditionalRenderingRuleByNodeId` mutation.
"""
input UpdateFormConditionalRenderingRuleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormConditionalRenderingRule` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FormConditionalRenderingRule` being updated.
  """
  patch: FormConditionalRenderingRulePatch!
}

"""All input for the `updateFormConditionalRenderingRule` mutation."""
input UpdateFormConditionalRenderingRuleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `FormConditionalRenderingRule` being updated.
  """
  patch: FormConditionalRenderingRulePatch!
}

"""The output of our update `FormConditionalRenderingRule` mutation."""
type UpdateFormConditionalRenderingRulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FormField` that is related to this `FormConditionalRenderingRule`.
  """
  field: FormField

  """The `FormConditionalRenderingRule` that was updated by this mutation."""
  formConditionalRenderingRule: FormConditionalRenderingRule

  """
  An edge for our `FormConditionalRenderingRule`. May be used by Relay 1.
  """
  formConditionalRenderingRuleEdge(
    """The method to use when ordering `FormConditionalRenderingRule`."""
    orderBy: [FormConditionalRenderingRulesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormConditionalRenderingRulesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFormFieldByNodeId` mutation."""
input UpdateFormFieldByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormField` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FormField` being updated.
  """
  patch: FormFieldPatch!
}

"""All input for the `updateFormField` mutation."""
input UpdateFormFieldInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `FormField` being updated.
  """
  patch: FormFieldPatch!
}

"""The output of our update `FormField` mutation."""
type UpdateFormFieldPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Form` that is related to this `FormField`."""
  form: Form

  """The `FormField` that was updated by this mutation."""
  formField: FormField

  """An edge for our `FormField`. May be used by Relay 1."""
  formFieldEdge(
    """The method to use when ordering `FormField`."""
    orderBy: [FormFieldsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormFieldsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateForumByNodeId` mutation."""
input UpdateForumByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Forum` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Forum` being updated.
  """
  patch: ForumPatch!
}

"""All input for the `updateForum` mutation."""
input UpdateForumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Forum` being updated.
  """
  patch: ForumPatch!
}

"""The output of our update `Forum` mutation."""
type UpdateForumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Forum` that was updated by this mutation."""
  forum: Forum

  """An edge for our `Forum`. May be used by Relay 1."""
  forumEdge(
    """The method to use when ordering `Forum`."""
    orderBy: [ForumsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ForumsEdge

  """Reads a single `Project` that is related to this `Forum`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGroupByNodeId` mutation."""
input UpdateGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""All input for the `updateGroupByProjectIdAndName` mutation."""
input UpdateGroupByProjectIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Label for the group."""
  name: String!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
  projectId: Int!
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """Reads a single `Project` that is related to this `Group`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateInteractivitySettingByNodeId` mutation."""
input UpdateInteractivitySettingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InteractivitySetting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `InteractivitySetting` being updated.
  """
  patch: InteractivitySettingPatch!
}

"""All input for the `updateInteractivitySetting` mutation."""
input UpdateInteractivitySettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `InteractivitySetting` being updated.
  """
  patch: InteractivitySettingPatch!
}

"""The output of our update `InteractivitySetting` mutation."""
type UpdateInteractivitySettingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InteractivitySetting` that was updated by this mutation."""
  interactivitySetting: InteractivitySetting

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOptionalBasemapLayerByNodeId` mutation."""
input UpdateOptionalBasemapLayerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OptionalBasemapLayer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OptionalBasemapLayer` being updated.
  """
  patch: OptionalBasemapLayerPatch!
}

"""All input for the `updateOptionalBasemapLayer` mutation."""
input UpdateOptionalBasemapLayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `OptionalBasemapLayer` being updated.
  """
  patch: OptionalBasemapLayerPatch!
}

"""The output of our update `OptionalBasemapLayer` mutation."""
type UpdateOptionalBasemapLayerPayload {
  """
  Reads a single `Basemap` that is related to this `OptionalBasemapLayer`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OptionalBasemapLayer` that was updated by this mutation."""
  optionalBasemapLayer: OptionalBasemapLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePost` mutation."""
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  message: JSON
  postId: Int
}

"""The output of our `updatePost` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Topic` that is related to this `Post`."""
  topic: Topic
}

"""All input for the `updateProfileByUserId` mutation."""
input UpdateProfileByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  patch: ProfilePatch!
  userId: Int!
}

"""The output of our update `Profile` mutation."""
type UpdateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was updated by this mutation."""
  profile: Profile

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [NATURAL]
  ): ProfilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Profile`."""
  user: User
}

"""All input for the `updateProjectByNodeId` mutation."""
input UpdateProjectByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Project` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!
}

"""All input for the `updateProjectBySlug` mutation."""
input UpdateProjectBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!

  """
  Short identifier for the project used in the url. This property cannot be changed after project creation.
  """
  slug: String!
}

"""All input for the `updateProject` mutation."""
input UpdateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  patch: ProjectPatch!
}

"""All input for the `updateProjectInviteByEmailAndProjectId` mutation."""
input UpdateProjectInviteByEmailAndProjectIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Specified by admin when invite was created."""
  email: Email!

  """
  An object where the defined keys will be set on the `ProjectInvite` being updated.
  """
  patch: ProjectInvitePatch!
  projectId: Int!
}

"""All input for the `updateProjectInviteByNodeId` mutation."""
input UpdateProjectInviteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectInvite` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectInvite` being updated.
  """
  patch: ProjectInvitePatch!
}

"""
All input for the `updateProjectInviteGroupByInviteIdAndGroupId` mutation.
"""
input UpdateProjectInviteGroupByInviteIdAndGroupIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  inviteId: Int!

  """
  An object where the defined keys will be set on the `ProjectInviteGroup` being updated.
  """
  patch: ProjectInviteGroupPatch!
}

"""The output of our update `ProjectInviteGroup` mutation."""
type UpdateProjectInviteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectInviteGroup` that was updated by this mutation."""
  projectInviteGroup: ProjectInviteGroup

  """An edge for our `ProjectInviteGroup`. May be used by Relay 1."""
  projectInviteGroupEdge(
    """The method to use when ordering `ProjectInviteGroup`."""
    orderBy: [ProjectInviteGroupsOrderBy!] = [NATURAL]
  ): ProjectInviteGroupsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectInvite` mutation."""
input UpdateProjectInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `ProjectInvite` being updated.
  """
  patch: ProjectInvitePatch!
}

"""The output of our update `ProjectInvite` mutation."""
type UpdateProjectInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectInvite` that was updated by this mutation."""
  projectInvite: ProjectInvite

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `Project` mutation."""
type UpdateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `DataSourcesBucket` that is related to this `Project`."""
  dataSourcesBucket: DataSourcesBucket

  """The `Project` that was updated by this mutation."""
  project: Project

  """An edge for our `Project`. May be used by Relay 1."""
  projectEdge(
    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateProjectsSharedBasemapByBasemapIdAndProjectId` mutation.
"""
input UpdateProjectsSharedBasemapByBasemapIdAndProjectIdInput {
  basemapId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectsSharedBasemap` being updated.
  """
  patch: ProjectsSharedBasemapPatch!
  projectId: Int!
}

"""The output of our update `ProjectsSharedBasemap` mutation."""
type UpdateProjectsSharedBasemapPayload {
  """
  Reads a single `Basemap` that is related to this `ProjectsSharedBasemap`.
  """
  basemap: Basemap

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectsSharedBasemap` that was updated by this mutation."""
  projectsSharedBasemap: ProjectsSharedBasemap

  """An edge for our `ProjectsSharedBasemap`. May be used by Relay 1."""
  projectsSharedBasemapEdge(
    """The method to use when ordering `ProjectsSharedBasemap`."""
    orderBy: [ProjectsSharedBasemapsOrderBy!] = [NATURAL]
  ): ProjectsSharedBasemapsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSketchByNodeId` mutation."""
input UpdateSketchByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sketch` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Sketch` being updated.
  """
  patch: SketchPatch!
}

"""All input for the `updateSketchClassByNodeId` mutation."""
input UpdateSketchClassByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchClass` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SketchClass` being updated.
  """
  patch: SketchClassPatch!
}

"""All input for the `updateSketchClass` mutation."""
input UpdateSketchClassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SketchClass` being updated.
  """
  patch: SketchClassPatch!
}

"""The output of our update `SketchClass` mutation."""
type UpdateSketchClassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `SketchClass`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchClass` that was updated by this mutation."""
  sketchClass: SketchClass

  """An edge for our `SketchClass`. May be used by Relay 1."""
  sketchClassEdge(
    """The method to use when ordering `SketchClass`."""
    orderBy: [SketchClassesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchClassesEdge
}

"""All input for the `updateSketchFolderByNodeId` mutation."""
input UpdateSketchFolderByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SketchFolder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SketchFolder` being updated.
  """
  patch: SketchFolderPatch!
}

"""All input for the `updateSketchFolder` mutation."""
input UpdateSketchFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SketchFolder` being updated.
  """
  patch: SketchFolderPatch!
}

"""The output of our update `SketchFolder` mutation."""
type UpdateSketchFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SketchFolder` that was updated by this mutation."""
  sketchFolder: SketchFolder

  """An edge for our `SketchFolder`. May be used by Relay 1."""
  sketchFolderEdge(
    """The method to use when ordering `SketchFolder`."""
    orderBy: [SketchFoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SketchFoldersEdge
}

"""All input for the `updateSketch` mutation."""
input UpdateSketchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Sketch` being updated.
  """
  patch: SketchPatch!
}

"""The output of our update `Sketch` mutation."""
type UpdateSketchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Sketch` that is related to this `Sketch`."""
  collection: Sketch

  """Reads a single `Sketch` that is related to this `Sketch`."""
  copiedFrom: Sketch

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Sketch` that was updated by this mutation."""
  sketch: Sketch

  """Reads a single `SketchClass` that is related to this `Sketch`."""
  sketchClass: SketchClass

  """Reads a single `User` that is related to this `Sketch`."""
  user: User
}

"""All input for the `updateSurveyByNodeId` mutation."""
input UpdateSurveyByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Survey` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Survey` being updated.
  """
  patch: SurveyPatch!
}

"""All input for the `updateSurvey` mutation."""
input UpdateSurveyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Survey` being updated.
  """
  patch: SurveyPatch!
}

"""All input for the `updateSurveyInviteByEmailAndSurveyId` mutation."""
input UpdateSurveyInviteByEmailAndSurveyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: Email!

  """
  An object where the defined keys will be set on the `SurveyInvite` being updated.
  """
  patch: SurveyInvitePatch!
  surveyId: Int!
}

"""All input for the `updateSurveyInviteByEmail` mutation."""
input UpdateSurveyInviteByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: Email!

  """
  An object where the defined keys will be set on the `SurveyInvite` being updated.
  """
  patch: SurveyInvitePatch!
}

"""All input for the `updateSurveyInviteByNodeId` mutation."""
input UpdateSurveyInviteByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SurveyInvite` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SurveyInvite` being updated.
  """
  patch: SurveyInvitePatch!
}

"""All input for the `updateSurveyInvitedGroups` mutation."""
input UpdateSurveyInvitedGroupsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupIds: [Int]
  surveyId: Int
}

"""The output of our `updateSurveyInvitedGroups` mutation."""
type UpdateSurveyInvitedGroupsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  groups: [Group!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSurveyInvite` mutation."""
input UpdateSurveyInviteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SurveyInvite` being updated.
  """
  patch: SurveyInvitePatch!
}

"""The output of our update `SurveyInvite` mutation."""
type UpdateSurveyInvitePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyInvite`."""
  survey: Survey

  """The `SurveyInvite` that was updated by this mutation."""
  surveyInvite: SurveyInvite

  """An edge for our `SurveyInvite`. May be used by Relay 1."""
  surveyInviteEdge(
    """The method to use when ordering `SurveyInvite`."""
    orderBy: [SurveyInvitesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyInvitesEdge
}

"""The output of our update `Survey` mutation."""
type UpdateSurveyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `Survey`."""
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Survey` that was updated by this mutation."""
  survey: Survey
}

"""All input for the `updateSurveyResponseByNodeId` mutation."""
input UpdateSurveyResponseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SurveyResponse` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SurveyResponse` being updated.
  """
  patch: SurveyResponsePatch!
}

"""All input for the `updateSurveyResponse` mutation."""
input UpdateSurveyResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `SurveyResponse` being updated.
  """
  patch: SurveyResponsePatch!
}

"""The output of our update `SurveyResponse` mutation."""
type UpdateSurveyResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Survey` that is related to this `SurveyResponse`."""
  survey: Survey

  """The `SurveyResponse` that was updated by this mutation."""
  surveyResponse: SurveyResponse

  """An edge for our `SurveyResponse`. May be used by Relay 1."""
  surveyResponseEdge(
    """The method to use when ordering `SurveyResponse`."""
    orderBy: [SurveyResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SurveyResponsesEdge
}

"""All input for the `updateTableOfContentsItemByDataLayerId` mutation."""
input UpdateTableOfContentsItemByDataLayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  If is_folder=false, a DataLayers visibility will be controlled by this item
  """
  dataLayerId: Int!

  """
  An object where the defined keys will be set on the `TableOfContentsItem` being updated.
  """
  patch: TableOfContentsItemPatch!
}

"""All input for the `updateTableOfContentsItemByNodeId` mutation."""
input UpdateTableOfContentsItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TableOfContentsItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TableOfContentsItem` being updated.
  """
  patch: TableOfContentsItemPatch!
}

"""All input for the `updateTableOfContentsItemChildren` mutation."""
input UpdateTableOfContentsItemChildrenInput {
  childIds: [Int]

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  parentId: Int
}

"""The output of our `updateTableOfContentsItemChildren` mutation."""
type UpdateTableOfContentsItemChildrenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  tableOfContentsItems: [TableOfContentsItem!]
}

"""All input for the `updateTableOfContentsItem` mutation."""
input UpdateTableOfContentsItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `TableOfContentsItem` being updated.
  """
  patch: TableOfContentsItemPatch!
}

"""The output of our update `TableOfContentsItem` mutation."""
type UpdateTableOfContentsItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `DataLayer` that is related to this `TableOfContentsItem`.
  """
  dataLayer: DataLayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `TableOfContentsItem` that was updated by this mutation."""
  tableOfContentsItem: TableOfContentsItem

  """An edge for our `TableOfContentsItem`. May be used by Relay 1."""
  tableOfContentsItemEdge(
    """The method to use when ordering `TableOfContentsItem`."""
    orderBy: [TableOfContentsItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TableOfContentsItemsEdge
}

"""All input for the `updateTopicByNodeId` mutation."""
input UpdateTopicByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Topic` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""All input for the `updateTopic` mutation."""
input UpdateTopicInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Topic` being updated.
  """
  patch: TopicPatch!
}

"""The output of our update `Topic` mutation."""
type UpdateTopicPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Forum` that is related to this `Topic`."""
  forum: Forum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Topic` that was updated by this mutation."""
  topic: Topic

  """An edge for our `Topic`. May be used by Relay 1."""
  topicEdge(
    """The method to use when ordering `Topic`."""
    orderBy: [TopicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TopicsEdge
}

"""All input for the `updateZIndexes` mutation."""
input UpdateZIndexesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dataLayerIds: [Int]
}

"""The output of our `updateZIndexes` mutation."""
type UpdateZIndexesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  dataLayers: [DataLayer!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""
The SeaSketch User type is quite sparse since authentication is handled by Auth0
and we store no personal information unless the user explicitly adds it to the
user `Profile`.

During operation of the system, users identify themselves using bearer tokens. 
These tokens contain ephemeral information like `canonical_email` which can be
used to accept project invite tokens.

"""
type User implements Node {
  """
  Whether the user has been banned from the forums. Use `disableForumPosting()`
  and `enableForumPosting()` mutations to modify this state. Accessible only to admins.
  """
  bannedFromForums(projectId: Int): Boolean

  """
  Email notification preferences can be read and set by the current user session.
      These settings cannot be accessed by other users or SeaSketch project admins.
  """
  emailNotificationPreference: EmailNotificationPreference

  """
  Reads and enables pagination through a set of `EmailNotificationPreference`.
  """
  emailNotificationPreferencesConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailNotificationPreferenceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmailNotificationPreference`."""
    orderBy: [EmailNotificationPreferencesOrderBy!] = [NATURAL]
  ): EmailNotificationPreferencesConnection! @deprecated(reason: "Please use emailNotificationPreference instead")
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Indicates whether the user has seen post-registration information. Can be 
  updated with `confirmOnboarded()` mutation. 
  
  Since this field is a date, it could
  hypothetically be reset as terms of service are updated, though it may be better
  to add a new property to track that.
  
  """
  onboarded: Datetime
  participationStatus(projectId: Int): ParticipationStatus

  """
  
  Access the user's profile. This feature is only accessible to project admins if
  the user has chosen to share their profile with the project.
  
  User profiles cannot be accessed directly en-mass by end-users. Rather, Survey 
  `Posts` and other shared content will have accessor methods to get at this 
  information, but again, only if the profile has been shared.
  """
  profile: Profile
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
