"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

scalar Email

"""User groups designated by the project administrators"""
type Group implements Node {
  id: Int!
  memberCount: Int

  """Reads and enables pagination through a set of `User`."""
  members(
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    orderBy: ParticipantSortBy
  ): [User]
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Project` that is related to this `Group`."""
  project: Project
  projectId: Int!
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

enum ParticipantSortBy {
  EMAIL
  NAME
}

"""
Personal information that users have contributed. Note that access to PII must
be handle carefully to respect sharing preferences
"""
type Profile {
  affiliations: String
  bio: String
  email: Email
  fullname: String
  nickname: String
  picture: String

  """Reads a single `User` that is related to this `Profile`."""
  user: User
  userId: Int!
}

type Project implements Node {
  accessControl: ProjectAccessControlSetting
  description: String

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]!
  id: Int!

  """Featured projects may be given prominent placement on the homepage."""
  isFeatured: Boolean
  isListed: Boolean

  """
  If a logoUrl is provided, it will link to this url in a new window if provided.
  """
  logoLink: String

  """
  URL referencing an image that will be used to represent the project. Will be displayed at 48x48 pixels
  """
  logoUrl: String
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Count of all users who have opted into participating in the project, sharing their profile with project administrators.
  """
  participantCount: Int

  """
  All users who have opted into participating in the project, sharing their profile with project administrators.
  """
  participants(
    direction: SortByDirection

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    orderBy: ParticipantSortBy
  ): [User]

  """Will resolve to https://seasketch.org/{slug}/ and cannot be changed"""
  slug: String!
  url: String
}

enum ProjectAccessControlSetting {
  ADMINS_ONLY
  INVITE_ONLY
  PUBLIC
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """Checks for equality with the object’s `accessControl` field."""
  accessControl: ProjectAccessControlSetting

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isFeatured` field."""
  isFeatured: Boolean

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  ACCESS_CONTROL_ASC
  ACCESS_CONTROL_DESC
  ID_ASC
  ID_DESC
  IS_FEATURED_ASC
  IS_FEATURED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  currentProject: Project
  group(id: Int!): Group

  """Reads a single `Group` using its globally unique `ID`."""
  groupByNodeId(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group
  me: User

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  profileByUserId(userId: Int!): Profile
  project(id: Int!): Project

  """Reads a single `Project` using its globally unique `ID`."""
  projectByNodeId(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    nodeId: ID!
  ): Project
  projectBySlug(slug: String!): Project

  """Reads and enables pagination through a set of `Project`."""
  projectsConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  user(id: Int!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

enum SortByDirection {
  ASC
  DESC
}

type User implements Node {
  id: Int!
  isAdmin(project: Int): Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  onboarded: Datetime

  """Reads a single `Profile` that is related to this `User`."""
  profile: Profile
}
